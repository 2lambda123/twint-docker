// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// .docker/templates/docker-compose.tmpl
// .docker/templates/docker-entrypoint.tmpl
// .docker/templates/docker-sync.tmpl
// .docker/templates/dockerfile_alpine.tmpl
// .docker/templates/dockerfile_debian-slim.tmpl
// .docker/templates/dockerfile_ubuntu.tmpl
// .docker/templates/dockerignore.tmpl
// .docker/templates/env.tmpl
// .docker/templates/makefile.tmpl
// .docker/templates/readme.tmpl
// .docker/templates/readme_alpine.tmpl
// .docker/templates/travis.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DockerTemplatesDockerComposeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x41\x4f\xe3\x3c\x10\xbd\xe7\x57\x8c\xf8\x90\x38\x39\x4d\x84\x3e\x2d\x6b\xa9\x87\xb2\xf4\xc0\xee\xaa\x45\xb4\xe2\x1a\x99\x64\x0a\x56\x1d\xbb\x1a\x3b\xa1\x6c\x94\xff\xbe\x72\x9c\x84\x96\x85\xee\x5e\x9c\xcc\xcc\x9b\xe7\x37\xf3\xcc\x18\x8b\x6a\x24\x2b\x8d\xe6\x70\x71\x19\x7f\xb9\x88\x2c\x52\x2d\x73\xb4\x3c\x8a\x00\xdc\x8b\xd4\x8e\x47\x00\x00\xb2\x14\x4f\xc8\x61\x9f\xd0\xaf\xad\xa9\x27\xa1\xd2\x34\x10\xdf\x48\x82\xb6\x6d\x1a\xb9\x81\xf8\x5a\x58\x6c\x5b\xd6\x34\xa8\x0b\x9f\x0b\x19\x68\xdb\x8e\xe2\xb1\x92\xaa\x08\x6c\x00\xb9\xd1\x0e\xf7\x8e\x43\xdc\x27\x0a\x93\x6f\x91\x36\x52\x21\x87\x9b\xf1\x3f\x1a\xb0\x42\x6a\xa4\x4c\x8b\x12\x79\x90\xc5\x72\x25\x47\x8d\xcc\xa2\xa0\xfc\xf9\x73\xa9\x03\x40\x09\x87\xd6\x9d\x60\x0d\xb8\x0e\xb0\x33\xe4\x6c\xa0\x64\x70\x99\x24\x09\xf7\x47\x17\xa3\xae\x25\x19\x5d\xe2\xb0\x1e\x06\x8b\xe5\xcd\x3c\x9b\x2f\x1e\xa6\x3b\x32\x45\x95\x3b\x69\x74\x27\xcf\x10\xdb\x91\xac\xcd\xfe\x95\x9f\xb8\xd6\x19\xea\x51\x87\x23\xf8\x9d\x88\x27\x9c\x1c\x92\x1c\x4c\x70\x24\xf0\xec\x6b\xf2\x7f\xc2\xfd\x71\x06\xff\xc1\xda\x10\xec\x68\xa0\x0b\xd5\xd4\x57\xd3\xa1\xea\x75\x90\x51\x1d\xc9\x00\xba\x4a\xd3\x2b\xee\x0f\x0f\xba\x0b\x17\x02\xf8\x31\x50\x09\xeb\x64\xfe\xc1\x9a\x83\x6f\x71\x0f\x88\x73\x33\x39\xc2\x1e\x47\xfc\xbc\x99\xff\x9c\xad\xd6\xb7\xdf\xb2\x87\xf9\xfd\xea\x76\xb9\x68\x4f\x2c\xa5\x6f\xfd\x6c\xe3\xda\x14\x18\x7b\xfc\xf4\xe8\x8e\xbe\x9a\xab\xca\x3a\xa4\x58\x6a\xe9\xa4\x50\x59\x29\x7c\x98\xf9\x26\x7b\xb2\xa1\x63\x0c\x53\xb1\x3e\xd7\x23\x1e\x8d\x71\xd6\x91\xd8\xc5\x25\x96\x86\x5e\x33\x65\xf2\xed\xd4\x51\x85\xc3\x02\xe7\xab\xec\xfb\xec\x61\x96\x2d\xef\xd6\xab\xe9\xdb\xac\x63\xae\x3d\xeb\x90\x95\x92\xa5\x1c\xac\x03\x28\xb1\xf4\x4c\x43\x08\x60\xcd\xc6\x71\x60\xe9\x98\x78\x16\x54\x8c\x89\xda\xa8\xaa\xc4\xd1\x78\xb4\x85\x70\x22\x49\xf9\xa4\xb2\x34\xb1\xcf\x82\xf0\x9d\x05\xbe\xfe\xe7\x83\x79\x93\x77\xb7\xbc\x5f\xb7\xfc\x5d\xec\x5d\xdf\xca\x47\xa1\xc5\x5f\xec\x0e\xa0\xfe\xc3\xcf\x9b\x1f\xb7\xd7\xb3\xc5\xec\x5f\xfc\x0d\x2d\x1f\x29\xeb\x39\x06\x61\x87\x61\x14\x1d\xcc\x3f\xce\xde\x75\x16\x24\x6b\x24\x0e\xca\xe4\x42\x45\x91\x46\xf7\x62\x68\xdb\x01\x0b\xdc\x88\x4a\xf5\x4f\x07\xf7\x0e\x49\x0b\x35\x2c\x3c\x68\xd2\x2f\xac\x93\xf5\x3b\x00\x00\xff\xff\x93\x51\xb3\x35\x15\x05\x00\x00")

func DockerTemplatesDockerComposeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerComposeTmpl,
		".docker/templates/docker-compose.tmpl",
	)
}

func DockerTemplatesDockerComposeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerComposeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-compose.tmpl", size: 1301, mode: os.FileMode(420), modTime: time.Unix(1576920052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerEntrypointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\x52\x71\xe0\x02\x04\x00\x00\xff\xff\xc2\x78\x36\x2c\x0f\x00\x00\x00")

func DockerTemplatesDockerEntrypointTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerEntrypointTmpl,
		".docker/templates/docker-entrypoint.tmpl",
	)
}

func DockerTemplatesDockerEntrypointTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerEntrypointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-entrypoint.tmpl", size: 15, mode: os.FileMode(420), modTime: time.Unix(1576745907, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerSyncTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x6a\xc3\x40\x0c\xc6\xf1\xdd\x4f\x21\x8e\xc2\x4d\x6e\xdd\x8e\x07\x5d\x4a\x1f\xc0\x5b\x47\x73\xb5\x95\xcb\x41\x90\x0e\x49\xb6\x63\x42\xde\x3d\x24\x86\x38\xe0\x4d\xfc\xfe\x82\x6f\x42\xd1\xcc\x14\xc0\x7d\xb9\x8a\x8b\x65\x26\x0d\x15\xc0\x84\xf2\xcf\x8a\x01\x4c\x46\xac\x74\xa1\xfe\xc1\xb1\x94\x6e\x88\x16\xef\x37\x80\x4a\x1f\xe0\xed\xd2\xfe\xfd\x5e\x3f\x6c\xce\x64\xab\x2e\xd4\x77\x6a\x12\x0d\xd3\x12\xc0\x53\xb4\x3c\x61\xc7\x7a\xf6\x5b\x1f\x15\x25\x0f\x01\x3e\x9b\xa6\xd9\x34\x09\x8f\x65\xcf\x51\x92\xae\x8b\x35\xb8\xba\x08\x1e\x50\x80\x70\x46\x71\x4f\xcd\x89\x58\xf0\xdb\xb7\xd1\x8e\xf0\x9e\xb2\xf9\x7d\xfb\xc1\x13\xcf\x2f\x0f\xb7\x00\x00\x00\xff\xff\x22\x21\x4b\x7c\xfd\x00\x00\x00")

func DockerTemplatesDockerSyncTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerSyncTmpl,
		".docker/templates/docker-sync.tmpl",
	)
}

func DockerTemplatesDockerSyncTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerSyncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-sync.tmpl", size: 253, mode: os.FileMode(420), modTime: time.Unix(1576854421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xd1\x4e\x1b\x3b\x10\x7d\xbe\xfe\x8a\x51\xb8\x82\x07\xae\x13\x50\xde\xb8\x97\xab\x46\x21\x6d\xa3\x96\x24\x5a\x42\x2a\x54\xaa\xca\xb1\x27\xd9\x29\xbb\xb6\x65\xcf\x2e\x89\x10\xff\x5e\xed\x6e\x02\x01\x05\xf1\xd0\xa7\xb5\x67\x8e\xec\x73\x8e\xe7\xec\xc7\x64\x7c\x09\x2a\xf3\x64\xf1\xac\xdb\x3e\x3d\x81\xde\x15\xcc\x0b\xca\x8c\x10\xdf\xc6\xc9\x97\x8b\x61\x02\x1d\xe7\xb9\xa3\xbc\x17\xe2\x00\x86\x36\xb2\xca\x32\x98\xac\x39\x75\x16\x94\x35\x80\x2b\xc6\x60\x55\x06\x06\x3d\x5a\x83\x56\x13\xc6\x7f\x80\xac\xce\x0a\x43\x76\x09\x29\x2a\x83\x21\xd6\xe0\x4f\xfd\xbe\x48\xae\x47\xa0\xfc\x1d\x28\x63\x40\x4a\xeb\xa4\x56\x3a\x45\xf0\xf5\x91\xdd\xed\x57\x1a\x2c\xc1\xaf\xbb\xd2\x93\x87\x8c\xe6\x8b\x05\x6d\x3e\x75\x27\x2f\x62\x56\x2f\x96\x5a\xc3\x92\x18\xb4\x92\x1a\x03\xd3\x82\xb4\x62\x8c\xe0\x3c\xda\x79\xa6\xe2\x2b\xf4\xf1\xf1\x0b\x19\xe4\xd1\x96\x35\x23\x4f\xbe\x0b\xb4\xa9\xfb\xa6\x2e\x0e\xa0\x1f\x50\x31\x82\x82\x92\x02\x17\x2a\x03\xb4\x25\x05\x67\x73\xb4\x5c\x2b\x52\x9a\xa9\xac\x20\xc4\xcd\x39\x1b\x19\x32\x87\x12\x6d\xd9\xb8\x57\xad\xc4\x60\x34\x83\x49\x6f\xfa\xf9\xbc\xf5\x54\xeb\xcc\xc9\x9e\xfd\x5d\x15\x5b\x70\x2b\xfe\x9a\x0d\x93\xe9\x75\xef\xeb\xcf\xc1\x68\xb6\x03\x6a\xed\x32\xde\x35\x19\xc8\xb2\x03\x4e\x71\x2f\xb9\x7b\xe2\x74\x57\x60\x6d\x52\xe6\x2c\x82\x94\x06\x3d\xa7\xe7\xa7\x20\xe7\xf0\xf0\xd0\x9e\x61\x88\xe4\xec\xe3\x23\xa4\xcc\x3e\x9e\x75\x3a\x4b\xe2\xb4\x98\xb7\xb5\xcb\x3b\x7c\x4f\x96\x7d\x70\xbf\x50\x73\xb3\x79\x1a\x88\x8a\xf2\xe1\x21\x68\xf3\xba\xf2\xc2\x4b\x29\x0b\xbf\x0c\xca\x60\x55\xde\x07\xd0\xcd\x2c\xed\xe9\xd8\x22\xf7\xeb\x7d\x8d\xb6\x10\xaf\x07\x57\x5c\xf6\x86\xa3\x69\x6f\x38\x1a\x24\xb0\x3a\x09\xab\x3b\x57\xc2\x7f\x9b\xc5\x07\x1f\x1c\x3b\x9b\x2b\xca\x2a\x4d\xff\xef\x3c\x6c\x28\x2c\x53\x8e\x50\x44\x0c\xb5\x4d\xf9\x9d\xa1\x00\xd2\xd7\x9a\x36\x77\x2b\x63\xaa\x3e\xc8\x0b\x68\x1c\x90\xe9\xb3\x64\x19\xa1\x7a\xc6\x4e\x4c\xe1\x56\x40\x05\x8f\xc5\x16\xa6\xe1\x68\xc7\x9d\x7f\x9f\x0f\x37\x8a\xd5\xd1\x7b\x81\xda\x72\x7b\xf1\xe6\xce\x66\xeb\xf7\x22\xb4\x89\xcb\x36\x02\xd5\x3e\xb2\xd1\xcd\xec\x5f\xdd\x13\xeb\x14\xd8\xd5\x9a\x41\x3b\xcb\xb8\x62\x71\x7d\x35\x48\x1a\xda\x7b\x83\xdf\x77\x7e\xfd\xe6\xa8\x2d\x82\xcb\xeb\xa6\x0f\x58\x92\x2b\x22\x50\xae\x96\x28\xfa\xe3\xc9\x0d\x48\x59\xb5\xcf\xeb\x9f\xca\x73\x1a\x76\x72\x21\x0e\xa0\xb7\x0d\xd1\x1b\x37\xfc\x49\x76\x06\xa3\x69\x72\x33\x19\x0f\x47\x53\xf8\xde\xaa\x05\xb6\x7e\xfc\x0e\x00\x00\xff\xff\x16\xea\xa4\x28\xf6\x04\x00\x00")

func DockerTemplatesDockerfile_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_alpineTmpl,
		".docker/templates/dockerfile_alpine.tmpl",
	)
}

func DockerTemplatesDockerfile_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_alpine.tmpl", size: 1270, mode: os.FileMode(420), modTime: time.Unix(1576830973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_debianSlimTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x51\xeb\xda\x30\x14\xc5\xdf\xf3\x29\x2e\x0e\x7c\x98\xa4\x19\xf8\x30\x90\x39\x94\xad\x1b\x65\xb3\x95\xac\x2a\x32\xc7\x88\x6d\x96\x66\xb6\x49\x48\x6e\x9d\x22\x7e\xf7\x61\xf5\xcf\x5f\x7d\xca\x39\xe7\x47\xe0\x9c\xfb\x85\x67\x33\x70\x47\xac\xac\x19\x0d\xa3\xf7\x34\xd4\xba\xa1\x01\xbd\xc4\xa2\x22\x64\x36\x4d\xd2\x7c\x9a\xa4\x31\x87\xc3\x3b\x7f\xd8\xd9\x3d\x7c\xb8\x89\x89\xf3\x16\xad\x69\x84\xae\xa3\xc2\x36\x1f\x09\x99\xf2\xaf\x90\xaf\x92\x34\xff\xbd\x8c\xf9\x8f\x24\x4b\xc7\xa7\x53\xb4\x94\x3e\x68\x6b\xce\x67\x42\x3e\x65\xf3\x35\x94\xb6\xd8\x49\x4f\xa5\x41\x7f\x74\x56\x1b\x8c\x42\x05\xec\xc1\x12\xbe\x48\xa1\xa8\x1a\x5b\xc2\xe0\xf0\xcc\x3a\xb8\x21\xc2\x21\x55\x12\xa1\x75\xa5\x40\x09\xfd\xfe\x5d\xa6\x4d\x40\x51\xd7\x40\x8f\xb0\x21\x4a\xe3\xcb\x1f\xa7\xdd\xf0\x15\xd2\xd6\x29\x2f\x4a\x09\x54\x82\xd2\x38\xa8\x10\x5d\x18\x31\xa6\x34\x56\xed\xf6\x32\x89\xe1\x3f\x6d\xd0\x79\xfb\x57\x16\x78\x35\x91\xd2\x38\xb9\x5f\xf5\x46\x2a\x35\xee\xd0\x73\xb3\xa2\x96\xc2\x80\x68\xd1\x5e\x55\x57\xd1\x37\x40\xfd\x1f\x60\x7b\xe1\x59\xad\xb7\x4c\x38\x64\xb5\x0e\x18\xd8\x5b\x60\xd8\xb8\xcb\x73\x61\x9d\x24\x24\x4e\x73\xbe\x9e\x67\x49\x9a\xc3\xcf\xde\xe3\x21\x7a\xbf\xc8\x32\xfb\xbe\x98\xc5\x70\x6d\x46\x56\x19\xff\xf6\x39\xe1\xc0\x82\xdf\xdf\xa2\xff\x01\x00\x00\xff\xff\x15\xde\x8c\x62\xdc\x01\x00\x00")

func DockerTemplatesDockerfile_debianSlimTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_debianSlimTmpl,
		".docker/templates/dockerfile_debian-slim.tmpl",
	)
}

func DockerTemplatesDockerfile_debianSlimTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_debianSlimTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_debian-slim.tmpl", size: 476, mode: os.FileMode(420), modTime: time.Unix(1576745957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_ubuntuTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xdf\x6e\xd3\x30\x18\xc5\xef\xfd\x14\x9f\x86\x34\x01\x53\x62\xa6\x5d\x31\x31\xb4\x0a\x02\x44\xd0\x64\xf2\xd2\x56\x15\x45\xc8\x49\x8c\x63\x48\x6c\xcb\xfe\x5c\x48\xab\x3e\x10\xcf\xc1\x8b\xa1\xa6\x9d\xfa\xe7\xca\xe7\x9c\x9f\x65\x9d\xe3\x0f\x2c\x1f\x43\x28\x83\xc6\x70\x7b\xfd\x3a\xbe\x7e\x45\xc8\x78\x94\x66\xc5\x28\xcd\x12\x06\x8f\xff\xfe\x96\xdc\xa3\x12\x1a\x3e\x99\xb0\x12\x08\xcf\x7b\x63\x56\xca\xc4\x95\xe9\x5e\xc0\x1b\x2f\xf6\xf8\xfe\x10\xbf\x25\x64\xc4\x3e\x42\x31\x4b\xb3\xe2\xfb\x34\x61\x8f\x69\x9e\xdd\xad\xd7\xf1\x54\x38\xaf\x8c\xde\x6c\x08\x79\x97\x3f\xcc\xa1\x36\xd5\x2f\xe1\x22\xa1\xd1\xf5\xd6\x28\x8d\xb1\x6f\x80\x9e\x58\xc2\x26\x19\x54\x4d\x67\x6a\xb8\xfa\x73\xce\x06\xb8\x20\xdc\x62\x24\x05\x42\xb0\x35\x47\x01\x97\x97\x47\x99\xd2\x1e\x79\xdb\x42\xd4\xc3\x82\x48\x85\xb0\x20\xb6\xc7\xc6\xe8\x9b\xc8\x2a\xfb\xf4\x82\x55\xf6\xe6\x70\x35\x0a\x56\x3a\x5e\x0b\x88\x04\x48\x85\x57\x0d\xa2\xf5\xb7\x94\x4a\x85\x4d\x28\xb7\x03\x29\xfe\x56\x1a\xad\x33\x3f\x45\x85\x3b\x13\x4b\x85\xf7\xc7\x1b\x9f\x09\x29\xef\x06\x74\xde\xb3\x6a\x05\xd7\xc0\x03\x9a\x9d\x1a\x0a\xbb\x0e\x22\xf7\x03\xe8\x92\x3b\xda\xaa\x92\x72\x8b\xb4\x55\x1e\x3d\x7d\x09\x14\x3b\xbb\x3d\xb6\x6c\x90\x84\x24\x59\xc1\xe6\x0f\x79\x9a\x15\xf0\xf5\xe2\xf4\x5b\x2e\xbe\x91\x69\xfe\x65\x32\x4e\x60\xd7\x8c\xcc\x72\xf6\xf9\x7d\xca\x80\x7a\xb7\xdc\x47\xff\x03\x00\x00\xff\xff\x4f\xe2\x8d\x91\xf4\x01\x00\x00")

func DockerTemplatesDockerfile_ubuntuTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_ubuntuTmpl,
		".docker/templates/dockerfile_ubuntu.tmpl",
	)
}

func DockerTemplatesDockerfile_ubuntuTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_ubuntuTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_ubuntu.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1576745927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xce\xc9\xcc\xe5\x4a\xcc\x29\xc8\xcc\x4b\xe5\xf2\x4d\xcc\x4e\x4d\xcb\xcc\x49\xe5\x4a\xc9\x4f\xce\x4e\x2d\xd2\x4d\xce\xcf\x2d\xc8\x2f\x4e\xd5\xab\xcc\xcd\x41\x17\xd2\x02\x0b\xea\xa5\x67\x96\x80\x09\x7d\x08\xa9\x05\xa5\xb4\xb8\x00\x01\x00\x00\xff\xff\x78\xa9\x74\xfb\x57\x00\x00\x00")

func DockerTemplatesDockerignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerignoreTmpl,
		".docker/templates/dockerignore.tmpl",
	)
}

func DockerTemplatesDockerignoreTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerignore.tmpl", size: 87, mode: os.FileMode(420), modTime: time.Unix(1576745854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesEnvTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\x83\x30\x18\x86\xef\xfe\x8a\xd0\xee\xaa\xd3\x42\x27\x1d\xe4\xf0\x69\x83\x64\xb5\x2a\x26\xba\xde\xc4\x39\xc7\x02\xd3\x43\x23\x74\x10\xf2\xdf\x87\x2e\x5a\xe9\xed\x7b\x9f\x97\xf7\xe1\xdb\x22\x7e\x13\xfd\x60\xf1\x77\x9a\xf0\xaa\x0c\x59\x55\xe4\x31\x56\x0a\x39\x65\x23\x8b\x3c\x46\x5a\x9b\x8e\x43\x34\xf1\xa3\xb8\x22\xad\x95\x12\x5f\xc8\x09\x6a\xd9\x6a\x6d\x2b\xd5\xf6\x9f\x23\xfb\x27\xf7\x4d\x49\x72\x46\xd3\x64\xb5\x33\x45\x02\x67\xc2\x32\x08\xc9\x54\xa5\xb7\xbe\x5d\x95\x01\x30\x82\x87\xd5\x5b\xf4\x0c\x11\xc1\x4f\xea\x61\xab\x9f\x67\x34\x2e\xf4\xeb\x9c\x38\x44\xb3\x2a\xa2\x47\x7c\xf0\x7d\x93\x0a\x93\xac\x2d\x22\x3f\xb5\x1c\x44\x23\xdb\xfa\xda\x7c\x5b\x24\x06\xc6\x69\xb8\xfc\xeb\x3b\xae\xe3\x2d\x34\x4b\x73\x8e\x0f\x3b\xd7\x5d\xc8\x1b\x94\x50\xa5\x19\x67\x78\x63\x5f\x3a\xb9\xf7\x76\x1d\xb2\x2f\xdd\xef\x78\x6c\x46\xfd\x49\x7c\xd4\x7d\x6d\x9d\x68\x00\x09\x3c\x68\x0d\x9c\xac\xfb\x17\xd7\xfb\x0b\x00\x00\xff\xff\xd4\x69\x13\x70\x83\x01\x00\x00")

func DockerTemplatesEnvTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesEnvTmpl,
		".docker/templates/env.tmpl",
	)
}

func DockerTemplatesEnvTmpl() (*asset, error) {
	bytes, err := DockerTemplatesEnvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/env.tmpl", size: 387, mode: os.FileMode(420), modTime: time.Unix(1576920292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xdf\x0f\xd2\x30\x10\x7e\xee\xfd\x15\x97\x6c\x66\xf8\xb0\x15\x66\x82\xd0\x48\x82\x89\x44\x79\xe0\x47\x94\x68\x7c\xd1\xd4\xad\xb0\x65\xdd\xba\xac\x1d\xa8\xc0\xff\x6e\xda\x4d\xc7\x03\xbe\x5c\x7b\xdf\x7d\xfd\xee\xbb\xde\x7a\xf3\xf6\xfd\x0a\xd9\x02\x7f\x8e\x9b\xdf\x85\x3a\x53\x73\xc9\x2b\x13\xa6\x2a\x29\x44\x03\x9f\x57\x1f\x3f\xad\x77\x5b\xb6\x40\x7f\xa4\x33\x21\x25\x9e\x1a\x51\xe3\xe1\xcb\x7a\x7b\xf8\xde\x17\xf1\x9d\xe3\x1e\x73\x29\xf0\x86\xfc\x52\x60\x70\xad\x9b\xbc\x32\xe8\xc7\xf7\x00\x6f\x98\xb4\x06\xc3\x14\x83\x45\x80\xe1\x11\xe3\x97\x00\x9e\x87\x46\x68\x43\x08\x23\xf6\x8c\xc0\x46\x06\xc4\x34\xad\x70\xd5\xb3\x68\x74\xae\x2a\xc2\x48\x9a\xeb\x5a\xf2\x5f\x7f\x91\x08\xfa\x0b\x03\xb2\x14\x49\xa6\xd0\x1f\xf5\x3e\x3a\xdd\xbc\xe4\x27\x61\x85\x7f\xb4\xb9\x4c\xbb\x14\x79\x95\xa2\xe1\x27\x34\x99\x28\x23\x88\xf6\x1f\x76\xdb\xaf\xac\xab\x81\x8b\x56\xad\x1b\x19\xbb\x77\xa1\x41\xff\xea\xfe\xe6\xce\xfc\x6b\xdf\xe1\x8e\xd1\xc0\xb3\x7a\xcf\x28\xff\x30\xc9\xed\x54\xce\x54\xdd\xea\x2c\xec\x9c\x31\x62\x13\xec\x45\x1c\x36\x38\x1a\x78\x30\x5c\x1f\xbc\xb9\xa7\x4f\x9a\xfe\x8f\xf1\x60\x21\x13\xb2\xb6\xdf\xb2\x77\x9b\x49\x54\x59\xf2\x2a\xd5\x0e\x1e\xfa\xdb\x0c\x6c\x40\x86\x1b\x5e\x08\xbb\x53\x20\x4b\x2d\x52\x0c\x2b\x0c\x34\xfd\xe6\x79\x94\xd6\x01\xfa\x6f\x00\x3c\xcc\x8c\xa9\x35\xa3\x54\x1b\x9e\x14\xea\x2c\x9a\xa3\x54\x97\x28\x51\x25\xe5\x74\x1a\xbf\x7e\x35\x1b\xcf\xe9\x64\x16\x4f\x27\xe3\x39\xbc\xb0\x63\x30\xf8\x13\x00\x00\xff\xff\xa4\xdc\xfd\x9f\x6f\x02\x00\x00")

func DockerTemplatesMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesMakefileTmpl,
		".docker/templates/makefile.tmpl",
	)
}

func DockerTemplatesMakefileTmpl() (*asset, error) {
	bytes, err := DockerTemplatesMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/makefile.tmpl", size: 623, mode: os.FileMode(420), modTime: time.Unix(1576745814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdd\x6e\xdb\xc6\x12\xbe\xe7\x53\x0c\xac\x00\x91\x00\xaf\x2c\xff\x01\xb2\x81\x5c\xe4\x58\x27\xe7\x04\x27\xc0\x49\x63\x17\xbd\x08\x0c\x64\x48\x0e\xc5\xad\x96\xbb\xec\xee\x52\xb2\x6a\xb8\x6f\x52\xf4\xa6\x0f\xd8\x47\x28\x66\x97\x12\x25\x27\x6e\x83\x98\xf5\x85\x45\x0e\x67\xe7\xfb\xf6\x9b\x99\xfd\x19\x80\x5f\x49\xed\x45\x6e\xb2\x05\xd9\x24\x19\x0c\xe0\x06\x53\x45\x60\x0a\xb8\x32\xda\x93\xf6\x2e\x39\x1e\xc3\xc7\xff\x9a\x15\x78\x03\x8d\xa3\xdb\xe1\xa0\x34\x2b\xe1\x8d\x68\x1c\x8d\x12\x00\x00\x76\x78\x23\xad\xf3\xed\xf7\x82\x9f\xbb\xcf\x1b\x97\x2b\x4b\xe8\x09\x50\x03\x2a\x89\xee\x76\x38\xc8\x82\x45\xa0\x16\xc1\x32\x4a\x4e\xc6\xf0\x71\x16\xb8\x88\x2b\x53\xd5\x26\x84\x8b\xe4\x44\x16\x0d\xfb\x31\xff\xad\xd0\x79\x99\x39\x42\x9b\x95\x80\x3a\x87\xff\xc9\x14\x35\xde\x0e\x07\xb4\xfb\x49\xa0\xce\xc5\x22\x7c\xea\x02\x30\xda\x8d\xb1\x50\x5b\x73\xb7\xbe\x1d\x0e\xbc\xb1\x22\x3c\x77\x2e\xa7\x8c\x71\x47\x59\xe3\x09\x6e\x58\x2a\xc8\x4c\x55\xa1\xce\x19\x20\xda\x45\x94\xb0\xb5\x77\x43\xcf\xc2\x50\xac\x6a\x45\x8e\xf5\xdc\x1d\x18\xad\xc2\x14\xfb\xc3\x78\x46\x33\xf4\x41\x9b\x9c\x7f\x47\x09\x13\x78\xdd\xf8\xd2\x58\x36\x62\x7c\x1a\x25\x1c\xfc\x8f\xdf\x7e\xff\x35\x64\xc9\xca\xb4\xf1\x52\xcf\x59\xd1\x9d\xd7\x51\x72\x3e\x86\x8f\xd7\xa5\x59\xc1\xda\x34\x16\x5c\x53\xd7\xc6\xfa\xdb\xe1\xc0\x71\x06\xd9\x26\x5a\xdb\x28\xa4\xbe\x4b\x32\xbf\x0e\x60\x9b\xd3\x24\x79\x63\x2c\x14\xed\x2b\xce\xe9\x90\x23\x82\x26\xca\x79\x40\xda\x48\x95\x83\xac\x70\x4e\x10\x93\x35\x4e\x92\x4f\x9f\x3e\xb9\x92\x94\x4a\xa2\x05\xea\x46\x29\xb8\x9b\xd8\x9f\x17\x66\x79\x14\x24\xbb\xbc\xbf\x87\xf1\x4c\x5a\x78\x78\x60\xef\x24\x31\x16\x3e\x1b\xb7\x49\x7b\x04\x89\x7e\x03\x26\xf7\xa8\x9a\xba\x71\xe1\x35\xd6\xf5\xab\x83\x16\xdc\x36\x1a\x84\x97\x20\x84\xad\x40\x2c\xe1\xc5\xb0\x5e\xe5\xa3\x23\xd6\xf8\xf2\xc8\xd4\xfe\x08\xeb\x3a\xbc\x3d\xc9\xf0\xfe\x5e\x16\x30\xfe\x17\x3a\x7a\x78\x10\xf7\xf7\xa4\x73\xb6\x45\x0b\x3c\x3c\x1c\x30\x3e\xec\xff\x45\x11\x9f\xaa\xd0\x24\xb9\xf6\x68\x7d\x10\xbc\x06\x52\xb8\xef\xb4\x68\x9d\x9e\x92\xa3\xa9\x41\xe4\xb0\x57\xe3\x9b\x31\x1b\x8d\x60\x5b\xdb\xfb\x58\xde\xd8\xbf\x8b\xcb\x2e\xdb\x30\x5f\xac\xff\xa7\x23\x04\xad\x97\xf0\xe2\xfd\x0f\xb3\x56\xc5\x23\x67\x5b\x41\x63\x5a\x76\x43\x7f\xd6\x1f\x49\xf2\x1a\x0a\x5a\x81\x93\xfc\x05\x36\xbd\xc2\xdc\x4b\x52\x75\x28\xbc\x46\xe7\x64\x9d\x67\x9d\x7c\x49\x90\xa2\x93\x99\xbb\x7c\x0e\xa5\xf6\xbf\x68\xb8\xdc\xad\xc6\x8a\x40\xc0\x75\x66\xb1\x26\x40\xa5\x02\xcc\xcd\x8a\xc8\x3b\x28\xac\xa9\x82\xd7\x4b\x07\x5e\x56\xa4\xa4\xa6\x71\x3f\x88\x0e\x6a\xa9\x09\x6b\x9e\xf8\x1e\xfc\x2e\x34\x53\x79\x04\x0f\xdc\xf6\x28\xb5\xd4\xf3\x2e\xc2\x33\x38\xed\xf3\xb8\x32\x4a\x51\xe6\x81\x96\x64\xd7\x91\xca\x17\x01\x23\xbd\xe0\x65\x34\xbd\x74\x2d\xeb\x9e\xb4\x11\x6b\x42\x0b\x27\x93\xe3\xb3\x1d\x4a\xad\x2e\xbe\x44\x0f\x2b\xb2\x04\x9e\x0d\x94\x43\x4a\x85\xb1\x14\xdc\xfb\xc2\x77\x52\x67\x21\xe2\xb9\x38\x3e\x11\x27\x93\xaf\xa1\xf1\x78\x4c\x4f\x5c\x0c\x14\x52\xd1\xd8\xdf\xf9\xae\x4c\x5a\x0e\xdc\x13\x0e\x97\xc4\xfd\xb2\x71\xea\x17\x35\x73\x4b\x10\x22\xfc\x7f\x0a\x1b\x1d\x20\xb0\x47\x18\xd0\x93\xfe\x54\xa1\x54\x20\x44\x5d\x1a\x1d\xda\x83\x37\xb6\x5d\xe5\x2b\x39\x2f\x3d\x94\x4c\x20\xfa\xe8\xa6\x4a\xc9\x3a\x30\x16\xe2\x60\xcc\x73\x4b\xce\xd1\x73\x6a\xd2\xc1\xc1\xcc\x68\x54\x39\xdc\xd8\xa6\xaa\x0f\x40\x88\x25\x59\x59\x48\xca\x41\xc0\x4c\xba\x5a\xe1\x7a\xc3\x2b\x5d\xc3\xf6\x23\x4f\xa5\x65\x7a\xd3\x96\x07\xa6\xa6\xf1\xb0\x1b\xee\x19\xc4\xe6\xaf\x0e\xce\xa6\xe3\xe9\x74\x32\x39\x9b\x1e\x9e\x8c\x4f\xa7\xe7\x17\xa7\x17\x87\xc7\x8b\xea\xe0\x2b\x52\x17\x5a\x17\xc1\x62\x2e\x9b\xb0\x1a\x1f\x2f\x2a\x40\x6b\x1a\x9d\x03\x42\xad\x30\x23\x90\x1a\xde\xa3\x95\x31\xcf\x74\xc7\xe7\x06\x5e\x8c\x2a\xf8\x06\xca\xa6\xff\x02\x21\x07\xca\x64\xa8\x4a\xe3\xfc\xe5\xc5\xc9\x84\x1b\xf4\xff\x8d\xaf\x9b\xae\x3f\xcd\xfe\x6e\xdc\x6b\x5b\xfc\xe8\x8c\x06\x21\xe2\xcf\x5f\x36\x46\x70\xe9\xb3\x33\xf8\xe0\x92\xf2\x39\xc4\xc7\x05\x37\x4f\x99\x01\xe3\x75\x13\x47\xb8\xfe\xee\x9d\xf4\x04\x1b\xe7\xbe\xc0\x0b\xa3\x94\x59\x71\x69\x77\x3b\x16\x1f\x15\xbc\x27\xbb\xd9\xa7\xb6\x3e\xfd\x82\xf2\xee\xb3\x05\x5d\x95\xe6\x11\x70\x0b\xdb\x1f\x28\x2e\x8d\x95\x9e\xdc\xce\xca\xff\xe8\x6c\x80\x11\xb8\x44\x07\x1b\xef\xfc\x1f\x98\x33\xdf\xad\xac\x28\xf8\x44\xdd\x51\x09\xaf\x01\x5e\xea\xc2\xd8\x0a\xbd\x34\x9a\x9b\x97\x6c\x28\xb8\x28\x46\x4f\x64\x6a\x6b\xb8\x82\x37\x1c\xbe\x77\x9c\x75\xa7\xcc\xea\x10\xd2\xc6\x03\x15\x05\x65\x5e\x2e\x09\x2a\xf2\xa5\x09\xb7\x84\x39\xfa\x92\xec\xa3\x05\xa7\x2d\x90\x36\x1c\x0c\xff\x13\x9c\x1c\xfc\x72\xca\x0d\x1c\x7d\x0f\xbf\x61\x81\x79\xab\x33\xd5\xe4\x2c\xd6\x07\x8a\x5d\x31\xea\x2b\x0f\xb6\x0d\xb8\x9d\xf6\x4f\x8d\xcc\x16\x9f\x4f\x94\xcb\x82\x57\x1b\xb8\xd8\xce\x04\x86\x61\xf9\x97\x81\x1c\x39\xd8\x84\x1a\x7d\x59\x8e\xfe\x18\xbb\xa6\x22\x38\x9e\x5c\x9c\x4d\x4e\xa7\x17\xe7\xd3\xd3\xc9\xf9\x14\x04\x7c\x88\x76\x84\xf6\xfe\xe0\xf8\x92\xc0\x9a\x6d\xcf\x99\xae\xa6\x2c\xee\x5e\xf1\xd8\xf7\x76\x36\xee\x0e\xef\xe1\xa6\x1a\xaf\x86\xe1\xb2\x0a\x73\xd2\x64\xf9\x52\x96\xae\x23\x8f\x78\x4d\xcc\x90\xab\x8f\x77\x12\x26\xa2\x3c\xc4\x6a\xcc\x59\xa3\x70\x1d\x48\xde\x91\xe7\x59\xf3\xc6\xa9\xcd\x0a\x2e\x47\x7f\x06\x00\x00\xff\xff\xc3\x8a\x6e\xd6\x98\x10\x00\x00")

func DockerTemplatesReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadmeTmpl,
		".docker/templates/readme.tmpl",
	)
}

func DockerTemplatesReadmeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme.tmpl", size: 4248, mode: os.FileMode(420), modTime: time.Unix(1576917491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcd\x6e\x1b\x37\x10\xbe\xef\x53\x0c\xac\x00\x91\x00\x53\x96\xff\x00\xd9\x40\x0e\xa9\xdd\xb4\x41\x03\x34\x8d\x5d\xf4\x10\x18\xc8\xec\xee\xac\x96\x15\x97\xdc\x92\x5c\xc9\xaa\xe1\xbe\x49\xd1\x4b\x1f\xb0\x8f\x50\x0c\xb9\xd2\x4a\x4e\xdc\x06\xf1\xc6\x07\x6b\x39\x9c\x9f\x8f\xdf\xcc\xf0\x67\x00\x7e\x29\xb5\x17\xb9\xc9\xe6\x64\x93\x64\x30\x80\x6b\x4c\x15\x81\x29\xe0\xc2\x68\x4f\xda\xbb\xe4\x70\x0c\xef\xbf\x37\x4b\xf0\x06\x1a\x47\x37\xc3\x41\x69\x96\xc2\x1b\xd1\x38\x1a\x25\x00\x00\xac\xf0\x4a\x5a\xe7\xdb\xf9\x82\xbf\xbb\xe9\xb5\xca\x85\x25\xf4\x04\xa8\x01\x95\x44\x77\x33\x1c\x64\x41\x22\x50\x8b\x20\x19\x25\x47\x63\x78\x7f\x19\xb0\x88\x0b\x53\xd5\x26\xb8\x8b\xe0\x44\x16\x05\xbb\x3e\xbf\x55\xe8\xbc\xcc\x1c\xa1\xcd\x4a\x40\x9d\xc3\x0f\x32\x45\x8d\x37\xc3\x01\x6d\x4f\x09\xd4\xb9\x98\x87\xa9\xce\x01\x47\xbb\x36\x16\x6a\x6b\x6e\x57\x37\xc3\x81\x37\x56\x84\xef\x4e\xe5\x98\x63\xdc\x52\xd6\x78\x82\x6b\xa6\x0a\x32\x53\x55\xa8\x73\x0e\x10\xe5\x22\x52\xd8\xca\x3b\xd3\x93\x60\x8a\x55\xad\xc8\x31\x9f\xdb\x86\x51\x2a\x4c\xb1\x6b\xc6\x2b\xba\x44\x1f\xb8\xc9\xf9\x77\x94\x30\x80\x97\x8d\x2f\x8d\x65\x21\xc6\xaf\x51\xc2\xce\xff\xf9\xeb\xef\x3f\x43\x96\xac\x4c\x1b\x2f\xf5\x8c\x19\xdd\x1a\x8e\x92\xd3\x31\xbc\xbf\x2a\xcd\x12\x56\xa6\xb1\xe0\x9a\xba\x36\xd6\xdf\x0c\x07\x8e\x33\xc8\x32\xd1\xca\x46\x21\xf5\x5d\x92\x79\x38\x80\x4d\x4e\x93\xe4\x95\xb1\x50\xb4\x43\x9c\xd1\x3e\x7b\x04\x4d\x94\xb3\x41\xda\x48\x95\x83\xac\x70\x46\x10\x93\x35\x4e\x92\x0f\x1f\x3e\xb8\x92\x94\x4a\xa2\x04\xea\x46\x29\xb8\x9d\xd8\xdf\xe7\x66\x71\x10\x28\x3b\xbf\xbb\x83\xf1\xa5\xb4\x70\x7f\xcf\xda\x49\x62\x2c\x7c\x64\xb7\x4e\x7b\x0c\x12\xf5\x06\x0c\xee\x41\x35\x75\x76\x61\x18\xeb\xfa\xc5\x5e\x1b\xdc\x36\x1a\x84\x97\x20\x84\xad\x40\x2c\xe0\xd9\xb0\x5e\xe6\xa3\x03\xe6\xf8\xfc\xc0\xd4\xfe\x00\xeb\x3a\x8c\x1e\x45\x78\x77\x27\x0b\x18\x7f\x83\x8e\xee\xef\xc5\xdd\x1d\xe9\x9c\x65\x51\x02\xf7\xf7\x7b\x1c\x1f\x76\xff\x22\x89\x8f\x55\x68\x92\x5c\x79\xb4\x3e\x10\x5e\x03\x29\xdc\x55\x9a\xb7\x4a\x8f\xd1\xd1\xd4\x20\x72\xd8\xa9\xf1\xb5\xcd\x9a\x23\xd8\xd4\xf6\x6e\x2c\x6f\xec\xff\xf9\x65\x95\x8d\x9b\x4f\xd6\xff\xe3\x1e\x02\xd7\x0b\x78\xf6\xf6\x97\xcb\x96\xc5\x5d\x86\x83\x6c\xdb\xfb\x47\x2d\x92\x24\x2f\xa1\xa0\x25\x38\xc9\x33\xb0\x6e\x17\x86\x5f\x92\xaa\x43\xed\x35\x3a\x27\xeb\x3c\x53\xe5\x4b\x82\x14\x9d\xcc\xdc\xf9\x13\x51\xb5\xff\x45\xc3\x45\x6f\x35\x56\x04\x02\xae\x32\x8b\x35\x01\x2a\x15\x22\x5d\x2f\x89\xbc\x83\xc2\x9a\x2a\x68\x3d\x77\xe0\x65\x45\x4a\x6a\x1a\xf7\x16\xd4\x41\x2d\x35\x61\xcd\xcb\xdf\x41\xb0\x1d\x9d\xd1\x3c\x40\x00\xdc\xff\x28\xb5\xd4\xb3\xce\xc3\xd3\x60\xed\x42\xb9\x30\x4a\x51\xe6\x81\x16\x64\x57\x11\xcd\x27\x63\x46\x84\x41\xcb\x68\x7a\xee\x5a\xe0\xfd\x31\x24\x56\x84\x16\x8e\x26\x87\x27\x5b\xa8\x5a\x76\x7c\x89\x1e\x96\x64\x09\x3c\x0b\x28\x87\x94\x0a\x63\x29\xa8\xf7\x08\xc1\x49\x9d\x05\xa7\xa7\xe2\xf0\x48\x1c\x4d\x3e\x07\xc9\x43\x9b\xfe\xe0\x18\x28\xa4\xa2\xb1\xbf\xf5\x5d\xc9\xb4\x30\xb8\x4b\x1c\x2e\x88\x3b\x68\xad\xd4\x7b\xe0\xcc\x2d\x40\x88\xf0\xff\xb1\xf0\xe8\x00\x81\x35\x82\x41\x7f\x89\xa0\x0a\xa5\x02\x21\xea\xd2\xe8\xd0\x30\x7c\xe6\x6d\xa7\xa0\x92\xb3\xd2\x43\xc9\x18\xa2\x8e\x6e\xaa\x94\xac\x03\x63\x21\x1a\x63\x9e\x5b\x72\x8e\x9e\x58\xa2\x0e\xf6\x2e\x8d\x46\x95\xc3\xb5\x6d\xaa\x7a\x0f\x84\x58\x90\x95\x85\xa4\x1c\x04\x5c\x4a\x57\x2b\x5c\xad\xa1\xa5\x2b\xd8\x4c\xf2\x6a\x5a\xb0\xd7\x6d\xa9\x60\x6a\x1a\x0f\xdb\xee\x9e\x86\x6d\xf6\x62\xef\x64\x3a\x9e\x4e\x27\x93\x93\xe9\xfe\xd1\xf8\x78\x7a\x7a\x76\x7c\xb6\x7f\x38\xaf\xf6\x3e\x23\x87\xa1\x9f\x11\x2c\xe6\xb2\x09\x7b\xf5\xe1\xbc\x02\xb4\xa6\xd1\x39\x20\xd4\x0a\x33\x02\xa9\xe1\x2d\x5a\x19\x13\x4e\xb7\x7c\xb1\xe0\x4d\xaa\x82\x2f\x43\x6d\xbe\x4a\xb1\x90\x03\x65\x32\x54\xa5\x71\xfe\xfc\xec\x68\xc2\x5d\xfb\x63\xe3\xeb\xa6\x6b\x5a\xb3\x7b\x68\xf7\xdd\x28\xbf\x3a\xa3\x41\x88\xf8\xf3\x9f\xad\x12\x54\x7a\xee\x15\x9e\x4e\xf9\xd2\xe2\xe3\x8e\x9c\xa7\x0c\x82\x43\x76\xcb\x47\xb8\xfa\xe9\x8d\xf4\x04\x6b\xe5\x1e\xe3\x17\x46\x29\xb3\xe4\x62\xef\x0e\x36\xbe\x5a\x78\x4f\x76\x7d\x9c\x6d\x74\x7a\x8f\xcb\x87\xd4\x26\xee\xb2\x34\x0f\x62\xb7\x91\x7b\x8d\x8b\x0b\x63\xa5\x27\xb7\x75\x3a\x3c\xb8\x4b\x60\x8c\x5d\xa2\x83\xb5\x76\xfe\x75\x56\xce\x8f\x32\x2b\x0a\xbe\x8a\x77\x68\xc2\x30\x20\x90\xba\x30\xb6\x42\x2f\x8d\xe6\xa6\x26\x1b\xea\x2f\x52\xd2\x1f\x9e\xda\x1a\xae\xe9\x35\x8c\x9f\x1d\x57\x80\x53\x66\xb9\x0f\x69\xe3\x81\x8a\x82\x32\x2f\x17\x04\x15\xf9\xd2\x84\x17\xc6\x0c\x7d\x49\xf6\xc1\x5e\xd4\x16\x4b\xeb\x0e\x86\xdf\x05\x25\x07\x7f\x1c\x73\x57\x47\xdd\xfd\x2f\xdb\x7b\x5e\xeb\x4c\x35\x39\x53\xf6\x8e\x62\x9f\x8c\x7a\x4c\x88\x6d\x7d\x6e\x16\xff\x5b\x23\xb3\xf9\xc7\xcb\xe5\x12\xe1\x8d\x08\xce\x36\xeb\x81\x61\x38\x22\x64\xc0\x47\x0e\xd6\xae\x46\x9f\x26\xa5\x57\xd0\xae\xa9\x08\x0e\x27\x67\x27\x93\xe3\xe9\xd9\xe9\xf4\x78\x72\x3a\x05\x01\xef\xa2\x1c\xa1\x7d\x84\x38\x7e\x69\x30\x73\x9b\x3b\xaa\xab\x29\x8b\x87\x5c\xbc\x2f\xbe\xbe\x1c\x77\xd7\xff\xf0\xdc\x8d\xef\xcb\xf0\xe2\x85\x19\x69\xb2\xfc\xb2\x4b\x57\x11\x47\x7c\x6b\x66\xc8\x95\xc8\xa7\x0d\x03\x51\x1e\x62\x65\xe6\x4c\x53\x78\x50\x24\x6f\xc8\xf3\xc2\xf9\x7c\xd5\x66\x09\xe7\xa3\x7f\x03\x00\x00\xff\xff\x81\xa9\x70\xfd\xdd\x10\x00\x00")

func DockerTemplatesReadme_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_alpineTmpl,
		".docker/templates/readme_alpine.tmpl",
	)
}

func DockerTemplatesReadme_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_alpine.tmpl", size: 4317, mode: os.FileMode(420), modTime: time.Unix(1576917484, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesTravisTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x6b\xdc\x30\x10\xc5\xef\xfa\x14\x83\x59\xc8\xa1\xc8\x6a\x7a\xe8\xc1\x90\xc3\xd2\x5d\x4a\x68\x93\x2d\xbb\x34\xbd\x14\x16\xad\x35\x6b\xab\x91\x25\x47\x23\x39\x4b\x5c\x7f\xf7\x12\xdb\xc9\xba\xcd\x9f\xe6\x66\xf4\xde\xef\xc9\x33\x9a\x91\xfb\x80\x7e\x4b\xb9\xd7\x75\xc8\x18\x00\x07\xe5\xf2\x6b\xf4\xa0\x2b\x59\x20\x31\x46\x51\xb9\x0c\x3c\xde\x44\xed\x51\x31\xb6\xc3\xbd\xf3\xb8\xd5\x96\x82\x34\x66\x40\xee\x3d\xe0\x2b\xe0\x7b\x10\x91\xbc\x30\x2e\x97\x46\xec\xb4\x15\x43\x18\x27\xa3\xab\xb7\x3b\x39\xa1\x25\xe7\x7b\x20\x8f\xde\x00\xff\x0a\x65\x08\x35\x65\x42\x14\x3a\x94\x71\x97\xe6\xae\x9a\x12\x7f\x7d\x7b\x34\x28\x09\x49\x28\x77\x6b\x8d\x93\x4a\x9c\xa6\x1f\x3e\xa6\xa7\x42\x69\x0a\x5b\xa3\x6d\x3c\xa4\x41\xfa\xb4\xb8\x03\xce\x5d\x0c\x75\x0c\x30\xe1\x47\xad\xbf\x3d\x48\x0f\x87\x66\xff\x92\x9c\x97\x95\x53\xf0\xee\x00\xc7\xe4\x27\x15\xff\xc7\x33\xad\xb5\x6f\x4e\xd5\xbc\xe0\xfc\xa7\x61\x6f\x20\xc6\xec\xe7\x40\xcc\x4b\x07\x27\x6d\x82\x87\x1a\xbd\xae\xd0\x06\x69\x92\x2c\xf8\x88\xdd\x09\xfc\x1e\x72\x03\x22\x08\x0c\xf9\x18\x29\x94\xc4\xca\xd9\xf4\x17\xb9\xc9\xe5\x84\xbe\xd1\x39\x3e\x4c\x8d\x47\x0a\xd2\x87\xc7\x31\x99\x0e\x56\xae\x46\xd7\x5e\x1b\x24\x91\xcc\xae\x96\xeb\xcd\xf9\xea\x32\xe9\xd5\xf3\x8b\xf9\xe7\xe5\x59\x72\x78\xef\xef\xae\x5d\x23\xc2\xad\xb6\x21\x9b\xb5\xa3\x47\xfc\x14\x82\x77\x09\x63\x68\x9b\xac\x6d\xbd\xb4\x05\xc2\xac\x91\x06\xb2\x33\x48\xaf\xd0\x93\x76\x96\xba\xae\x8f\x1a\x99\xb3\xb6\xed\x2d\xe9\x42\x7b\x78\x55\x12\xd2\xd4\xda\xe2\x6b\x8e\xfb\x7e\xb6\x2d\x5a\xd5\x75\x8c\x19\x69\x8b\x28\x0b\xcc\x60\x27\xa9\x64\xec\xe9\xfa\x0c\x2f\xd6\x0c\xff\x35\x5d\xab\x5d\xd4\x46\x01\xe7\x74\x13\x25\x95\xc0\x03\x24\xb3\xbe\xf4\x04\xd2\x63\x57\xa7\x21\x03\xf1\xe0\x7a\x66\x45\x27\x27\xc6\x15\xda\x02\x8f\x30\x5b\xac\x3e\x7d\x59\xae\xb7\xdf\x37\xcb\xf5\xe5\xfc\x62\x09\xbc\x7e\x3c\xfb\x36\xdf\x6c\x7e\xac\xd6\x8b\x29\x58\x47\x2a\x8f\x77\xb0\xf1\x55\x29\x1b\xf5\x3f\x01\x00\x00\xff\xff\xe0\x56\xfa\xe3\x26\x04\x00\x00")

func DockerTemplatesTravisTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesTravisTmpl,
		".docker/templates/travis.tmpl",
	)
}

func DockerTemplatesTravisTmpl() (*asset, error) {
	bytes, err := DockerTemplatesTravisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/travis.tmpl", size: 1062, mode: os.FileMode(420), modTime: time.Unix(1576830941, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".docker/templates/docker-compose.tmpl":         DockerTemplatesDockerComposeTmpl,
	".docker/templates/docker-entrypoint.tmpl":      DockerTemplatesDockerEntrypointTmpl,
	".docker/templates/docker-sync.tmpl":            DockerTemplatesDockerSyncTmpl,
	".docker/templates/dockerfile_alpine.tmpl":      DockerTemplatesDockerfile_alpineTmpl,
	".docker/templates/dockerfile_debian-slim.tmpl": DockerTemplatesDockerfile_debianSlimTmpl,
	".docker/templates/dockerfile_ubuntu.tmpl":      DockerTemplatesDockerfile_ubuntuTmpl,
	".docker/templates/dockerignore.tmpl":           DockerTemplatesDockerignoreTmpl,
	".docker/templates/env.tmpl":                    DockerTemplatesEnvTmpl,
	".docker/templates/makefile.tmpl":               DockerTemplatesMakefileTmpl,
	".docker/templates/readme.tmpl":                 DockerTemplatesReadmeTmpl,
	".docker/templates/readme_alpine.tmpl":          DockerTemplatesReadme_alpineTmpl,
	".docker/templates/travis.tmpl":                 DockerTemplatesTravisTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".docker": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"docker-compose.tmpl":         &bintree{DockerTemplatesDockerComposeTmpl, map[string]*bintree{}},
			"docker-entrypoint.tmpl":      &bintree{DockerTemplatesDockerEntrypointTmpl, map[string]*bintree{}},
			"docker-sync.tmpl":            &bintree{DockerTemplatesDockerSyncTmpl, map[string]*bintree{}},
			"dockerfile_alpine.tmpl":      &bintree{DockerTemplatesDockerfile_alpineTmpl, map[string]*bintree{}},
			"dockerfile_debian-slim.tmpl": &bintree{DockerTemplatesDockerfile_debianSlimTmpl, map[string]*bintree{}},
			"dockerfile_ubuntu.tmpl":      &bintree{DockerTemplatesDockerfile_ubuntuTmpl, map[string]*bintree{}},
			"dockerignore.tmpl":           &bintree{DockerTemplatesDockerignoreTmpl, map[string]*bintree{}},
			"env.tmpl":                    &bintree{DockerTemplatesEnvTmpl, map[string]*bintree{}},
			"makefile.tmpl":               &bintree{DockerTemplatesMakefileTmpl, map[string]*bintree{}},
			"readme.tmpl":                 &bintree{DockerTemplatesReadmeTmpl, map[string]*bintree{}},
			"readme_alpine.tmpl":          &bintree{DockerTemplatesReadme_alpineTmpl, map[string]*bintree{}},
			"travis.tmpl":                 &bintree{DockerTemplatesTravisTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
