// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// .docker/templates/docker-compose.tmpl
// .docker/templates/docker-entrypoint.tmpl
// .docker/templates/docker-sync.tmpl
// .docker/templates/dockerfile_alpine.tmpl
// .docker/templates/dockerfile_debian-slim.tmpl
// .docker/templates/dockerfile_ubuntu.tmpl
// .docker/templates/dockerignore.tmpl
// .docker/templates/env.tmpl
// .docker/templates/makefile.tmpl
// .docker/templates/readme.tmpl
// .docker/templates/readme_alpine.tmpl
// .docker/templates/readme_root.tmpl
// .docker/templates/travis.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DockerTemplatesDockerComposeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x10\x5d\x81\x9e\xfc\x11\x14\xc3\x3a\x01\x39\xa4\x4b\x0e\xdd\x86\x24\x68\x82\xee\x68\xa8\x36\xd3\x0a\x91\xa5\x80\x92\xdd\x74\x86\xff\xfb\x20\xcb\x76\x93\xac\xcd\x76\x51\x42\xf2\xf1\xe9\x3d\xd2\x0a\xc3\x30\xa8\x90\x8c\xd0\x8a\xc1\xd5\x75\xf4\xe5\x2a\x30\x48\x95\xc8\xd0\xb0\x20\x00\xb0\x2f\x42\x59\x16\x00\x00\x88\x82\x3f\x21\x83\x7d\x42\xbf\xb7\xba\x8a\x7d\xa5\xae\x21\x9a\x0a\x82\xa6\xa9\x6b\xb1\x81\xe8\x96\x1b\x6c\x9a\xb0\xae\x51\xe5\x2e\xe7\x33\xd0\x34\x2d\xc5\x63\x29\x64\xee\xd9\x00\x32\xad\x2c\xee\x2d\x83\xa8\x4b\xe4\x3a\xdb\x22\x6d\x84\x44\x06\xd3\xe1\x7f\xd0\x63\xb9\x50\x48\xa9\xe2\x05\x32\x2f\x2b\xcc\xa4\x68\xab\x95\x96\x65\xe1\x04\xbb\x20\x84\xcb\xe5\xaf\x69\x27\x2f\xd6\x3b\xeb\xff\xc6\x39\xb7\x7c\x70\x14\x1a\xe4\x94\x3d\x7f\x6c\xac\x07\x48\x6e\xd1\xd8\x33\x1a\x3c\xae\x05\xec\x34\xd9\x41\xc4\x75\x92\x24\xcc\x1d\x6d\x8c\xaa\x12\xa4\x55\x81\xfd\x30\x43\x98\x2f\xa6\xb3\x74\x36\x7f\x18\xef\x48\xe7\x65\x66\x85\x56\xad\x3c\x4d\xe1\x8e\x44\xa5\xf7\xaf\xec\xcc\xb5\x56\x53\x87\x3a\xb4\xe0\x26\xc8\x9f\x30\x3e\x24\x39\x70\x70\x24\xf0\xe2\x6b\xf2\x39\x61\xee\xb8\x80\x4f\xb0\xd6\x04\x3b\xea\xe9\x7c\x75\xe4\xaa\xa3\xbe\xea\x74\x90\x96\x2d\x49\x0f\xba\x19\x8d\x6e\x98\x3b\x1c\x68\xe9\x2f\x04\x70\x36\x50\x72\x63\x45\xf6\xce\x98\xfd\x96\xa3\x0e\x10\x65\x3a\x3e\xc2\x1e\x47\xec\xb2\x9e\xfd\x9c\xac\xd6\x77\xdf\xd2\x87\xd9\xfd\xea\x6e\x31\x6f\xce\x0c\xa5\x6b\xfd\x68\xe2\x4a\xe7\x18\x39\xfc\xf8\xe8\x8e\xae\x9a\xc9\xd2\x58\xa4\x48\x28\x61\x05\x97\x69\xc1\x5d\x98\xba\x26\x73\xb6\xa1\x65\xf4\xae\xc2\x2e\xd7\x21\x1e\xb5\xb6\xc6\x12\xdf\x45\x05\x16\x9a\x5e\x53\xa9\xb3\xed\xd8\x52\x89\xfd\x00\x67\xab\xf4\xfb\xe4\x61\x92\x2e\x96\xeb\xd5\xf8\xcd\xeb\x90\x6b\x2e\x5a\x64\x29\x45\x21\xfa\xd5\x01\x14\x58\x38\xa6\x3e\x04\x30\x7a\x63\x19\x84\xa3\x21\xf1\xcc\x29\x1f\x12\x27\xcf\x03\x8d\x7b\x0a\xc9\x88\xc5\xa5\xa1\xd8\x3c\x73\xc2\x93\x15\xb4\x4f\xe5\xaf\x0f\xe6\x4d\xde\x72\x71\xbf\x6e\xd8\x49\xec\xb6\xbe\x15\x8f\x5c\xf1\x7f\xac\xdb\x83\xba\x1f\x76\x59\xff\xb8\xbb\x9d\xcc\x27\xff\xb3\x5f\xdf\xf2\x9e\xb2\x8e\xa3\x17\x76\x18\x06\xc1\x81\xff\xc1\x7b\xdb\x99\x93\xa8\x90\x18\x48\x9d\x71\x19\x04\x0a\xed\x8b\xa6\x6d\x0b\xcc\x71\xc3\x4b\xd9\x7d\x3a\xb8\xb7\x48\x8a\xcb\x7e\xe0\x5e\x93\x7a\x09\x5b\x59\x7f\x02\x00\x00\xff\xff\x2d\xcb\x66\x7d\x43\x05\x00\x00")

func DockerTemplatesDockerComposeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerComposeTmpl,
		".docker/templates/docker-compose.tmpl",
	)
}

func DockerTemplatesDockerComposeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerComposeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-compose.tmpl", size: 1347, mode: os.FileMode(420), modTime: time.Unix(1576950813, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerEntrypointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\x2a\x29\xcf\xcc\x2b\x51\x50\x71\xe0\x02\x04\x00\x00\xff\xff\xbd\x2f\x25\x36\x15\x00\x00\x00")

func DockerTemplatesDockerEntrypointTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerEntrypointTmpl,
		".docker/templates/docker-entrypoint.tmpl",
	)
}

func DockerTemplatesDockerEntrypointTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerEntrypointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-entrypoint.tmpl", size: 21, mode: os.FileMode(420), modTime: time.Unix(1576934386, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerSyncTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x6a\xc3\x40\x0c\xc6\xf1\xfd\x9e\x42\x1c\x85\x9b\xdc\xba\x1d\x0f\xba\x94\x3e\x80\xb7\x8e\xe6\xea\x28\x97\x83\x20\x19\x49\xb6\x63\x42\xde\x3d\xc4\x86\x38\xe0\x4d\xfc\xfe\x82\x6f\x44\xd1\xc2\x14\xc1\x7f\x79\xc7\xbd\x15\x26\x8d\x0e\x60\x44\xf9\x67\xc5\x08\x26\x03\x3a\xa7\x33\x75\x8b\xdb\x54\xc8\x1e\x07\x80\x4a\x17\xe1\xed\xda\xfc\xfd\xde\x3e\x16\x5e\x75\xa6\xae\x55\x93\x64\x98\xe7\x08\x81\x92\x95\x11\x5b\xd6\x4b\xd8\xfa\xa0\x28\xe5\x10\xe1\xb3\xae\xeb\x4d\xb3\xf0\xd0\xef\x39\x49\xd6\x75\xb1\x02\x5f\xf5\x82\x47\x14\x20\x9c\x50\xfc\x53\x4b\x26\x16\xfc\x0e\x4d\xb2\x13\xbc\xe7\x62\x61\xdf\x7e\xf0\xcc\xd3\xcb\xc3\x3d\x00\x00\xff\xff\x84\x17\x8f\xff\xfb\x00\x00\x00")

func DockerTemplatesDockerSyncTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerSyncTmpl,
		".docker/templates/docker-sync.tmpl",
	)
}

func DockerTemplatesDockerSyncTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerSyncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-sync.tmpl", size: 251, mode: os.FileMode(420), modTime: time.Unix(1576945687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x51\x4f\xdb\x3c\x14\x7d\xfe\xf2\x2b\xae\xca\x27\x78\x60\x6e\x40\x7d\x63\x63\x5a\x55\xba\xad\xda\x68\xab\x50\x3a\xa1\x31\x4d\xae\x7d\xdb\xdc\x91\xd8\x96\x73\x13\x5a\x21\xfe\xfb\x14\xa7\x85\x16\x15\xf1\xb0\xa7\xd8\xf7\x1e\xd9\xe7\x1c\xdf\x93\xcf\xc9\xe8\x12\x64\xe6\xc8\xe0\x59\xa7\x7d\x7a\x02\xdd\x2b\x98\x95\x94\xe9\x28\xfa\x31\x4a\xbe\x5d\x0c\x12\x88\xad\xe3\x58\x3a\x17\x45\x07\x30\x30\x05\xcb\x2c\x83\xf1\x8a\x53\x6b\x40\x1a\x0d\xb8\x64\xf4\x46\x66\xa0\xd1\xa1\xd1\x68\x14\x61\xf1\x0e\xc8\xa8\xac\xd4\x64\x16\x90\xa2\xd4\xe8\x8b\x00\xfe\xd2\xeb\x45\xc9\xf5\x10\xa4\xbb\x03\xa9\x35\x08\x61\xac\x50\x52\xa5\x08\x2e\x1c\xd9\xd9\x7c\x85\xc6\x0a\xdc\xaa\x23\x1c\x39\xc8\x68\x36\x9f\xd3\xfa\x13\x3a\x79\x59\x64\x61\xb1\x50\x0a\x16\xc4\xa0\xa4\x50\xe8\x99\xe6\xa4\x24\x63\x01\xd6\xa1\x99\x65\xb2\x78\x81\x3e\x3e\xde\x91\x41\x0e\x4d\x15\x18\x39\x72\x1d\xa0\x75\xdd\x35\xf5\xe8\x00\x7a\x1e\x25\x23\x48\xa8\xc8\x73\x29\x33\x40\x53\x91\xb7\x26\x47\xc3\x41\x91\x54\x4c\x55\x0d\x21\x6e\xce\x59\xcb\x10\x39\x54\x68\xaa\xc6\xbd\x7a\x15\xf5\x87\x53\x18\x77\x27\x5f\xcf\x5b\x4f\xb5\x78\x46\xe6\xec\xff\xba\xd8\x82\xdb\xe8\xbf\xe9\x20\x99\x5c\x77\xbf\xff\xee\x0f\xa7\x5b\xa0\xd6\x36\xe3\x6d\x93\x81\x0c\x5b\xe0\x14\xf7\x92\xbb\x27\x4e\xb7\x05\x06\x93\x32\x6b\x10\x84\xd0\xe8\x38\x3d\x3f\x05\x31\x83\x87\x87\xf6\x14\x7d\x41\xd6\x3c\x3e\x42\xca\xec\x8a\xb3\x38\x5e\x10\xa7\xe5\xac\xad\x6c\x1e\xf3\x3d\x19\x76\xde\xfe\x41\xc5\xcd\xe6\x69\x20\x6a\xca\x87\x87\xa0\xf4\xcb\xca\x8e\x97\x42\x94\x6e\xe1\xa5\xc6\xba\xbc\x0f\xa0\x9a\x59\xda\xd3\x31\x65\xee\x56\xfb\x1a\xed\x28\x7a\x39\xb8\xd1\x65\x77\x30\x9c\x74\x07\xc3\x7e\x02\xcb\x13\xbf\xbc\xb3\x15\x7c\x58\x2f\x3e\x39\x6f\xd9\x9a\x5c\x52\x56\x6b\xfa\xb8\xf5\xb0\xbe\x34\x4c\x39\x42\x59\xa0\x0f\x36\xe5\x77\x9a\x3c\x08\x17\x34\xad\xef\x96\x5a\xd7\x7d\x10\x17\xd0\x38\x20\xd2\x67\xc9\xa2\x80\xfa\x19\xe3\x22\x85\xdb\x08\x6a\x78\x51\x6e\x60\x0a\x8e\xb6\xdc\x79\xff\x7c\xb8\x96\x2c\x8f\xde\x0a\xd4\x86\xdb\xce\x9b\x5b\x93\xad\xde\x8a\xd0\x3a\x2e\x9b\x08\xd4\xfb\x82\xb5\x6a\x66\xff\xea\x9e\x58\xa5\xc0\x36\x68\x06\x65\x0d\xe3\x92\xa3\xeb\xab\x7e\xd2\xd0\xde\x0d\x7e\x28\xc5\x35\xdf\xe0\x9a\x75\xab\x57\x27\x6e\xee\x6d\x1e\x9a\xce\x63\x45\xb6\x2c\x80\x72\xb9\xc0\xa8\x37\x1a\xdf\x80\x10\x75\xfb\x3c\xfc\x5b\x9e\x43\xb1\x15\x8f\xe8\x00\xba\x9b\x2c\xbd\x72\xc3\xbf\x44\xa8\x3f\x9c\x24\x37\xe3\xd1\x60\x38\x81\x9f\xad\x20\xaa\xf5\xeb\x6f\x00\x00\x00\xff\xff\x88\x87\x4e\x40\xfd\x04\x00\x00")

func DockerTemplatesDockerfile_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_alpineTmpl,
		".docker/templates/dockerfile_alpine.tmpl",
	)
}

func DockerTemplatesDockerfile_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_alpine.tmpl", size: 1277, mode: os.FileMode(420), modTime: time.Unix(1576950494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_debianSlimTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x51\xcb\xda\x30\x18\x85\xef\xf3\x2b\x5e\x1c\x78\x31\x49\x33\xf0\x62\x20\x73\x28\x5b\x37\xca\x66\x2b\x59\x55\x64\x8e\x11\xdb\x2c\xcd\x6c\x93\x90\xbc\x75\x8a\xf8\xdf\x87\xd5\x8f\x4f\xbd\xca\x39\x79\x08\x3c\x27\x5f\x78\x36\x03\x77\xc4\xca\x9a\xd1\x30\x7a\x4f\x43\xad\x1b\x1a\xd0\x4b\x2c\x2a\x42\x66\xd3\x24\xcd\xa7\x49\x1a\x73\x38\xbc\xf3\x87\x9d\xdd\xc3\x87\x5b\x98\x38\x6f\xd1\x9a\x46\xe8\x3a\x2a\x6c\xf3\x91\x90\x29\xff\x0a\xf9\x2a\x49\xf3\xdf\xcb\x98\xff\x48\xb2\x74\x7c\x3a\x45\x4b\xe9\x83\xb6\xe6\x7c\x26\xe4\x53\x36\x5f\x43\x69\x8b\x9d\xf4\x54\x1a\xf4\x47\x67\xb5\xc1\x28\x54\xc0\x1e\x2a\xe1\x8b\x14\x8a\xaa\xb1\x25\x0c\x0e\xcf\xac\x83\x1b\x22\x1c\x52\x25\x11\x5a\x57\x0a\x94\xd0\xef\xdf\xdd\x69\x13\x50\xd4\x35\xd0\x23\x6c\x88\xd2\xf8\xf2\xc6\x69\x37\x7c\x85\xb4\x75\xca\x8b\x52\x02\x95\xa0\x34\x0e\x2a\x44\x17\x46\x8c\x29\x8d\x55\xbb\xbd\x4c\x62\xf8\x4f\x1b\x74\xde\xfe\x95\x05\x5e\x4b\xa4\x34\x4e\xee\x57\xbd\x91\x4a\x8d\x3b\xf4\x6c\x56\xd4\x52\x18\x10\x2d\xda\x6b\xea\x14\x7d\x03\xd4\xff\x01\xb6\x17\x9e\xd5\x7a\xcb\x84\x43\x56\xeb\x80\x81\xbd\x05\x86\x8d\xbb\x1c\x17\xd6\x45\x42\xe2\x34\xe7\xeb\x79\x96\xa4\x39\xfc\xec\x3d\x7e\x44\xef\x17\x59\x66\xdf\x17\xb3\x18\xae\x66\x64\x95\xf1\x6f\x9f\x13\x0e\xcc\xba\x9b\x2c\x2b\x05\x0a\xf2\x3f\x00\x00\xff\xff\xd3\x2b\x6a\xe0\xe1\x01\x00\x00")

func DockerTemplatesDockerfile_debianSlimTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_debianSlimTmpl,
		".docker/templates/dockerfile_debian-slim.tmpl",
	)
}

func DockerTemplatesDockerfile_debianSlimTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_debianSlimTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_debian-slim.tmpl", size: 481, mode: os.FileMode(420), modTime: time.Unix(1576950484, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_ubuntuTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x5d\x8e\xd3\x30\x14\x85\xdf\xbd\x8a\xab\x41\x1a\x01\xa3\xc4\x8c\xe6\x89\x11\x83\xa6\x82\x00\x11\x34\xa9\xdc\xb4\x55\x45\x11\x72\x12\xe3\x18\x12\xdb\xb2\xaf\x81\xb4\xea\x82\x58\x07\x1b\x43\x4d\x8b\xfa\xf3\xe4\x7b\xcf\x67\x59\xdf\xf1\x3b\x96\x8f\x21\x94\x41\x63\xb8\xbf\x7d\x19\xdf\xbe\x20\x64\x3c\x4a\xb3\x62\x94\x66\x09\x83\xe9\xdf\x3f\x25\xf7\xa8\x84\x86\x0f\x26\xac\x05\xc2\xd3\xde\x98\xb5\x32\x71\x65\xba\x67\xf0\xca\x8b\x03\x7e\x3c\xc6\xaf\x09\x19\xb1\xf7\x50\x2c\xd2\xac\xf8\x3a\x4f\xd8\x34\xcd\xb3\x87\xcd\x26\x9e\x0b\xe7\x95\xd1\xdb\x2d\x21\x6f\xf2\xc9\x12\x6a\x53\xfd\x10\x2e\x12\x1a\x5d\x6f\x8d\xd2\x18\xfb\x06\xe8\xd9\x4a\xd8\x2c\x83\xaa\xe9\x4c\x0d\x37\xbf\x2f\xd9\x00\x57\x84\x5b\x8c\xa4\x40\x08\xb6\xe6\x28\xe0\xfa\xfa\x24\x53\xda\x23\x6f\x5b\x88\x7a\x58\x11\xa9\x10\x56\xc4\xf6\xd8\x18\x7d\x17\x59\x65\xff\xbf\x60\x95\xbd\x3b\x5e\x8d\x82\x95\x8e\xd7\x02\x22\x01\x52\xe1\x4d\x83\x68\xfd\x3d\xa5\x52\x61\x13\xca\x5d\x41\x8a\xbf\x94\x46\xeb\xcc\x77\x51\xe1\x7e\x89\xa5\xc2\xc7\xd3\x8e\x4f\x84\x94\x0f\x03\xba\xf4\xac\x5a\xc1\x35\xf0\x80\x66\x3f\x0d\xc2\xae\x83\xc8\x7d\x03\xfa\x93\x3b\xda\xaa\x92\x72\x8b\xb4\x55\x1e\x3d\x7d\x0e\x14\x3b\xbb\x3b\x76\x6c\x18\x09\x49\xb2\x82\x2d\x27\x79\x9a\x15\xf0\xf9\xea\xfc\x5b\xae\xbe\x90\x79\xfe\x69\x36\x4e\x60\x6f\x46\x16\x39\xfb\xf8\x36\x65\x40\x8d\x3d\xc8\xd2\x9a\x23\x27\xff\x02\x00\x00\xff\xff\xe9\x63\x67\x16\xf9\x01\x00\x00")

func DockerTemplatesDockerfile_ubuntuTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_ubuntuTmpl,
		".docker/templates/dockerfile_ubuntu.tmpl",
	)
}

func DockerTemplatesDockerfile_ubuntuTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_ubuntuTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_ubuntu.tmpl", size: 505, mode: os.FileMode(420), modTime: time.Unix(1576950475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xce\xc9\xcc\xe5\x4a\xcc\x29\xc8\xcc\x4b\xe5\xf2\x4d\xcc\x4e\x4d\xcb\xcc\x49\xe5\x4a\xc9\x4f\xce\x4e\x2d\xd2\x4d\xce\xcf\x2d\xc8\x2f\x4e\xd5\xab\xcc\xcd\x41\x17\xd2\x02\x0b\xea\xa5\x67\x96\x80\x09\x7d\x08\xa9\x05\xa5\xb4\xb8\x00\x01\x00\x00\xff\xff\x78\xa9\x74\xfb\x57\x00\x00\x00")

func DockerTemplatesDockerignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerignoreTmpl,
		".docker/templates/dockerignore.tmpl",
	)
}

func DockerTemplatesDockerignoreTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerignore.tmpl", size: 87, mode: os.FileMode(420), modTime: time.Unix(1576745854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesEnvTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\x83\x30\x18\x86\xef\xfe\x8a\xd0\xee\xaa\xd3\x42\x27\x1d\xe4\xf0\x69\x83\x64\xb5\x2a\x26\xba\xde\xc4\x39\xc7\x02\xd3\x43\x23\x74\x10\xf2\xdf\x87\x2e\x5a\xe9\xed\x7b\x9f\x97\xf7\xe1\xdb\x22\x7e\x13\xfd\x60\xf1\x77\x9a\xf0\xaa\x0c\x59\x55\xe4\x31\x56\x0a\x39\x65\x23\x8b\x3c\x46\x5a\x9b\x8e\x43\x34\xf1\xa3\xb8\x22\xad\x95\x12\x5f\xc8\x09\x6a\xd9\x6a\x6d\x2b\xd5\xf6\x9f\x23\xfb\x27\xf7\x4d\x49\x72\x46\xd3\x64\xb5\x33\x45\x02\x67\xc2\x32\x08\xc9\x54\xa5\xb7\xbe\x5d\x95\x01\x30\x82\x87\xd5\x5b\xf4\x0c\x11\xc1\x4f\xea\x61\xab\x9f\x67\x34\x2e\xf4\xeb\x9c\x38\x44\xb3\x2a\xa2\x47\x7c\xf0\x7d\x93\x0a\x93\xac\x2d\x22\x3f\xb5\x1c\x44\x23\xdb\xfa\xda\x7c\x5b\x24\x06\xc6\x69\xb8\xfc\xeb\x3b\xae\xe3\x2d\x34\x4b\x73\x8e\x0f\x3b\xd7\x5d\xc8\x1b\x94\x50\xa5\x19\x67\x78\x63\x5f\x3a\xb9\xf7\x76\x1d\xb2\x2f\xdd\xef\x78\x6c\x46\xfd\x49\x7c\xd4\x7d\x6d\x9d\x68\x00\x09\x3c\x68\x0d\x9c\xac\xfb\x17\xd7\xfb\x0b\x00\x00\xff\xff\xd4\x69\x13\x70\x83\x01\x00\x00")

func DockerTemplatesEnvTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesEnvTmpl,
		".docker/templates/env.tmpl",
	)
}

func DockerTemplatesEnvTmpl() (*asset, error) {
	bytes, err := DockerTemplatesEnvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/env.tmpl", size: 387, mode: os.FileMode(420), modTime: time.Unix(1576920292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xdf\x0f\xd2\x30\x10\x7e\xee\xfd\x15\x97\x6c\x66\xf8\xb0\x15\x66\x82\xd0\x48\x82\x89\x44\x79\xe0\x47\x94\x68\x7c\xd1\xd4\xad\xb0\x65\xdd\xba\xac\x1d\xa8\xc0\xff\x6e\xda\x4d\xc7\x03\xbe\x5c\x7b\xdf\x7d\xfd\xee\xbb\xde\x7a\xf3\xf6\xfd\x0a\xd9\x02\x7f\x8e\x9b\xdf\x85\x3a\x53\x73\xc9\x2b\x13\xa6\x2a\x29\x44\x03\x9f\x57\x1f\x3f\xad\x77\x5b\xb6\x40\x7f\xa4\x33\x21\x25\x9e\x1a\x51\xe3\xe1\xcb\x7a\x7b\xf8\xde\x17\xf1\x9d\xe3\x1e\x73\x29\xf0\x86\xfc\x52\x60\x70\xad\x9b\xbc\x32\xe8\xc7\xf7\x00\x6f\x98\xb4\x06\xc3\x14\x83\x45\x80\xe1\x11\xe3\x97\x00\x9e\x87\x46\x68\x43\x08\x23\xf6\x8c\xc0\x46\x06\xc4\x34\xad\x70\xd5\xb3\x68\x74\xae\x2a\xc2\x48\x9a\xeb\x5a\xf2\x5f\x7f\x91\x08\xfa\x0b\x03\xb2\x14\x49\xa6\xd0\x1f\xf5\x3e\x3a\xdd\xbc\xe4\x27\x61\x85\x7f\xb4\xb9\x4c\xbb\x14\x79\x95\xa2\xe1\x27\x34\x99\x28\x23\x88\xf6\x1f\x76\xdb\xaf\xac\xab\x81\x8b\x56\xad\x1b\x19\xbb\x77\xa1\x41\xff\xea\xfe\xe6\xce\xfc\x6b\xdf\xe1\x8e\xd1\xc0\xb3\x7a\xcf\x28\xff\x30\xc9\xed\x54\xce\x54\xdd\xea\x2c\xec\x9c\x31\x62\x13\xec\x45\x1c\x36\x38\x1a\x78\x30\x5c\x1f\xbc\xb9\xa7\x4f\x9a\xfe\x8f\xf1\x60\x21\x13\xb2\xb6\xdf\xb2\x77\x9b\x49\x54\x59\xf2\x2a\xd5\x0e\x1e\xfa\xdb\x0c\x6c\x40\x86\x1b\x5e\x08\xbb\x53\x20\x4b\x2d\x52\x0c\x2b\x0c\x34\xfd\xe6\x79\x94\xd6\x01\xfa\x6f\x00\x3c\xcc\x8c\xa9\x35\xa3\x54\x1b\x9e\x14\xea\x2c\x9a\xa3\x54\x97\x28\x51\x25\xe5\x74\x1a\xbf\x7e\x35\x1b\xcf\xe9\x64\x16\x4f\x27\xe3\x39\xbc\xb0\x63\x30\xf8\x13\x00\x00\xff\xff\xa4\xdc\xfd\x9f\x6f\x02\x00\x00")

func DockerTemplatesMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesMakefileTmpl,
		".docker/templates/makefile.tmpl",
	)
}

func DockerTemplatesMakefileTmpl() (*asset, error) {
	bytes, err := DockerTemplatesMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/makefile.tmpl", size: 623, mode: os.FileMode(420), modTime: time.Unix(1576745814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6e\x23\xb7\x15\xbe\x9f\xa7\x38\xeb\x09\x10\xc9\x30\x35\xb2\xbd\x0b\xc8\x42\x12\x34\xb1\xbb\xdb\x45\x83\x24\x5d\x2b\xe8\x85\x61\xc0\x9c\x99\x33\x1a\x46\x1c\x72\x42\x72\x24\x3b\x86\xfb\x0a\x6d\x1f\xa0\xc8\x4d\x6e\x7b\xdf\xe7\xe9\x0b\x34\x8f\x50\x1c\x72\x64\x8d\x64\x39\x59\x18\xe3\x1b\x8b\x87\x87\xdf\x77\x78\xfe\x48\x4e\x0c\x6e\x25\x94\x63\xb9\xce\x16\x68\xa2\xe8\xb3\x57\x8c\xc1\x4c\x9f\x83\x75\xdc\x38\x60\xec\x8b\x28\x8e\x61\xc6\x53\x89\xa0\x0b\x38\xd7\xca\xa1\x72\x36\x3a\x1e\xc1\xd5\x9f\xf4\x0a\x9c\x86\xc6\xe2\xf5\x20\x2e\xf5\x8a\x39\xcd\x1a\x8b\xc3\x08\x80\xa6\xdf\x0a\x63\x5d\x3b\x5b\xd0\xef\xf5\x24\x84\xf9\x73\x83\xdc\x21\x70\x05\x5c\x0a\x6e\xaf\x07\x71\xe6\x25\x8c\x2b\xe6\x25\x43\xcf\x72\xe1\x2d\x63\xe7\xba\xaa\xb5\xc7\x0a\xa6\xb2\x2c\x08\x3a\x80\x7f\x94\xdc\x3a\x91\x59\xe4\x26\x2b\x81\xab\x1c\xfe\x2c\x52\xae\xf8\xf5\x20\xc6\xee\x14\xe3\x2a\x67\x0b\x3f\xd5\x59\x3d\xd3\x06\x6a\xa3\x6f\xef\xae\x07\xb1\xd3\x86\xf9\xdf\x5d\xf4\x5b\xcc\x1a\x87\x30\x23\x7f\x41\xa6\xab\x8a\xab\x9c\xa0\x83\x9c\x05\x3f\xb6\xf2\xad\x75\xbc\xaa\x25\x5a\x72\x5f\x77\x55\x90\x32\x5d\x74\xd7\xf8\x0d\x73\xe7\xbd\x91\xd3\xff\xe0\x83\x2f\x1b\x57\x6a\x43\x42\x1e\x7e\x05\xf1\xaf\x3f\xff\xf2\x2f\x1f\x12\x23\xd2\xc6\x09\x35\xbf\x1e\xc4\x2c\xeb\x8c\x83\xda\x65\xa9\x57\x70\xa7\x1b\x03\xb6\xa9\x6b\x6d\xdc\xf5\x20\xb6\x14\x2f\x92\xb1\x56\x36\xdc\x84\x1e\x55\xee\x03\x4f\x91\xdf\xc4\x98\x86\x31\x3c\x06\x35\x8a\xde\x6a\x03\x45\x3b\xe4\x73\x3c\x22\x0a\x50\x88\x39\x2d\x48\x1b\x21\x73\x10\x15\x9f\x23\x84\x80\x8d\xa2\xe8\xe6\xe6\xc6\x96\x28\x65\x14\x24\x50\x37\x52\xc2\xed\xd8\xfc\xb4\xd0\xcb\xc4\xfb\x6f\x7a\x7f\x0f\xa3\x0b\x61\xe0\xe1\x81\xb4\xa3\x48\x1b\x78\xb2\x6e\x1d\xfa\x40\x12\xf4\x62\x32\x6e\x27\xa3\x36\xeb\xfc\x30\x64\xfa\xe7\x07\x2d\xb9\x69\x14\x30\x27\x80\x31\x53\x01\x5b\xc2\x27\x83\x7a\x95\x0f\x13\xf2\xfa\x34\xd1\xb5\x4b\x78\x5d\xfb\xd1\xb3\x16\xde\xdf\x8b\x02\x46\x5f\x71\x8b\x0f\x0f\xec\xfe\x1e\x55\x4e\xb2\x20\x81\x87\x87\x03\xe2\x87\xed\xbf\xe0\xc4\xe7\x12\x35\x8a\x2e\x7d\xd5\x91\xc3\x6b\x40\xc9\xb7\x95\x16\xad\xd2\x73\xee\x68\x6a\x60\x39\x6c\xa5\xfa\x7a\xcd\xda\x47\xf0\x98\xe5\xdb\x5c\x4e\x9b\xdf\xc3\x25\x95\x0d\x8c\x2f\x82\xcb\xc0\x21\x94\x43\x53\xf0\x0c\x9f\xd8\xbf\xb3\xcb\x50\x22\x41\xf0\xbb\x74\x1d\xdd\x6d\xa8\x60\xc5\xac\x44\x05\xba\x46\x05\x42\x85\xe4\x4e\x8d\x5e\x59\x34\x70\x55\x3a\x57\x4f\x93\x44\xea\x8c\xcb\x52\x5b\x37\x3d\x1d\x8f\xc7\xd7\x83\xbd\xe2\x61\x1b\x91\x7d\xc5\xfd\xbc\x89\x3e\x77\x96\xf0\xc9\x77\x7f\xbd\x68\xb3\x62\x3b\x63\xbc\x0c\x58\xb9\x71\xd8\x9e\x2e\x10\x45\x5f\x42\x81\x2b\xb0\x82\x66\x60\xdd\x11\xc8\x7b\x25\xca\xda\x97\x53\xa3\x72\x34\xd6\x79\xe7\x95\x08\x29\xb7\x22\xb3\xd3\x8e\x61\x31\x5c\x66\x86\xd7\x08\x5c\x4a\xaf\x32\x5b\x21\x3a\x0b\x85\xd1\x15\x95\xa9\xf9\xd4\x82\x13\x15\x4a\xa1\x70\xf4\xc2\x6d\x34\x1e\x48\xf1\x0a\xb7\xe9\xba\x54\x44\xbd\x43\x07\xd4\x89\xb8\x50\x42\xcd\xa1\x16\x0a\x79\x5d\xcb\x1e\x6c\x00\x66\x37\x70\x51\x0c\xe7\x5a\x4a\xcc\x1c\xe0\x12\xcd\x5d\xb0\x69\x2f\x73\xb0\xd3\x6b\x69\x85\x9f\xda\xd6\xfc\x97\x1a\xb4\xdf\x88\xd6\x25\xae\xe4\x0e\x56\x68\x10\x1c\x09\x30\x87\x14\x0b\x6d\x10\x4e\xc6\xc7\xaf\xfb\x70\x01\xbb\x43\x6e\x3c\xda\xc7\x90\x5b\xa1\x32\xcf\xfd\x86\x1d\x9f\xb0\x93\x71\x2f\x16\xec\x82\x6e\x72\xa3\xb5\x83\x92\xd6\xf2\x25\x52\x42\x17\x42\xe2\xc8\xdd\xba\x3e\x98\x37\x68\xcf\x53\x72\x0b\x1c\x32\xbb\x0c\xaa\xfd\x91\x12\x24\x63\x99\x5d\x12\x35\x1d\xab\x5d\x9f\x57\x62\x5e\x3a\x28\x89\xbf\x2e\xb5\x42\x50\x4d\x95\xa2\xb1\xa0\x0d\x60\xc5\x85\x04\x9e\xe7\x06\xad\xc5\x17\x67\xdd\x56\x04\x02\x26\x63\x9e\x2c\x8a\xe1\x42\xd8\x5a\xf2\xbb\xb5\x4d\xe9\x1d\x2c\xd1\x88\x42\x60\xee\x57\xb5\x56\xce\xda\xa4\xe0\xa9\x6e\x1c\x5c\x68\xc5\x65\x0e\x33\xd3\x54\xf5\xcb\x4b\xe1\xa0\x0b\x73\x00\x8c\xad\x89\x9f\x44\xc8\x17\x21\x07\xc3\x73\xd1\xf8\x66\x78\xbc\xa8\x80\x1b\xdd\xa8\x1c\x38\xd4\x92\x67\x48\x0d\xfd\x3b\x6e\x44\x08\x27\xde\xd2\xed\x84\xfa\x4b\x05\x2f\x32\xcf\xe9\x1e\x52\x61\xfe\xf9\xc1\xeb\xc9\x68\x32\x19\x8f\x5f\x4f\x8e\x4e\x46\xa7\x93\x37\x67\xa7\x67\x47\xc7\x8b\xea\x60\x6f\x6a\x7c\xdb\xb8\xba\xd9\x14\xa4\xde\x3e\xf1\x7b\x88\x3d\x5a\xd8\x9c\x63\x67\x27\xe3\xdf\xa8\x3e\x5f\x0a\x3f\x58\xad\xfa\xae\x05\x8f\xc9\x18\xfd\x23\x76\xe2\xda\x6c\x98\xc3\xe5\x5f\xbe\x16\x0e\x81\x40\x52\x6e\x7b\x21\x66\x6b\xb0\xd0\xd9\xec\x28\x4f\x3b\x27\x12\x1d\xde\xce\xa1\x59\x9f\x43\x85\x96\x52\xaf\xd0\xf4\x53\x6c\x8f\x68\x1b\xc6\x55\xa9\x77\x58\x5b\xce\x3e\x19\x85\x9a\x77\x5a\xfc\xce\x29\xcf\x03\x6b\xc9\x2d\x14\x7c\xa9\x8d\x70\x98\xf7\xc3\xdd\xa2\xd9\x0e\x77\x41\xb7\x75\xcf\x27\x54\xa1\x4d\xc5\x9d\xd0\x8a\x8a\x16\x8d\xcf\xae\xb0\xf5\x5e\x77\x0e\x8c\xde\x8c\x86\x11\x75\x14\xc3\xf7\x96\xc2\x6c\xa5\x5e\x1d\x41\xda\x38\xc0\xa2\xc0\xcc\x89\x25\x42\x85\xae\xd4\xfe\xe1\x31\xe7\xae\x44\xb3\xd3\x6e\xda\x8c\xa8\x8d\xa6\xcc\x85\xc1\x3b\xaf\x64\xe1\x6f\xa7\x27\xe3\x71\xab\x7b\xf4\xb2\xf6\xf2\x5e\x65\xb2\xc9\xc9\xd6\x0f\x18\xb2\x72\xd8\x4b\x04\x5a\x5b\xb7\xb7\xfe\x63\x23\xb2\xc5\xd3\xcd\x52\x46\x50\x83\x81\xb3\xc7\xdd\xc0\xc0\x37\x7b\xe1\xad\x43\x0b\x66\x6d\xdc\x7e\x97\xf4\x62\xf2\x9a\x23\x8a\xe1\x03\xda\xa6\xf2\xc1\x0a\x17\x78\xff\x35\x81\x9c\xf4\x78\x59\xb4\x35\x66\xe1\x6c\x0a\x57\xb6\xf7\x17\x3d\xd9\xe0\x89\x8f\xc7\x67\xaf\xc7\xa7\x93\xb3\x37\x93\xd3\xf1\x9b\xc9\xe6\x1a\xee\xdf\xd6\xe1\xe9\xea\x9f\xd7\x30\x47\x85\x86\x1e\x8d\xe9\x5d\xc0\x0b\xcf\xd8\x8c\x53\x42\xd3\xa1\x44\x80\xd2\x41\x48\xf0\x9c\x9c\x4d\x5a\x51\xf4\x35\x3a\x72\x1f\x9d\xb7\x4a\xaf\x60\xea\x1f\x12\xd0\x3e\xd4\xa3\xe8\xd7\x9f\xff\xf9\x0b\x1c\x1e\xb6\x4f\xc7\xc3\xc3\xe8\x10\xde\x09\x57\x36\xe9\x14\xae\xfe\xd0\x4a\xc3\x93\xc4\x4e\x93\x64\xee\xa7\x46\x99\xae\x92\x76\x6e\xf8\x08\x61\x31\xa5\xb3\x03\x55\xa9\x9b\x9f\xd0\xed\x40\xed\xcc\xee\x85\xdc\xd1\x09\x96\x3e\xf9\x76\x10\x45\x9b\x91\x56\xf6\x08\x84\xb5\x0d\x86\x83\xa4\x40\xee\x1a\x83\x60\xf0\xc7\x06\x2d\x35\x1e\x83\xb0\x42\x99\xe9\x0a\x5f\x7d\x96\x1a\x48\xbe\x78\x8b\x28\xa1\x30\xe8\xaf\x7b\x59\x89\xd9\x02\xae\x5a\x84\x9a\xcf\xf1\xb7\xf6\x9a\x74\x3f\x41\x25\x61\xd1\x70\x14\x5d\x22\xc2\xd5\xcd\x28\xc9\x75\x66\x93\xf3\x6f\xbf\x99\x7d\x78\xff\xd5\xf7\xb3\xf7\xdf\xbc\x1b\x55\xf9\xcd\x47\xe3\xd9\x24\x95\x3a\x4d\x2a\x6e\x1d\x9a\xbd\x58\x43\x28\x28\x1d\xd0\x71\x21\xed\xc8\x3b\xe7\xc9\x17\x93\x28\x7a\x47\x6d\x86\xc3\x7f\xff\xfd\x8f\xff\xfd\xe7\xef\x20\x0a\x70\xa5\xf0\xe5\xf3\x03\xf5\x46\x7a\xb0\x61\x4e\x4b\x5e\xfd\x3f\x00\x00\xff\xff\xca\x27\x72\x98\x52\x13\x00\x00")

func DockerTemplatesReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadmeTmpl,
		".docker/templates/readme.tmpl",
	)
}

func DockerTemplatesReadmeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme.tmpl", size: 4946, mode: os.FileMode(420), modTime: time.Unix(1576951190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xd1\x6e\xeb\x36\x12\x7d\xd7\x57\xcc\x8d\x0a\xd4\x0e\x42\xcb\x49\xee\x05\x12\xa3\x2d\xb6\x4d\xf6\xde\xbd\xd8\xa2\xed\xde\xb8\xd8\x87\x20\x80\x29\x69\x64\xb1\xa6\x48\x95\xa4\xec\xa4\x41\xf6\x17\x76\xf7\x03\x16\x7d\xe9\xeb\xbe\xef\xf7\xec\x0f\x6c\x3f\x61\x31\xa4\x1c\xcb\x8e\xd3\x5e\x04\xca\x4b\xac\x21\x79\xce\x70\xe6\xcc\x50\x54\x0c\x6e\x25\x94\x63\xb9\xce\x16\x68\x80\x01\x97\xb5\x50\x18\x45\x9f\xbd\x62\x0c\xa6\xfa\x02\xac\xe3\xc6\x01\x63\x5f\x44\x71\x0c\x53\x9e\x4a\x04\x5d\xc0\x85\x56\x0e\x95\xb3\xd1\xf1\x08\xae\xff\xa4\x57\xe0\x34\x34\x16\x6f\x06\x71\xa9\x57\xcc\x69\xd6\x58\x1c\x46\x00\x34\xfc\x56\x18\xeb\xda\xd1\x82\x7e\xaf\x07\x21\x8c\x5f\x18\xe4\x0e\x81\x2b\xe0\x52\x70\x7b\x33\x88\x33\x6f\x61\x5c\x31\x6f\x19\x7a\x96\x4b\xef\x22\xbb\xd0\x55\xad\x3d\x56\xf0\x99\x65\xc1\xd0\x01\xfc\xa3\xe4\xd6\x89\xcc\x22\x37\x59\x09\x5c\xe5\xf0\x67\x91\x72\xc5\x6f\x06\x31\x76\x87\x18\x57\x39\x5b\xf8\xa1\xce\xea\xa9\x36\x50\x1b\x7d\x7b\x77\x33\x88\x9d\x36\xcc\xff\xee\xa2\xdf\x62\xd6\x38\x84\x29\x05\x0e\x32\x5d\x55\x5c\xe5\x04\x1d\xec\x2c\x04\xb4\xb5\x6f\xad\xe3\x55\x2d\xd1\x52\xf8\xba\xab\x82\x95\xe9\xa2\xbb\xc6\x6f\x98\x3b\x1f\x8d\x9c\xfe\x87\x18\x7c\xd9\xb8\x52\x1b\x32\xf2\xf0\x2b\x98\x7f\xfd\xf9\x97\x7f\xf9\x94\x18\x91\x36\x4e\xa8\xf9\xcd\x20\x66\x59\xe7\x39\x4c\xbb\x2a\xf5\x0a\xee\x74\x63\xc0\x36\x75\xad\x8d\xbb\x19\xc4\x96\xf2\x45\x36\xd6\xda\x86\x9b\xd4\xa3\xca\x7d\xe2\x29\xf3\x9b\x1c\xd3\x63\x0c\x8f\x49\x8d\xa2\xb7\xda\x40\xd1\x3e\xf2\x39\x1e\x11\x05\x28\xc4\x9c\x16\xa4\x8d\x90\x39\x88\x8a\xcf\x11\x42\xc2\x46\x51\x34\x9b\xcd\x6c\x89\x52\x46\xad\xec\xea\x46\x4a\xb8\x1d\x9b\x9f\x16\x7a\x99\xf8\xf8\x4d\xee\xef\x61\x74\x29\x0c\x3c\x3c\xb0\x56\x92\xb3\xd9\x2c\x8a\xb4\x81\x27\xcb\xd7\x0a\x08\x5c\x61\x5e\x4c\x3e\xee\x08\x6b\xb3\xce\x3f\x06\xe5\x7f\x7e\xd0\xfa\x60\x1a\x05\xcc\x09\x60\xcc\x54\xc0\x96\xf0\xc9\xa0\x5e\xe5\xc3\x84\x82\x3f\x49\x74\xed\x12\x5e\xd7\xfe\xe9\x59\x47\xef\xef\x45\x01\xa3\xaf\xb8\xc5\x87\x07\x76\x7f\x8f\x2a\x27\x5b\xb0\xc0\xc3\xc3\x01\xf1\xc3\xf6\x5f\x88\xe5\x73\x7a\x8d\xa2\x2b\x5f\x7c\x14\xf7\x1a\x50\xf2\xed\x49\x8b\x76\xd2\x73\xe1\x68\x6a\x60\x39\x6c\x29\x7e\xbd\x66\x1d\x23\x78\x14\xfb\x36\x97\xd3\xe6\xf7\x70\x69\xca\x06\xc6\xd7\xc2\x55\xe0\x10\xca\xa1\x29\x78\x86\x4f\xfc\xdf\xd9\x65\xa8\x94\x60\xf8\x5d\xba\xce\xdc\x6d\xa8\xe0\xc5\xb4\x44\x05\xba\x46\x05\x42\x05\x8d\xa7\x46\xaf\x2c\x1a\xb8\x2e\x9d\xab\x27\x49\x22\x75\xc6\x65\xa9\xad\x9b\x9c\x8e\xc7\xe3\x9b\xc1\x5e\xf3\xb0\xcd\xc8\xbe\x1a\x7f\xde\x45\xaf\x9d\x25\x7c\xf2\xdd\x5f\x2f\x5b\x55\x6c\x2b\xc6\xdb\x80\x95\x9b\x80\xed\x69\x06\x51\xf4\x25\x14\xb8\x02\x2b\x68\x04\xd6\x8d\x81\xa2\x57\xa2\xac\x7d\x55\x35\x2a\x47\x63\x9d\x0f\x5e\x89\x90\x72\x2b\x32\x3b\xe9\x38\x16\xc3\x55\x66\x78\x8d\xc0\xa5\xf4\x53\xa6\x2b\x44\x67\xa1\x30\xba\xa2\x6a\x35\x9f\x5a\x70\xa2\x42\x29\x14\x8e\x5e\xb8\x8d\xc6\x03\x29\x5e\xe1\x36\x5d\x97\x8a\xa8\x77\xe8\x80\x1a\x12\x17\x4a\xa8\x39\x50\x41\xf3\xba\x96\x3d\xf8\x00\xcc\x6e\xe0\xa2\x18\x2e\xb4\x94\x98\x39\xc0\x25\x9a\xbb\xe0\xd3\x5e\xe6\xe0\xa7\x9f\xa5\x15\x7e\x6a\x5b\xf7\x5f\xea\xd0\x7e\x27\xda\x90\xb8\x92\x3b\x58\xa1\x41\x70\x64\xc0\x1c\x52\x2c\xb4\x41\x38\x19\x1f\xbf\xee\x23\x04\xec\x0e\xb9\xf1\x68\x1f\x43\x6e\x85\xca\x3c\xf7\x1b\x76\x7c\xc2\x4e\xc6\xbd\x78\xb0\x0b\xba\xd1\x46\xeb\x07\x89\xd6\xf2\x25\x92\xa0\x0b\x21\x71\xe4\x6e\x5d\x1f\xcc\x1b\xb4\xe7\x29\xb9\x05\x0e\x99\x5d\x86\xa9\xfd\x91\x12\x24\x63\x99\x5d\x12\x35\x9d\xae\xdd\x98\x57\x62\x5e\x3a\x28\x89\xbf\x2e\xb5\x42\x50\x4d\x95\xa2\xb1\xa0\x0d\x60\xc5\x85\x04\x9e\xe7\x06\xad\xc5\x17\xab\x6e\x2b\x03\x01\x93\x31\x4f\x16\xc5\x70\x29\x6c\x2d\xf9\xdd\xda\xa7\xf4\x0e\x96\x68\x44\x21\x30\xf7\xab\x5a\x2f\xa7\xad\x28\x78\xaa\x1b\x07\x97\x5a\x71\x99\xc3\xd4\x34\x55\xfd\xf2\x52\x38\xe8\xc2\x1c\x00\x63\x6b\xe2\x27\x19\xf2\x45\xc8\xc1\xf0\x5c\x34\xbe\x19\x1e\x2f\x2a\xe0\x46\x37\x2a\x07\x0e\xb5\xe4\x19\x52\x43\xff\x8e\x1b\x11\xd2\x89\xb7\xf4\x92\x42\xfd\xa5\x82\x17\xb9\xe7\x74\x0f\x52\x98\x7f\x7e\xf0\xfa\x6c\x74\x76\x36\x1e\xbf\x3e\x3b\x3a\x19\x9d\x9e\xbd\x39\x3f\x3d\x3f\x3a\x5e\x54\x07\x7b\xa5\xf1\x6d\xe3\xea\x66\x53\x90\x7a\xfb\xc4\xef\x21\xf7\x68\x61\x73\x8e\x9d\x9f\x8c\x7f\xa3\xfa\x7c\x29\xfc\x60\xb5\xea\xbb\x16\x3c\x26\x63\xf4\x8f\xd8\x89\x6b\xb3\x61\x0e\x57\x7f\xf9\x5a\x38\x04\x02\x49\xb9\xed\x85\x98\xad\xc1\x42\x67\xb3\xa3\x3c\xed\x9c\x48\x74\x78\x3b\x87\x66\x7d\x0e\x15\x5a\x4a\xbd\x42\xd3\x4f\xb1\x3d\xa2\x6d\x18\x57\xa5\xde\x61\x6d\x39\xfb\x64\x14\x6a\xde\x69\xf1\x3b\xa7\x3c\x0f\xac\x25\xb7\x50\xf0\xa5\x36\xc2\x61\xde\x0f\x77\x8b\x66\x3b\xdc\x05\xbd\xb4\x7b\x3e\xa1\x0a\x6d\x2a\xee\x84\x56\x54\xb4\x68\xbc\xba\xc2\xd6\x7b\xdd\x39\x30\xba\x3a\x1a\x46\xd4\x51\x0c\xdf\x5b\x4a\xb3\x95\x7a\x75\x04\x69\xe3\x00\x8b\x02\x33\x27\x96\x08\x15\xba\x52\xfb\xfb\xc7\x9c\xbb\x12\xcd\x4e\xbb\x69\x15\x51\x1b\x4d\xca\x85\xc1\x3b\x3f\xc9\xc2\xdf\x4e\x4f\xc6\xe3\x76\xee\xd1\xcb\xda\xcb\x7b\x95\xc9\x26\x27\x5f\x3f\x60\x50\xe5\xb0\x97\x0c\xb4\xbe\x6e\x6f\xfd\xc7\x46\x64\x8b\xa7\x9b\x25\x45\x50\x83\x81\xf3\xc7\xdd\xc0\xc0\x37\x7b\xe1\xbd\x43\x0b\x66\xed\xdc\xfe\x90\xf4\xe2\xf2\x9a\x23\x8a\xe1\x03\xda\xa6\xf2\xc9\x0a\x2f\xf0\xfe\xa3\x02\x05\xe9\xf1\x65\xd1\xd6\x98\x85\xb3\x29\xbc\xb2\xbd\xbf\xec\xc9\x07\x4f\x7c\x3c\x3e\x7f\x3d\x3e\x3d\x3b\x7f\x73\x76\x3a\x7e\x73\xb6\x79\x0d\xf7\x57\xec\x70\x83\xf5\xb7\x6c\x98\xa3\x42\x43\x97\xc6\xf4\x2e\xe0\x85\xdb\x6c\xc6\x49\xd0\x74\x28\x11\xa0\x74\x10\x04\x9e\x53\xb0\x69\x56\x14\x7d\x8d\x8e\xc2\x47\xe7\xad\xd2\x2b\x98\xf8\x8b\x04\xb4\xf7\xf5\x28\xfa\xf5\xe7\x7f\xfe\x02\x87\x87\xed\xd5\xf1\xf0\x30\x3a\x84\x77\xc2\x95\x4d\x3a\x81\xeb\x3f\xb4\xd6\x70\x25\xb1\x93\x24\x99\xfb\xa1\x51\xa6\xab\xa4\x1d\x1b\x3e\x42\x58\x4c\xe9\xec\x40\x55\xea\xe6\x27\x74\x3b\x50\x3b\xa3\x7b\x21\x77\xe6\x6c\xa0\x6b\x81\x32\xd3\xc7\xc7\x3b\x98\x6b\xf3\x5e\xb0\xf5\x60\xd8\xef\x93\x0f\x11\x51\xb4\x79\xd2\xca\x1e\x81\xb0\xb6\xc1\x70\x1c\x15\xc8\x5d\x63\x10\x0c\xfe\xd8\xa0\xa5\xf6\x65\x10\x56\x04\x57\xe1\xab\xcf\x52\x03\xc9\x17\x6f\x11\x25\x14\x06\xfd\x4b\x63\x56\x62\xb6\x80\xeb\x16\xa1\xe6\x73\xfc\xad\x88\x25\xdd\x0f\x5b\x49\x58\x34\x1c\x45\x57\x88\x70\x3d\x1b\x25\xb9\xce\x6c\x72\xf1\xed\x37\xd3\x0f\xef\xbf\xfa\x7e\xfa\xfe\x9b\x77\xa3\x2a\x9f\x7d\x34\x9e\x4d\x52\xa9\xd3\xa4\xe2\xd6\xa1\xd9\x8b\x35\x84\x82\x44\x85\x8e\x0b\x69\x47\x3e\x38\x4f\x3e\xbf\x44\xd1\x3b\x6a\x56\x1c\xfe\xfb\xef\x7f\xfc\xef\x3f\x7f\x07\x51\x80\x2b\x85\x2f\xc2\x1f\xa8\xc3\xd2\xb5\x0f\x73\x5a\xf2\xea\xff\x01\x00\x00\xff\xff\x08\x82\x8d\xe0\xa8\x13\x00\x00")

func DockerTemplatesReadme_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_alpineTmpl,
		".docker/templates/readme_alpine.tmpl",
	)
}

func DockerTemplatesReadme_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_alpine.tmpl", size: 5032, mode: os.FileMode(420), modTime: time.Unix(1576951284, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_rootTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x97\xcd\x6e\xe3\x36\x10\x80\xef\x7a\x8a\x59\xa7\x58\x34\xc1\x5a\x42\xaf\x81\x9d\x6d\x36\x9b\xa4\x39\x34\x5b\xc4\xde\xed\xc1\x08\x90\x31\x35\x96\xd8\x50\xa4\x4a\x8e\x6c\x04\x86\x9e\xa1\xed\x03\x14\x7b\xd9\x6b\xef\x7d\x9e\xbe\x40\xf7\x11\x0a\x8a\xb6\x93\x18\x4e\x63\x07\xf6\x4d\xe4\xfc\x7d\x1c\x0e\xc9\xd1\x1e\xf0\x44\x6a\x6e\xa7\x46\xdc\x92\x85\x21\x3a\x4a\xc1\x68\x38\x56\xa5\xd4\xf4\x06\x3e\x0e\x2b\xcd\x15\xa0\x4e\xe1\x3d\x0d\x25\x6a\xe8\x29\x59\x44\x51\xa7\x04\x54\x32\xd3\xdd\x96\x20\xcd\x64\x5b\x47\x11\x00\x40\x07\x21\xb7\x34\xea\xb6\x72\xe6\xd2\x1d\x26\x09\x5b\x1c\x4b\xd7\x16\x32\x16\xa6\x48\xa6\x53\x88\x3f\x09\xf7\x13\x72\x0e\x75\xdd\x3a\xea\xc8\x22\x03\x67\xc5\xbd\xbe\x2c\xb2\xd8\xe5\x92\x54\xea\x62\x69\x66\xe6\x4b\x76\xb1\x1b\x67\x2d\x48\x8e\x3a\x09\x3e\x11\x55\x28\x53\xa5\x71\x6a\x8d\x26\xef\xe5\xf9\xb0\x4b\x06\x58\xca\x64\x88\x69\x46\xcb\xa1\x13\xc7\xc8\x95\xf3\x04\x6f\x7d\x44\x4b\x23\x97\xe4\x84\xa9\x57\x8c\x4f\x2a\x6b\x49\xf3\x3b\x8b\x5a\xe4\x75\xbd\x60\xec\x24\xe5\xd1\xfa\x29\xcb\x24\xe7\xd5\x70\x55\xbe\x00\x15\x77\x5b\x41\x0e\xa8\x14\x58\x52\x84\x8e\xdc\x1a\x99\x0c\x56\x49\x6a\x26\x5a\x99\xc0\xfb\x68\x61\x6c\x18\xd5\xf3\x99\x5d\x13\x4e\x21\x93\xe3\x39\xdf\x16\xf0\x82\xc3\x2d\x53\x32\x66\xeb\xa3\x31\x66\x1b\xd7\xe1\x9a\x1c\x1b\xa7\x69\x66\xb0\x2b\x9e\xd2\xd2\xb6\x98\x12\x54\xdb\xdb\xaf\x91\xb1\xb7\xeb\x03\x79\xed\x55\x57\xc7\x5b\xc7\x77\x8a\xba\xce\x08\x89\xea\xb5\xc2\x21\xa9\xee\x99\xf7\xbc\x0d\x44\xc7\x68\x37\x38\x8e\x8d\xfa\x9a\x8c\x3d\x46\xbb\x15\xc6\x09\xb2\xc8\x69\x13\xcc\xb9\xc5\x9a\xa4\x3f\x7b\xf5\xad\xa0\x9a\x92\x34\x48\xe7\xaa\x4d\xee\xb8\xa0\xbf\xab\xc3\x21\x94\xf1\x6f\xe4\xcb\xa0\xda\xc1\x7a\x57\x6c\x4d\xba\x4a\xbb\x31\x55\x69\x77\x9c\xad\x17\x31\xed\x38\x59\xc2\x68\xb6\x72\x58\xb1\xd9\xe4\x28\x3c\xb4\xda\x15\x99\x92\x82\xf4\x26\x77\xef\xcc\xe0\x25\x3c\x4c\x36\x96\x4f\xe3\x30\x59\x10\x39\x32\x58\x63\x8a\x55\x40\xa1\x4d\x8a\x9f\xf2\xf4\x3c\xc3\xff\x76\x88\x81\x23\xa8\x40\x13\x6a\x2b\x4d\x63\x68\xc8\xf6\xf6\xe0\x07\x33\x01\x36\x50\x39\x8a\xa2\x33\x63\x61\x24\xad\x63\xa8\x1c\x66\xf4\x06\xee\x4c\x05\x9a\x28\xf5\x1a\xc3\x4a\xaa\x14\x64\x81\x19\x41\xe8\x95\xe3\x28\xba\xb9\xb9\x71\x39\x29\x15\x65\x92\x7d\xa5\x6b\x82\x76\x3b\xa5\x92\xf3\xee\x77\xf0\xec\x9e\x47\x22\x85\x38\x09\xce\x46\x52\x91\x4b\x06\x83\x4f\xa7\x57\xbd\x8b\x0f\x97\xd7\xd7\xc9\x60\xf0\xa1\x77\x7d\x1d\x05\x71\x5b\x98\xa2\x34\x8e\xa0\x2a\xa1\x9d\x2e\x4f\xda\x4a\x87\x2e\x1e\xda\xb9\x67\x8a\x22\x63\xa1\xa1\x9b\x69\x42\x59\x29\x05\xd3\x69\xfc\xbe\x19\x5e\x62\x41\xae\x44\x41\x75\x9d\x2c\x26\xdf\xa1\xa3\xba\x3e\x1c\x0c\xfa\xc7\xe7\x8b\xb8\x8d\xeb\x36\x4b\x68\xb7\x6d\xb1\x91\x83\x05\x4a\x3f\x27\x0d\x22\x27\x71\x0b\x9c\x13\x5c\x9d\x1e\xbf\xff\xf1\x34\x2e\x52\xff\x98\x03\xa1\xc8\x61\x4c\xd6\x49\xa3\x5d\xec\x77\x64\x0f\x8e\xc7\x28\x15\x0e\x15\x85\x6c\xbb\xc8\x67\x2d\x84\xb8\x68\x26\xfa\x8d\xb0\xae\x9b\x0d\x3c\xae\x38\x37\xd6\x2b\x59\xd4\x19\xc1\x37\x63\x54\x70\xd8\x85\xf8\xc4\x68\x46\xc1\xae\xae\xa3\xaf\x9f\xff\xf8\x02\x07\x07\xd3\x69\x23\x8d\x3d\x3d\xd4\xf5\xc1\x81\xf7\x2c\x47\x61\xb2\x3f\x09\xb5\x5e\xd7\x07\x30\xfb\x3e\x84\xc1\xf7\xda\x68\x2a\xad\x1c\xa3\xb8\xbb\xfe\x76\x51\xb1\x41\x3e\xdf\xd2\x25\xfb\x7d\x78\x35\x98\x8f\xce\x8c\x52\x66\x72\x6f\xb9\x5c\xa8\x41\x2d\x19\x35\x6a\x2b\x7c\xbd\x9d\x77\x27\x5e\xfe\xfa\xe1\x4b\xbb\x3f\x9d\x02\xe9\xd4\xa7\xe1\xc1\x2a\xce\xc3\xfd\xe1\x17\x11\x3e\xfd\x1a\xe6\x6e\x17\xc2\x7b\x9e\xc7\xb5\xf9\x58\x6b\x75\x84\xd3\x02\xa5\x6a\x02\x34\x5f\x87\x30\xb7\x9b\x0b\x1e\x5a\x91\x4e\x67\xdb\xf4\xf5\xf3\x97\x3f\xe1\x64\x7e\x75\x4a\x9d\x45\xd1\xfd\xc8\x68\xf7\x66\xf6\x9e\x36\x3f\x9a\x23\x42\xae\x9a\x16\xf4\xd7\x8a\x1c\x3b\x40\x4b\x30\x21\x25\x4c\x41\xaf\x3a\x43\x0b\xc9\xd1\x19\x91\x82\x91\x25\xf2\x67\x33\x54\xd7\x60\xe6\xa1\xc4\x8c\x9e\x5a\xe1\xc3\xc6\x34\xa8\xef\xc7\x51\x8f\x08\x06\x37\xcd\x49\x74\xc9\xc9\x87\xcb\xfe\xd5\xc5\xbb\x8f\xfd\x8b\xcb\xf3\xb8\x48\x6f\xd6\xf1\xc4\x96\x68\xc5\xef\xdf\x4a\x87\xfb\x4d\xdd\xa7\xc4\x28\x55\xa8\x78\xe8\xe5\x66\xe2\xef\x1a\x0b\xae\x2a\x4b\x63\x39\x8a\xce\xe5\x98\x00\xe1\x9f\xbf\x7e\xff\xf7\xef\xdf\x7c\xee\x39\x97\x0e\x4a\x6b\x7e\x21\xc1\x90\x93\x2a\x29\xf5\x26\xaf\xa2\xe8\xbf\x00\x00\x00\xff\xff\x43\x6f\x77\x32\xc1\x0f\x00\x00")

func DockerTemplatesReadme_rootTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_rootTmpl,
		".docker/templates/readme_root.tmpl",
	)
}

func DockerTemplatesReadme_rootTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_rootTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_root.tmpl", size: 4033, mode: os.FileMode(420), modTime: time.Unix(1576960321, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesTravisTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcd\x6e\xdb\x3a\x10\x85\xf7\x7c\x8a\x81\x60\x20\x8b\x0b\x8a\x37\x5d\x74\x21\x20\x8b\xa0\x31\x8a\xa0\x4d\x5c\xd8\x68\xba\x29\x60\xd0\xd2\x58\x62\x43\x91\xca\x0c\xa9\x18\x51\xfd\xee\x45\x24\x25\x56\xf3\xd7\xec\x04\x9d\xef\x1c\x72\x86\x33\x7a\x1b\x90\xd6\x9c\x93\x69\x42\x26\x00\x24\x14\x3e\xbf\x46\x02\x53\xeb\x12\x59\x08\x8e\x85\xcf\x80\xf0\x26\x1a\xc2\x42\x88\x0d\x6e\x3d\xe1\xda\x38\x0e\xda\xda\xc1\x72\xcf\x00\xd5\x20\xb7\xa0\x22\x93\xb2\x3e\xd7\x56\x6d\x8c\x53\x43\x98\x64\x6b\xea\xf7\x93\x92\xd1\xb1\xa7\xde\x90\x47\xb2\x20\xbf\x42\x15\x42\xc3\x99\x52\xa5\x09\x55\xdc\xa4\xb9\xaf\xa7\x8e\xbf\xbe\x09\x2d\x6a\x46\x56\x85\xbf\x75\xd6\xeb\x42\x1d\xa7\x1f\x3e\xa6\xc7\xaa\x30\x1c\xd6\xd6\xb8\xb8\x4b\x83\xa6\xb4\xbc\x03\x29\x7d\x0c\x4d\x0c\x30\xf1\x8f\x5a\x7f\x7a\xd0\x04\xbb\x76\xfb\x9a\x9c\x57\xb5\x2f\xe0\xbf\x1d\x1c\x92\x9f\x55\xfc\x0f\x66\x5a\x6b\xdf\x9c\xba\x7d\x85\x7c\xd2\xb0\x77\x38\xc6\xec\x97\x8c\x98\x57\x1e\x8e\xba\x04\x77\x0d\x92\xa9\xd1\x05\x6d\x93\x2c\x50\xc4\xfd\x11\xfc\x1e\x72\x03\x22\x28\x0c\xf9\x18\xa9\x0a\x8d\xb5\x77\xe9\x2f\xf6\x93\xc3\x19\xa9\x35\x39\x3e\x4c\x0d\x21\x07\x4d\xe1\x71\x4c\xa6\x83\x95\x17\x23\xb5\x35\x16\x59\x25\xb3\xab\xf9\x72\x75\xbe\xb8\x4c\x7a\xf5\xfc\xe2\xf4\xf3\xfc\x24\xd9\xfd\x4f\x77\xd7\xbe\x55\xe1\xd6\xb8\x90\xcd\xba\x91\x51\x3f\x95\x92\xfb\x44\x08\x74\x6d\xd6\x75\xa4\x5d\x89\x30\x6b\xb5\x85\xec\x04\xd2\x2b\x24\x36\xde\xf1\x7e\xdf\x47\x8d\x9e\x93\xae\xeb\x91\xf4\xcc\x10\xbc\x29\x29\x6d\x1b\xe3\xf0\x2d\xe2\xbe\x9f\x5d\x87\xae\xd8\xef\x85\xb0\xda\x95\x51\x97\x98\xc1\x46\x73\x25\xc4\xf3\xf5\x19\x5e\xac\x1d\xee\x35\x5d\xab\x4d\x34\xb6\x00\x29\xf9\x26\x6a\xae\x40\x06\x48\x66\x7d\xe9\x09\xa4\x87\xae\x4e\x43\x06\xc7\x03\xf5\x94\x01\x8a\x0e\x64\x30\x87\x18\x59\xbd\xb0\xc6\x93\x3f\xd6\x97\xc6\x81\x8c\x30\x3b\x5b\x7c\xfa\x32\x5f\xae\xbf\xaf\xe6\xcb\xcb\xd3\x8b\x39\xc8\xe6\xf1\xdf\xb7\xd3\xd5\xea\xc7\x62\x79\x36\x35\x36\x91\xab\xc3\x3d\xc4\xf8\xf2\x9c\x8d\xfa\x9f\x00\x00\x00\xff\xff\x8c\x58\x8b\xbc\x4a\x04\x00\x00")

func DockerTemplatesTravisTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesTravisTmpl,
		".docker/templates/travis.tmpl",
	)
}

func DockerTemplatesTravisTmpl() (*asset, error) {
	bytes, err := DockerTemplatesTravisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/travis.tmpl", size: 1098, mode: os.FileMode(420), modTime: time.Unix(1576921076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".docker/templates/docker-compose.tmpl":         DockerTemplatesDockerComposeTmpl,
	".docker/templates/docker-entrypoint.tmpl":      DockerTemplatesDockerEntrypointTmpl,
	".docker/templates/docker-sync.tmpl":            DockerTemplatesDockerSyncTmpl,
	".docker/templates/dockerfile_alpine.tmpl":      DockerTemplatesDockerfile_alpineTmpl,
	".docker/templates/dockerfile_debian-slim.tmpl": DockerTemplatesDockerfile_debianSlimTmpl,
	".docker/templates/dockerfile_ubuntu.tmpl":      DockerTemplatesDockerfile_ubuntuTmpl,
	".docker/templates/dockerignore.tmpl":           DockerTemplatesDockerignoreTmpl,
	".docker/templates/env.tmpl":                    DockerTemplatesEnvTmpl,
	".docker/templates/makefile.tmpl":               DockerTemplatesMakefileTmpl,
	".docker/templates/readme.tmpl":                 DockerTemplatesReadmeTmpl,
	".docker/templates/readme_alpine.tmpl":          DockerTemplatesReadme_alpineTmpl,
	".docker/templates/readme_root.tmpl":            DockerTemplatesReadme_rootTmpl,
	".docker/templates/travis.tmpl":                 DockerTemplatesTravisTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".docker": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"docker-compose.tmpl":         &bintree{DockerTemplatesDockerComposeTmpl, map[string]*bintree{}},
			"docker-entrypoint.tmpl":      &bintree{DockerTemplatesDockerEntrypointTmpl, map[string]*bintree{}},
			"docker-sync.tmpl":            &bintree{DockerTemplatesDockerSyncTmpl, map[string]*bintree{}},
			"dockerfile_alpine.tmpl":      &bintree{DockerTemplatesDockerfile_alpineTmpl, map[string]*bintree{}},
			"dockerfile_debian-slim.tmpl": &bintree{DockerTemplatesDockerfile_debianSlimTmpl, map[string]*bintree{}},
			"dockerfile_ubuntu.tmpl":      &bintree{DockerTemplatesDockerfile_ubuntuTmpl, map[string]*bintree{}},
			"dockerignore.tmpl":           &bintree{DockerTemplatesDockerignoreTmpl, map[string]*bintree{}},
			"env.tmpl":                    &bintree{DockerTemplatesEnvTmpl, map[string]*bintree{}},
			"makefile.tmpl":               &bintree{DockerTemplatesMakefileTmpl, map[string]*bintree{}},
			"readme.tmpl":                 &bintree{DockerTemplatesReadmeTmpl, map[string]*bintree{}},
			"readme_alpine.tmpl":          &bintree{DockerTemplatesReadme_alpineTmpl, map[string]*bintree{}},
			"readme_root.tmpl":            &bintree{DockerTemplatesReadme_rootTmpl, map[string]*bintree{}},
			"travis.tmpl":                 &bintree{DockerTemplatesTravisTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
