// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// .docker/templates/contributors.tmpl
// .docker/templates/docker-compose.tmpl
// .docker/templates/docker-entrypoint.tmpl
// .docker/templates/docker-sync.tmpl
// .docker/templates/dockerfile_alpine.tmpl
// .docker/templates/dockerfile_debian-slim.tmpl
// .docker/templates/dockerfile_ubuntu.tmpl
// .docker/templates/dockerignore.tmpl
// .docker/templates/env.tmpl
// .docker/templates/makefile.tmpl
// .docker/templates/readme.tmpl
// .docker/templates/readme_alpine.tmpl
// .docker/templates/readme_root.tmpl
// .docker/templates/travis.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DockerTemplatesContributorsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func DockerTemplatesContributorsTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesContributorsTmpl,
		".docker/templates/contributors.tmpl",
	)
}

func DockerTemplatesContributorsTmpl() (*asset, error) {
	bytes, err := DockerTemplatesContributorsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/contributors.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1577017031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerComposeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x10\x5d\x81\x9e\xfc\x11\x14\xc3\x3a\x01\x39\xa4\x4b\x0e\xdd\x86\x24\x68\x82\xee\x68\xa8\x36\xd3\x0a\x91\xa5\x80\x92\xdd\x74\x86\xff\xfb\x20\xcb\x76\x93\xac\xcd\x76\x51\x42\xf2\xf1\xe9\x3d\xd2\x0a\xc3\x30\xa8\x90\x8c\xd0\x8a\xc1\xd5\x75\xf4\xe5\x2a\x30\x48\x95\xc8\xd0\xb0\x20\x00\xb0\x2f\x42\x59\x16\x00\x00\x88\x82\x3f\x21\x83\x7d\x42\xbf\xb7\xba\x8a\x7d\xa5\xae\x21\x9a\x0a\x82\xa6\xa9\x6b\xb1\x81\xe8\x96\x1b\x6c\x9a\xb0\xae\x51\xe5\x2e\xe7\x33\xd0\x34\x2d\xc5\x63\x29\x64\xee\xd9\x00\x32\xad\x2c\xee\x2d\x83\xa8\x4b\xe4\x3a\xdb\x22\x6d\x84\x44\x06\xd3\xe1\x7f\xd0\x63\xb9\x50\x48\xa9\xe2\x05\x32\x2f\x2b\xcc\xa4\x68\xab\x95\x96\x65\xe1\x04\xbb\x20\x84\xcb\xe5\xaf\x69\x27\x2f\xd6\x3b\xeb\xff\xc6\x39\xb7\x7c\x70\x14\x1a\xe4\x94\x3d\x7f\x6c\xac\x07\x48\x6e\xd1\xd8\x33\x1a\x3c\xae\x05\xec\x34\xd9\x41\xc4\x75\x92\x24\xcc\x1d\x6d\x8c\xaa\x12\xa4\x55\x81\xfd\x30\x43\x98\x2f\xa6\xb3\x74\x36\x7f\x18\xef\x48\xe7\x65\x66\x85\x56\xad\x3c\x4d\xe1\x8e\x44\xa5\xf7\xaf\xec\xcc\xb5\x56\x53\x87\x3a\xb4\xe0\x26\xc8\x9f\x30\x3e\x24\x39\x70\x70\x24\xf0\xe2\x6b\xf2\x39\x61\xee\xb8\x80\x4f\xb0\xd6\x04\x3b\xea\xe9\x7c\x75\xe4\xaa\xa3\xbe\xea\x74\x90\x96\x2d\x49\x0f\xba\x19\x8d\x6e\x98\x3b\x1c\x68\xe9\x2f\x04\x70\x36\x50\x72\x63\x45\xf6\xce\x98\xfd\x96\xa3\x0e\x10\x65\x3a\x3e\xc2\x1e\x47\xec\xb2\x9e\xfd\x9c\xac\xd6\x77\xdf\xd2\x87\xd9\xfd\xea\x6e\x31\x6f\xce\x0c\xa5\x6b\xfd\x68\xe2\x4a\xe7\x18\x39\xfc\xf8\xe8\x8e\xae\x9a\xc9\xd2\x58\xa4\x48\x28\x61\x05\x97\x69\xc1\x5d\x98\xba\x26\x73\xb6\xa1\x65\xf4\xae\xc2\x2e\xd7\x21\x1e\xb5\xb6\xc6\x12\xdf\x45\x05\x16\x9a\x5e\x53\xa9\xb3\xed\xd8\x52\x89\xfd\x00\x67\xab\xf4\xfb\xe4\x61\x92\x2e\x96\xeb\xd5\xf8\xcd\xeb\x90\x6b\x2e\x5a\x64\x29\x45\x21\xfa\xd5\x01\x14\x58\x38\xa6\x3e\x04\x30\x7a\x63\x19\x84\xa3\x21\xf1\xcc\x29\x1f\x12\x27\xcf\x03\x8d\x7b\x0a\xc9\x88\xc5\xa5\xa1\xd8\x3c\x73\xc2\x93\x15\xb4\x4f\xe5\xaf\x0f\xe6\x4d\xde\x72\x71\xbf\x6e\xd8\x49\xec\xb6\xbe\x15\x8f\x5c\xf1\x7f\xac\xdb\x83\xba\x1f\x76\x59\xff\xb8\xbb\x9d\xcc\x27\xff\xb3\x5f\xdf\xf2\x9e\xb2\x8e\xa3\x17\x76\x18\x06\xc1\x81\xff\xc1\x7b\xdb\x99\x93\xa8\x90\x18\x48\x9d\x71\x19\x04\x0a\xed\x8b\xa6\x6d\x0b\xcc\x71\xc3\x4b\xd9\x7d\x3a\xb8\xb7\x48\x8a\xcb\x7e\xe0\x5e\x93\x7a\x09\x5b\x59\x7f\x02\x00\x00\xff\xff\x2d\xcb\x66\x7d\x43\x05\x00\x00")

func DockerTemplatesDockerComposeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerComposeTmpl,
		".docker/templates/docker-compose.tmpl",
	)
}

func DockerTemplatesDockerComposeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerComposeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-compose.tmpl", size: 1347, mode: os.FileMode(420), modTime: time.Unix(1576950813, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerEntrypointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\x2a\x29\xcf\xcc\x2b\x51\x50\x71\xe0\x02\x04\x00\x00\xff\xff\xbd\x2f\x25\x36\x15\x00\x00\x00")

func DockerTemplatesDockerEntrypointTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerEntrypointTmpl,
		".docker/templates/docker-entrypoint.tmpl",
	)
}

func DockerTemplatesDockerEntrypointTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerEntrypointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-entrypoint.tmpl", size: 21, mode: os.FileMode(420), modTime: time.Unix(1576934386, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerSyncTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x6a\xc3\x40\x0c\xc6\xf1\xfd\x9e\x42\x1c\x85\x9b\xdc\xba\x1d\x0f\xba\x94\x3e\x80\xb7\x8e\xe6\xea\x28\x97\x83\x20\x19\x49\xb6\x63\x42\xde\x3d\xc4\x86\x38\xe0\x4d\xfc\xfe\x82\x6f\x44\xd1\xc2\x14\xc1\x7f\x79\xc7\xbd\x15\x26\x8d\x0e\x60\x44\xf9\x67\xc5\x08\x26\x03\x3a\xa7\x33\x75\x8b\xdb\x54\xc8\x1e\x07\x80\x4a\x17\xe1\xed\xda\xfc\xfd\xde\x3e\x16\x5e\x75\xa6\xae\x55\x93\x64\x98\xe7\x08\x81\x92\x95\x11\x5b\xd6\x4b\xd8\xfa\xa0\x28\xe5\x10\xe1\xb3\xae\xeb\x4d\xb3\xf0\xd0\xef\x39\x49\xd6\x75\xb1\x02\x5f\xf5\x82\x47\x14\x20\x9c\x50\xfc\x53\x4b\x26\x16\xfc\x0e\x4d\xb2\x13\xbc\xe7\x62\x61\xdf\x7e\xf0\xcc\xd3\xcb\xc3\x3d\x00\x00\xff\xff\x84\x17\x8f\xff\xfb\x00\x00\x00")

func DockerTemplatesDockerSyncTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerSyncTmpl,
		".docker/templates/docker-sync.tmpl",
	)
}

func DockerTemplatesDockerSyncTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerSyncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-sync.tmpl", size: 251, mode: os.FileMode(420), modTime: time.Unix(1576945687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x61\x6f\xdb\x36\x10\xfd\x3c\xfe\x8a\x83\x62\xb4\x1f\x3a\xda\x1b\x32\x14\x43\x36\x0d\x73\x12\xaf\x33\x96\xc8\x81\xec\x38\x28\xd6\x21\xa0\xc9\xb3\xc5\x45\x22\x09\x92\x52\xe2\x1a\xfe\xef\x83\x28\x39\x56\x3c\x17\x29\x50\x7d\x11\x79\x77\x24\xdf\x3d\xbe\xc7\x3f\xd2\xc9\x35\x6c\x36\xd0\x9f\x7a\xb6\xc2\xfe\x79\x29\x73\xd1\x3f\x67\x0e\x61\xbb\x3d\x3b\x8c\xcf\xd8\x0a\xb6\x5b\x18\x4e\x61\x51\xcf\x09\x19\xa6\x1f\x60\x76\x37\x4e\x66\xf7\xf3\x51\x3a\x1d\x4f\x92\x78\xb3\xe9\xcf\xd1\x3a\xa9\xd5\x76\x4b\xc8\xdd\x24\xfd\xeb\x72\x9c\xc2\x40\x1b\x3f\x60\xc6\x10\x72\x02\x63\xe5\x3c\xcb\x73\xb8\x59\xfb\x4c\x2b\x60\x4a\x00\x3e\x79\xb4\x8a\xe5\x20\xd0\xa0\x12\xa8\xb8\x44\xf7\x3d\x48\xc5\xf3\x52\x48\xb5\x82\x0c\x99\x40\xeb\x42\xf1\x87\x8b\x0b\x92\xde\x26\xc0\xcc\x03\x30\x21\x80\x52\xa5\x29\x67\x3c\x43\x30\x61\xcb\xd3\xdd\x9f\x0a\xac\xc0\xac\x4f\xa9\x91\x06\x72\xb9\x58\x2e\x65\xfb\x0b\x99\xa2\x74\x79\x18\xac\x38\x87\x95\xf4\xc0\x19\xe5\x68\xbd\x5c\x4a\xce\x3c\x3a\xd0\x06\xd5\x22\x67\xee\xa0\xfa\xdd\xbb\x17\x6d\x48\x83\xaa\x0a\x88\x8c\x34\xa7\x20\xdb\xb8\x69\xe2\xe4\x04\x2e\x2c\x32\x8f\xc0\xa0\x92\xd6\x97\x2c\x07\x54\x95\xb4\x5a\x15\xa8\x7c\xe8\x88\x71\x2f\xab\xba\x44\xfa\x66\x9f\xb6\x0d\x5a\x40\x85\xaa\x6a\xd8\xab\x47\x64\x94\xcc\xe1\x66\x38\xfb\x33\x8e\x9e\x63\x83\x85\x54\x67\xbd\x3a\x18\xc1\x27\xf2\xdd\x7c\x9c\xce\x6e\x87\x57\xf7\xa3\x64\xde\x29\x8a\xba\x88\xbb\x24\x83\x54\x5e\x83\xcf\xf0\x28\xb8\x47\xe9\xb3\x6e\x83\x81\xa4\x5c\x2b\x04\x4a\x05\x1a\x9f\xc5\x3f\x02\x5d\x40\xf7\xce\x21\xf3\xde\xb8\xb3\xc1\x60\x25\x7d\x56\x2e\xfa\x5c\x17\x03\xff\x28\x95\x37\x56\xff\x8b\xdc\x37\x93\x67\x41\xd4\x90\xdf\xbc\x01\x2e\x0e\x23\x2f\xb8\xa4\xb4\x34\x2b\xcb\x04\xd6\xe1\x63\x05\xbc\xd1\xd2\x91\x8c\x2a\x0b\xb3\x3e\x96\xe8\x13\x72\xa0\xfd\xb4\x54\x5e\x16\x78\x44\xfd\xbb\x4c\xa3\x7f\x72\x3d\x1c\x27\xb3\xe1\x38\x19\xa5\x61\xf5\x35\x93\xca\x33\xa9\xd0\xd6\xc9\xe0\x89\x9d\x1b\x7a\x9b\x76\x74\x46\xa3\x2e\x4b\xd1\x36\x94\x9d\xdf\x8e\xaf\x2e\xc3\x28\x99\xdc\x75\xa4\x62\x9b\xf3\xa0\x74\x68\x03\xf1\xc5\x83\x90\x16\xa8\x09\x2c\xb5\xdd\x30\x21\xea\x3c\xd0\x4b\x68\x38\xa5\xd9\x9e\x44\xea\xa0\x16\xc6\xc0\x65\xf0\x89\x40\x5d\xee\xca\x5d\x19\x87\xb7\x1d\xbe\x7f\xd9\x6f\x2e\x98\x67\x6f\x5f\xb3\xe8\x0e\xdb\x0b\x15\x69\x95\xaf\x5f\x33\x65\x6b\xc0\x9d\xa9\xea\xb9\xf3\x82\x37\x6e\x9a\x3e\x4a\xcf\x33\xf0\x3a\xf4\x0c\x5c\x2b\x8f\x4f\x9e\xdc\x4e\x47\x69\x03\xfb\xe5\x53\x12\x42\x83\x1a\x6f\x60\x4d\x9b\xf5\x17\x35\xbc\xb4\xba\x08\x49\x63\xb1\x92\xba\x74\x20\x0b\xb6\x42\x72\x31\xb9\xf9\x08\x94\xd6\xe9\x38\xbc\x66\x7b\x9b\x75\x0c\x47\x4e\x60\xb8\x73\xe7\x17\x4e\xf8\x16\x53\x5e\x0d\xcf\x47\x57\xa0\x58\x81\x71\x14\x7a\xaa\xcb\x21\x7c\x55\xa3\x95\x38\xea\xb5\x12\xda\xa7\x02\xdc\x38\xea\x05\xf9\xec\xc3\xcc\xf2\x4c\x7a\xe4\xbe\xb4\x18\x47\x4f\x3f\xbf\xbf\x7f\xff\xd3\xc1\xa2\x7b\xc1\x3c\xc6\x51\x2f\x99\xdc\x75\x4f\x52\x42\xdb\x16\x40\x6b\xd3\x7d\xb6\x78\x56\x77\x1c\x3d\xfd\x60\x3f\x3f\xe8\x0a\x7e\x6d\x07\xbf\x1b\xab\xbd\x56\x05\x93\x79\x6d\xf4\xdf\xf6\xab\x4a\x9b\xc7\xd1\x57\x3d\x05\x54\x68\xfe\x80\x76\xbf\xd4\x95\x45\xc1\xec\x3a\x8e\x2e\x43\x42\x7e\x46\xd1\x2a\xf7\x7f\xd8\x04\x3a\x6e\xa5\xf1\x81\xa7\xd7\xcb\x2b\xee\xa8\x5f\x1b\x8c\xa3\x95\x3c\x08\x7f\x03\xde\x7a\xb9\xc5\xe5\xb1\x8b\x12\xd2\x79\x2b\x17\x65\x0d\x90\x3a\xae\xeb\xa3\x4d\xb9\xc8\x25\x8f\x08\x19\x25\xb3\xf4\xe3\xcd\x64\x9c\xcc\xe0\xef\xf6\xf2\xff\xf9\x2f\x00\x00\xff\xff\xe6\x8c\x64\x5d\x8e\x07\x00\x00")

func DockerTemplatesDockerfile_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_alpineTmpl,
		".docker/templates/dockerfile_alpine.tmpl",
	)
}

func DockerTemplatesDockerfile_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_alpine.tmpl", size: 1934, mode: os.FileMode(420), modTime: time.Unix(1577097872, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_debianSlimTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x51\xcb\xda\x30\x18\x85\xef\xf3\x2b\x5e\x1c\x78\x31\x49\x33\xf0\x62\x20\x73\x28\x5b\x37\xca\x66\x2b\x59\x55\x64\x8e\x11\xdb\x2c\xcd\x6c\x93\x90\xbc\x75\x8a\xf8\xdf\x87\xd5\x8f\x4f\xbd\xca\x39\x79\x08\x3c\x27\x5f\x78\x36\x03\x77\xc4\xca\x9a\xd1\x30\x7a\x4f\x43\xad\x1b\x1a\xd0\x4b\x2c\x2a\x42\x66\xd3\x24\xcd\xa7\x49\x1a\x73\x38\xbc\xf3\x87\x9d\xdd\xc3\x87\x5b\x98\x38\x6f\xd1\x9a\x46\xe8\x3a\x2a\x6c\xf3\x91\x90\x29\xff\x0a\xf9\x2a\x49\xf3\xdf\xcb\x98\xff\x48\xb2\x74\x7c\x3a\x45\x4b\xe9\x83\xb6\xe6\x7c\x26\xe4\x53\x36\x5f\x43\x69\x8b\x9d\xf4\x54\x1a\xf4\x47\x67\xb5\xc1\x28\x54\xc0\x1e\x2a\xe1\x8b\x14\x8a\xaa\xb1\x25\x0c\x0e\xcf\xac\x83\x1b\x22\x1c\x52\x25\x11\x5a\x57\x0a\x94\xd0\xef\xdf\xdd\x69\x13\x50\xd4\x35\xd0\x23\x6c\x88\xd2\xf8\xf2\xc6\x69\x37\x7c\x85\xb4\x75\xca\x8b\x52\x02\x95\xa0\x34\x0e\x2a\x44\x17\x46\x8c\x29\x8d\x55\xbb\xbd\x4c\x62\xf8\x4f\x1b\x74\xde\xfe\x95\x05\x5e\x4b\xa4\x34\x4e\xee\x57\xbd\x91\x4a\x8d\x3b\xf4\x6c\x56\xd4\x52\x18\x10\x2d\xda\x6b\xea\x14\x7d\x03\xd4\xff\x01\xb6\x17\x9e\xd5\x7a\xcb\x84\x43\x56\xeb\x80\x81\xbd\x05\x86\x8d\xbb\x1c\x17\xd6\x45\x42\xe2\x34\xe7\xeb\x79\x96\xa4\x39\xfc\xec\x3d\x7e\x44\xef\x17\x59\x66\xdf\x17\xb3\x18\xae\x66\x64\x95\xf1\x6f\x9f\x13\x0e\xcc\xba\x9b\x2c\x2b\x05\x0a\xf2\x3f\x00\x00\xff\xff\xd3\x2b\x6a\xe0\xe1\x01\x00\x00")

func DockerTemplatesDockerfile_debianSlimTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_debianSlimTmpl,
		".docker/templates/dockerfile_debian-slim.tmpl",
	)
}

func DockerTemplatesDockerfile_debianSlimTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_debianSlimTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_debian-slim.tmpl", size: 481, mode: os.FileMode(420), modTime: time.Unix(1576950484, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_ubuntuTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x5d\x8e\xd3\x30\x14\x85\xdf\xbd\x8a\xab\x41\x1a\x01\xa3\xc4\x8c\xe6\x89\x11\x83\xa6\x82\x00\x11\x34\xa9\xdc\xb4\x55\x45\x11\x72\x12\xe3\x18\x12\xdb\xb2\xaf\x81\xb4\xea\x82\x58\x07\x1b\x43\x4d\x8b\xfa\xf3\xe4\x7b\xcf\x67\x59\xdf\xf1\x3b\x96\x8f\x21\x94\x41\x63\xb8\xbf\x7d\x19\xdf\xbe\x20\x64\x3c\x4a\xb3\x62\x94\x66\x09\x83\xe9\xdf\x3f\x25\xf7\xa8\x84\x86\x0f\x26\xac\x05\xc2\xd3\xde\x98\xb5\x32\x71\x65\xba\x67\xf0\xca\x8b\x03\x7e\x3c\xc6\xaf\x09\x19\xb1\xf7\x50\x2c\xd2\xac\xf8\x3a\x4f\xd8\x34\xcd\xb3\x87\xcd\x26\x9e\x0b\xe7\x95\xd1\xdb\x2d\x21\x6f\xf2\xc9\x12\x6a\x53\xfd\x10\x2e\x12\x1a\x5d\x6f\x8d\xd2\x18\xfb\x06\xe8\xd9\x4a\xd8\x2c\x83\xaa\xe9\x4c\x0d\x37\xbf\x2f\xd9\x00\x57\x84\x5b\x8c\xa4\x40\x08\xb6\xe6\x28\xe0\xfa\xfa\x24\x53\xda\x23\x6f\x5b\x88\x7a\x58\x11\xa9\x10\x56\xc4\xf6\xd8\x18\x7d\x17\x59\x65\xff\xbf\x60\x95\xbd\x3b\x5e\x8d\x82\x95\x8e\xd7\x02\x22\x01\x52\xe1\x4d\x83\x68\xfd\x3d\xa5\x52\x61\x13\xca\x5d\x41\x8a\xbf\x94\x46\xeb\xcc\x77\x51\xe1\x7e\x89\xa5\xc2\xc7\xd3\x8e\x4f\x84\x94\x0f\x03\xba\xf4\xac\x5a\xc1\x35\xf0\x80\x66\x3f\x0d\xc2\xae\x83\xc8\x7d\x03\xfa\x93\x3b\xda\xaa\x92\x72\x8b\xb4\x55\x1e\x3d\x7d\x0e\x14\x3b\xbb\x3b\x76\x6c\x18\x09\x49\xb2\x82\x2d\x27\x79\x9a\x15\xf0\xf9\xea\xfc\x5b\xae\xbe\x90\x79\xfe\x69\x36\x4e\x60\x6f\x46\x16\x39\xfb\xf8\x36\x65\x40\x8d\x3d\xc8\xd2\x9a\x23\x27\xff\x02\x00\x00\xff\xff\xe9\x63\x67\x16\xf9\x01\x00\x00")

func DockerTemplatesDockerfile_ubuntuTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_ubuntuTmpl,
		".docker/templates/dockerfile_ubuntu.tmpl",
	)
}

func DockerTemplatesDockerfile_ubuntuTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_ubuntuTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_ubuntu.tmpl", size: 505, mode: os.FileMode(420), modTime: time.Unix(1576950475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xce\xc9\xcc\xe5\x4a\xcc\x29\xc8\xcc\x4b\xe5\xf2\x4d\xcc\x4e\x4d\xcb\xcc\x49\xe5\x4a\xc9\x4f\xce\x4e\x2d\xd2\x4d\xce\xcf\x2d\xc8\x2f\x4e\xd5\xab\xcc\xcd\x41\x17\xd2\x02\x0b\xea\xa5\x67\x96\x80\x09\x7d\x08\xa9\x05\xa5\xb4\xb8\x00\x01\x00\x00\xff\xff\x78\xa9\x74\xfb\x57\x00\x00\x00")

func DockerTemplatesDockerignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerignoreTmpl,
		".docker/templates/dockerignore.tmpl",
	)
}

func DockerTemplatesDockerignoreTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerignore.tmpl", size: 87, mode: os.FileMode(420), modTime: time.Unix(1576745854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesEnvTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\x83\x30\x18\x86\xef\xfe\x8a\xd0\xee\xaa\xd3\x42\x27\x1d\xe4\xf0\x69\x83\x64\xb5\x2a\x26\xba\xde\xc4\x39\xc7\x02\xd3\x43\x23\x74\x10\xf2\xdf\x87\x2e\x5a\xe9\xed\x7b\x9f\x97\xf7\xe1\xdb\x22\x7e\x13\xfd\x60\xf1\x77\x9a\xf0\xaa\x0c\x59\x55\xe4\x31\x56\x0a\x39\x65\x23\x8b\x3c\x46\x5a\x9b\x8e\x43\x34\xf1\xa3\xb8\x22\xad\x95\x12\x5f\xc8\x09\x6a\xd9\x6a\x6d\x2b\xd5\xf6\x9f\x23\xfb\x27\xf7\x4d\x49\x72\x46\xd3\x64\xb5\x33\x45\x02\x67\xc2\x32\x08\xc9\x54\xa5\xb7\xbe\x5d\x95\x01\x30\x82\x87\xd5\x5b\xf4\x0c\x11\xc1\x4f\xea\x61\xab\x9f\x67\x34\x2e\xf4\xeb\x9c\x38\x44\xb3\x2a\xa2\x47\x7c\xf0\x7d\x93\x0a\x93\xac\x2d\x22\x3f\xb5\x1c\x44\x23\xdb\xfa\xda\x7c\x5b\x24\x06\xc6\x69\xb8\xfc\xeb\x3b\xae\xe3\x2d\x34\x4b\x73\x8e\x0f\x3b\xd7\x5d\xc8\x1b\x94\x50\xa5\x19\x67\x78\x63\x5f\x3a\xb9\xf7\x76\x1d\xb2\x2f\xdd\xef\x78\x6c\x46\xfd\x49\x7c\xd4\x7d\x6d\x9d\x68\x00\x09\x3c\x68\x0d\x9c\xac\xfb\x17\xd7\xfb\x0b\x00\x00\xff\xff\xd4\x69\x13\x70\x83\x01\x00\x00")

func DockerTemplatesEnvTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesEnvTmpl,
		".docker/templates/env.tmpl",
	)
}

func DockerTemplatesEnvTmpl() (*asset, error) {
	bytes, err := DockerTemplatesEnvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/env.tmpl", size: 387, mode: os.FileMode(420), modTime: time.Unix(1576920292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x5b\x6f\xda\x30\x14\x7e\x8e\x7f\xc5\x27\x91\x28\x8d\x26\x27\x94\x49\x5d\x6b\x0d\xa9\x57\x0d\xa4\x35\x54\x2d\x5d\xd5\x3e\x6c\x32\x89\x21\x11\xb9\xc9\x36\xb0\x0d\xf8\xef\x93\x1d\x18\x68\xea\x5e\x4e\x7c\x2e\xdf\xe5\xc4\x1e\xde\x5f\x7d\xb9\x03\xeb\xe3\x67\x57\xfe\x9e\xd7\xcb\x48\xaf\xf2\x4a\xd3\xb4\x4e\xe6\x42\x92\x6f\x77\x8f\x4f\xc3\x51\xcc\xfa\x70\x4f\x54\x26\x8a\x02\x33\x29\x1a\x8c\x5f\x86\xf1\xf8\xc7\xae\x89\x5b\x3b\x3b\xcd\x0b\x81\x0d\xf8\x6a\x0e\x7f\xdd\xc8\xbc\xd2\x70\x7b\x5b\x1f\x1b\x24\x0b\x0d\x9a\xc2\xef\xfb\xa0\x53\xf4\x02\xb2\xa7\xc5\x31\x6f\xae\x91\x0a\x95\xc8\x7c\x22\x30\xb8\xbb\xba\x0d\xc8\xf5\xe3\x55\x7c\x33\xf8\x77\x48\x8a\x25\x6d\xb8\x54\x02\x94\xf2\xc9\xc4\xa4\x52\x4c\x2d\x04\x1b\x68\x89\x08\x34\x20\xf1\xe8\xa5\xbf\x47\x8d\xdf\xfa\xcf\xe3\x1b\xa4\x5c\x0b\x7c\xf0\x5e\xa9\x57\x52\x2f\x1d\x7b\x03\xe6\xdd\x33\xef\xe9\x2d\x20\xd7\xcf\xc3\xaf\xb7\x46\xa7\x4b\x48\xa7\x03\x2d\x94\x76\x1c\xe6\x98\x6f\x48\x4c\x64\xc4\xd1\x72\x21\x6c\x77\x29\xa4\xca\xeb\xca\x61\x4e\x9a\xab\xa6\xe0\xbf\xf6\x95\x90\xec\x0e\x8c\x38\x97\x22\xc9\x6a\xb8\x27\xbb\x45\x03\x8b\xcc\x4b\x3e\x13\x86\x78\xb2\xc8\x8b\xb4\x4d\xc1\xab\x14\x9a\xcf\xa0\x33\x51\x86\x24\x7c\x18\x8c\xe2\x57\xd6\xf6\x88\x8d\x86\xad\xbd\x0d\xb4\x38\x4a\xed\x97\x72\x39\x43\xbb\x66\x3c\x7a\x09\x40\x35\xdc\xb5\xbd\xcd\x2d\x73\xd7\x3b\xe1\x2d\xc2\x03\xdc\xc8\xbc\x37\xf2\xb7\x56\x70\xb3\xac\xf5\xda\x2c\x54\x46\x5b\xc3\xcc\x31\x09\x76\x24\xb6\x76\x30\x7a\x98\x23\x87\xe3\x91\x65\x0b\x7d\x47\xf4\x7f\x13\x47\x16\x32\x51\x34\xe6\x6f\x3d\xd8\xb7\x94\xd4\x65\xc9\xab\x54\xd9\xf2\x41\xdf\x64\xc4\x04\x30\xdc\xf3\xb9\x30\xaf\x90\x38\x97\x4a\xa4\xa0\x15\x7c\x15\x7d\xef\x74\xa2\xa8\xf1\xe1\x7e\x26\xa4\x83\x4c\xeb\x46\xb1\x28\x52\x9a\x27\xf3\x7a\x29\xe4\xb4\xa8\x57\x61\x52\x97\x11\x8f\xce\x7a\x9f\x3e\x9e\x77\x2f\xa2\xd3\xf3\xde\xd9\x69\xf7\x82\x78\x66\x0d\x46\xfe\x04\x00\x00\xff\xff\x7f\x1a\xa3\x23\x21\x03\x00\x00")

func DockerTemplatesMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesMakefileTmpl,
		".docker/templates/makefile.tmpl",
	)
}

func DockerTemplatesMakefileTmpl() (*asset, error) {
	bytes, err := DockerTemplatesMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/makefile.tmpl", size: 801, mode: os.FileMode(420), modTime: time.Unix(1577094568, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6e\x23\xb7\x15\xbe\x9f\xa7\x38\xeb\x09\x10\xc9\x30\x35\xb2\xbd\x0b\xc8\x42\x12\x34\xb1\xbb\xdb\x45\x83\x24\x5d\x2b\xe8\x85\x61\xc0\x9c\x99\x33\x1a\x46\x1c\x72\x42\x72\x24\x3b\x86\xfb\x0a\x6d\x1f\xa0\xc8\x4d\x6e\x7b\xdf\xe7\xe9\x0b\x34\x8f\x50\x1c\x72\x64\x8d\x64\x39\x59\x18\xe3\x1b\x8b\x87\x87\xdf\x77\x78\xfe\x48\x4e\x0c\x6e\x25\x94\x63\xb9\xce\x16\x68\xa2\xe8\xb3\x57\x8c\xc1\x4c\x9f\x83\x75\xdc\x38\x60\xec\x8b\x28\x8e\x61\xc6\x53\x89\xa0\x0b\x38\xd7\xca\xa1\x72\x36\x3a\x1e\xc1\xd5\x9f\xf4\x0a\x9c\x86\xc6\xe2\xf5\x20\x2e\xf5\x8a\x39\xcd\x1a\x8b\xc3\x08\x80\xa6\xdf\x0a\x63\x5d\x3b\x5b\xd0\xef\xf5\x24\x84\xf9\x73\x83\xdc\x21\x70\x05\x5c\x0a\x6e\xaf\x07\x71\xe6\x25\x8c\x2b\xe6\x25\x43\xcf\x72\xe1\x2d\x63\xe7\xba\xaa\xb5\xc7\x0a\xa6\xb2\x2c\x08\x3a\x80\x7f\x94\xdc\x3a\x91\x59\xe4\x26\x2b\x81\xab\x1c\xfe\x2c\x52\xae\xf8\xf5\x20\xc6\xee\x14\xe3\x2a\x67\x0b\x3f\xd5\x59\x3d\xd3\x06\x6a\xa3\x6f\xef\xae\x07\xb1\xd3\x86\xf9\xdf\x5d\xf4\x5b\xcc\x1a\x87\x30\x23\x7f\x41\xa6\xab\x8a\xab\x9c\xa0\x83\x9c\x05\x3f\xb6\xf2\xad\x75\xbc\xaa\x25\x5a\x72\x5f\x77\x55\x90\x32\x5d\x74\xd7\xf8\x0d\x73\xe7\xbd\x91\xd3\xff\xe0\x83\x2f\x1b\x57\x6a\x43\x42\x1e\x7e\x05\xf1\xaf\x3f\xff\xf2\x2f\x1f\x12\x23\xd2\xc6\x09\x35\xbf\x1e\xc4\x2c\xeb\x8c\x83\xda\x65\xa9\x57\x70\xa7\x1b\x03\xb6\xa9\x6b\x6d\xdc\xf5\x20\xb6\x14\x2f\x92\xb1\x56\x36\xdc\x84\x1e\x55\xee\x03\x4f\x91\xdf\xc4\x98\x86\x31\x3c\x06\x35\x8a\xde\x6a\x03\x45\x3b\xe4\x73\x3c\x22\x0a\x50\x88\x39\x2d\x48\x1b\x21\x73\x10\x15\x9f\x23\x84\x80\x8d\xa2\xe8\xe6\xe6\xc6\x96\x28\x65\x14\x24\x50\x37\x52\xc2\xed\xd8\xfc\xb4\xd0\xcb\xc4\xfb\x6f\x7a\x7f\x0f\xa3\x0b\x61\xe0\xe1\x81\xb4\xa3\x48\x1b\x78\xb2\x6e\x1d\xfa\x40\x12\xf4\x62\x32\x6e\x27\xa3\x36\xeb\xfc\x30\x64\xfa\xe7\x07\x2d\xb9\x69\x14\x30\x27\x80\x31\x53\x01\x5b\xc2\x27\x83\x7a\x95\x0f\x13\xf2\xfa\x34\xd1\xb5\x4b\x78\x5d\xfb\xd1\xb3\x16\xde\xdf\x8b\x02\x46\x5f\x71\x8b\x0f\x0f\xec\xfe\x1e\x55\x4e\xb2\x20\x81\x87\x87\x03\xe2\x87\xed\xbf\xe0\xc4\xe7\x12\x35\x8a\x2e\x7d\xd5\x91\xc3\x6b\x40\xc9\xb7\x95\x16\xad\xd2\x73\xee\x68\x6a\x60\x39\x6c\xa5\xfa\x7a\xcd\xda\x47\xf0\x98\xe5\xdb\x5c\x4e\x9b\xdf\xc3\x25\x95\x0d\x8c\x2f\x82\xcb\xc0\x21\x94\x43\x53\xf0\x0c\x9f\xd8\xbf\xb3\xcb\x50\x22\x41\xf0\xbb\x74\x1d\xdd\x6d\xa8\x60\xc5\xac\x44\x05\xba\x46\x05\x42\x85\xe4\x4e\x8d\x5e\x59\x34\x70\x55\x3a\x57\x4f\x93\x44\xea\x8c\xcb\x52\x5b\x37\x3d\x1d\x8f\xc7\xd7\x83\xbd\xe2\x61\x1b\x91\x7d\xc5\xfd\xbc\x89\x3e\x77\x96\xf0\xc9\x77\x7f\xbd\x68\xb3\x62\x3b\x63\xbc\x0c\x58\xb9\x71\xd8\x9e\x2e\x10\x45\x5f\x42\x81\x2b\xb0\x82\x66\x60\xdd\x11\xc8\x7b\x25\xca\xda\x97\x53\xa3\x72\x34\xd6\x79\xe7\x95\x08\x29\xb7\x22\xb3\xd3\x8e\x61\x31\x5c\x66\x86\xd7\x08\x5c\x4a\xaf\x32\x5b\x21\x3a\x0b\x85\xd1\x15\x95\xa9\xf9\xd4\x82\x13\x15\x4a\xa1\x70\xf4\xc2\x6d\x34\x1e\x48\xf1\x0a\xb7\xe9\xba\x54\x44\xbd\x43\x07\xd4\x89\xb8\x50\x42\xcd\xa1\x16\x0a\x79\x5d\xcb\x1e\x6c\x00\x66\x37\x70\x51\x0c\xe7\x5a\x4a\xcc\x1c\xe0\x12\xcd\x5d\xb0\x69\x2f\x73\xb0\xd3\x6b\x69\x85\x9f\xda\xd6\xfc\x97\x1a\xb4\xdf\x88\xd6\x25\xae\xe4\x0e\x56\x68\x10\x1c\x09\x30\x87\x14\x0b\x6d\x10\x4e\xc6\xc7\xaf\xfb\x70\x01\xbb\x43\x6e\x3c\xda\xc7\x90\x5b\xa1\x32\xcf\xfd\x86\x1d\x9f\xb0\x93\x71\x2f\x16\xec\x82\x6e\x72\xa3\xb5\x83\x92\xd6\xf2\x25\x52\x42\x17\x42\xe2\xc8\xdd\xba\x3e\x98\x37\x68\xcf\x53\x72\x0b\x1c\x32\xbb\x0c\xaa\xfd\x91\x12\x24\x63\x99\x5d\x12\x35\x1d\xab\x5d\x9f\x57\x62\x5e\x3a\x28\x89\xbf\x2e\xb5\x42\x50\x4d\x95\xa2\xb1\xa0\x0d\x60\xc5\x85\x04\x9e\xe7\x06\xad\xc5\x17\x67\xdd\x56\x04\x02\x26\x63\x9e\x2c\x8a\xe1\x42\xd8\x5a\xf2\xbb\xb5\x4d\xe9\x1d\x2c\xd1\x88\x42\x60\xee\x57\xb5\x56\xce\xda\xa4\xe0\xa9\x6e\x1c\x5c\x68\xc5\x65\x0e\x33\xd3\x54\xf5\xcb\x4b\xe1\xa0\x0b\x73\x00\x8c\xad\x89\x9f\x44\xc8\x17\x21\x07\xc3\x73\xd1\xf8\x66\x78\xbc\xa8\x80\x1b\xdd\xa8\x1c\x38\xd4\x92\x67\x48\x0d\xfd\x3b\x6e\x44\x08\x27\xde\xd2\xed\x84\xfa\x4b\x05\x2f\x32\xcf\xe9\x1e\x52\x61\xfe\xf9\xc1\xeb\xc9\x68\x32\x19\x8f\x5f\x4f\x8e\x4e\x46\xa7\x93\x37\x67\xa7\x67\x47\xc7\x8b\xea\x60\x6f\x6a\x7c\xdb\xb8\xba\xd9\x14\xa4\xde\x3e\xf1\x7b\x88\x3d\x5a\xd8\x9c\x63\x67\x27\xe3\xdf\xa8\x3e\x5f\x0a\x3f\x58\xad\xfa\xae\x05\x8f\xc9\x18\xfd\x23\x76\xe2\xda\x6c\x98\xc3\xe5\x5f\xbe\x16\x0e\x81\x40\x52\x6e\x7b\x21\x66\x6b\xb0\xd0\xd9\xec\x28\x4f\x3b\x27\x12\x1d\xde\xce\xa1\x59\x9f\x43\x85\x96\x52\xaf\xd0\xf4\x53\x6c\x8f\x68\x1b\xc6\x55\xa9\x77\x58\x5b\xce\x3e\x19\x85\x9a\x77\x5a\xfc\xce\x29\xcf\x03\x6b\xc9\x2d\x14\x7c\xa9\x8d\x70\x98\xf7\xc3\xdd\xa2\xd9\x0e\x77\x41\xb7\x75\xcf\x27\x54\xa1\x4d\xc5\x9d\xd0\x8a\x8a\x16\x8d\xcf\xae\xb0\xf5\x5e\x77\x0e\x8c\xde\x8c\x86\x11\x75\x14\xc3\xf7\x96\xc2\x6c\xa5\x5e\x1d\x41\xda\x38\xc0\xa2\xc0\xcc\x89\x25\x42\x85\xae\xd4\xfe\xe1\x31\xe7\xae\x44\xb3\xd3\x6e\xda\x8c\xa8\x8d\xa6\xcc\x85\xc1\x3b\xaf\x64\xe1\x6f\xa7\x27\xe3\x71\xab\x7b\xf4\xb2\xf6\xf2\x5e\x65\xb2\xc9\xc9\xd6\x0f\x18\xb2\x72\xd8\x4b\x04\x5a\x5b\xb7\xb7\xfe\x63\x23\xb2\xc5\xd3\xcd\x52\x46\x50\x83\x81\xb3\xc7\xdd\xc0\xc0\x37\x7b\xe1\xad\x43\x0b\x66\x6d\xdc\x7e\x97\xf4\x62\xf2\x9a\x23\x8a\xe1\x03\xda\xa6\xf2\xc1\x0a\x17\x78\xff\x35\x81\x9c\xf4\x78\x59\xb4\x35\x66\xe1\x6c\x0a\x57\xb6\xf7\x17\x3d\xd9\xe0\x89\x8f\xc7\x67\xaf\xc7\xa7\x93\xb3\x37\x93\xd3\xf1\x9b\xc9\xe6\x1a\xee\xdf\xd6\xe1\xe9\xea\x9f\xd7\x30\x47\x85\x86\x1e\x8d\xe9\x5d\xc0\x0b\xcf\xd8\x8c\x53\x42\xd3\xa1\x44\x80\xd2\x41\x48\xf0\x9c\x9c\x4d\x5a\x51\xf4\x35\x3a\x72\x1f\x9d\xb7\x4a\xaf\x60\xea\x1f\x12\xd0\x3e\xd4\xa3\xe8\xd7\x9f\xff\xf9\x0b\x1c\x1e\xb6\x4f\xc7\xc3\xc3\xe8\x10\xde\x09\x57\x36\xe9\x14\xae\xfe\xd0\x4a\xc3\x93\xc4\x4e\x93\x64\xee\xa7\x46\x99\xae\x92\x76\x6e\xf8\x08\x61\x31\xa5\xb3\x03\x55\xa9\x9b\x9f\xd0\xed\x40\xed\xcc\xee\x85\xdc\xd1\x09\x96\x3e\xf9\x76\x10\x45\x9b\x91\x56\xf6\x08\x84\xb5\x0d\x86\x83\xa4\x40\xee\x1a\x83\x60\xf0\xc7\x06\x2d\x35\x1e\x83\xb0\x42\x99\xe9\x0a\x5f\x7d\x96\x1a\x48\xbe\x78\x8b\x28\xa1\x30\xe8\xaf\x7b\x59\x89\xd9\x02\xae\x5a\x84\x9a\xcf\xf1\xb7\xf6\x9a\x74\x3f\x41\x25\x61\xd1\x70\x14\x5d\x22\xc2\xd5\xcd\x28\xc9\x75\x66\x93\xf3\x6f\xbf\x99\x7d\x78\xff\xd5\xf7\xb3\xf7\xdf\xbc\x1b\x55\xf9\xcd\x47\xe3\xd9\x24\x95\x3a\x4d\x2a\x6e\x1d\x9a\xbd\x58\x43\x28\x28\x1d\xd0\x71\x21\xed\xc8\x3b\xe7\xc9\x17\x93\x28\x7a\x47\x6d\x86\xc3\x7f\xff\xfd\x8f\xff\xfd\xe7\xef\x20\x0a\x70\xa5\xf0\xe5\xf3\x03\xf5\x46\x7a\xb0\x61\x4e\x4b\x5e\xfd\x3f\x00\x00\xff\xff\xca\x27\x72\x98\x52\x13\x00\x00")

func DockerTemplatesReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadmeTmpl,
		".docker/templates/readme.tmpl",
	)
}

func DockerTemplatesReadmeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme.tmpl", size: 4946, mode: os.FileMode(420), modTime: time.Unix(1576951190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdd\x6e\x23\xb7\x15\xbe\xe7\x53\x9c\xb5\x02\x44\x32\x4c\x8d\x6c\xef\x02\xb6\xa1\x18\x4d\xec\xee\x76\xd1\x20\x49\xd7\x0a\x7a\x61\x18\x30\x67\xe6\x8c\x86\x31\x87\x9c\x90\x1c\xc9\x8e\xe1\xbe\x42\xdb\x07\x28\x72\x93\xdb\xde\xf7\x79\xfa\x02\xcd\x23\x14\x87\x1c\x79\x24\x59\xce\x2e\x0c\xc5\x37\xd6\x1c\x92\xdf\x77\xfe\x39\x67\x7a\xe0\xe7\x52\x7b\x9e\x9b\xec\x06\x2d\x70\x10\xaa\x96\x1a\x19\x1b\xbf\xe2\x1c\x26\xe6\x0c\x9c\x17\xd6\x03\xe7\xa7\xac\xd7\x83\x89\x48\x15\x82\x29\xe0\xcc\x68\x8f\xda\x3b\xb6\x3f\x84\xcb\x3f\x99\x39\x78\x03\x8d\xc3\xab\x7e\xaf\x34\x73\xee\x0d\x6f\x1c\x0e\x18\x00\x2d\xbf\x95\xd6\xf9\x76\xb5\xa0\xdf\x8b\x45\x88\xeb\x67\x16\x85\x47\x10\x1a\x84\x92\xc2\x5d\xf5\x7b\x59\x90\x70\xa1\x79\x90\x0c\x02\xcb\x79\x50\x91\x9f\x99\xaa\x36\x01\x2b\xea\xcc\xb3\x28\x58\x02\xfc\xa3\x12\xce\xcb\xcc\xa1\xb0\x59\x09\x42\xe7\xf0\x67\x99\x0a\x2d\xae\xfa\x3d\x5c\x5e\xe2\x42\xe7\xfc\x26\x2c\x2d\x9d\x9e\x18\x0b\xb5\x35\xb7\x77\x57\xfd\x9e\x37\x96\x87\xdf\xcb\xe8\xb7\x98\x35\x1e\x61\x42\x8e\x83\xcc\x54\x95\xd0\x39\x41\x47\x39\x8f\x0e\x6d\xe5\x2b\xe7\x44\x55\x2b\x74\xe4\xbe\xe5\x53\x51\xca\x4d\xb1\x7c\x26\x18\x2c\x7c\xf0\x46\x4e\xff\xa3\x0f\xbe\x6c\x7c\x69\x2c\x09\x45\xfc\x15\xc5\xbf\xfe\xfc\xcb\xbf\x42\x48\xac\x4c\x1b\x2f\xf5\xf4\xaa\xdf\xe3\xd9\xd2\x73\xdc\x76\x51\x9a\x39\xdc\x99\xc6\x82\x6b\xea\xda\x58\x7f\xd5\xef\x39\x8a\x17\xc9\x78\x2b\x1b\x74\xa1\x47\x9d\x87\xc0\x53\xe4\xbb\x18\xd3\x63\x0f\x1e\x83\xca\xd8\x5b\x63\xa1\x68\x1f\xc5\x14\xf7\x88\x02\x34\x62\x4e\x07\xd2\x46\xaa\x1c\x64\x25\xa6\x08\x31\x60\x43\xc6\xae\xaf\xaf\x5d\x89\x4a\xb1\x36\xed\xea\x46\x29\xb8\x1d\xd9\x9f\x6e\xcc\x2c\x09\xfe\x3b\xb9\xbf\x87\xe1\xb9\xb4\xf0\xf0\xc0\xdb\x94\xbc\xbe\xbe\x66\xcc\x58\x78\x72\x7c\x91\x01\x91\x2b\xee\xeb\x91\x8e\x6b\x89\xd5\x9d\x0b\x8f\x31\xf3\xbf\xd8\x69\x75\xb0\x8d\x06\xee\x25\x70\x6e\x2b\xe0\x33\xf8\xac\x5f\xcf\xf3\x41\x42\xce\x3f\x49\x4c\xed\x13\x51\xd7\xe1\xe9\x59\x45\xef\xef\x65\x01\xc3\xaf\x84\xc3\x87\x07\x7e\x7f\x8f\x3a\x27\x59\x94\xc0\xc3\xc3\x0e\xf1\xc3\xea\x5f\xf4\xe5\x73\xf9\xca\xd8\x45\x28\x3e\xf2\x7b\x0d\xa8\xc4\xea\xa6\x9b\x76\xd3\x73\xee\x68\x6a\xe0\x39\xac\x64\xfc\xe2\xcc\xc2\x47\xf0\x98\xec\xab\x5c\xde\xd8\x8f\xe1\xd2\x96\x0e\x26\xd4\xc2\x45\xe4\x90\xda\xa3\x2d\x44\x86\x4f\xf4\x5f\xb3\x32\x56\x4a\x14\x7c\x94\x6e\x69\xef\x2a\x54\xd4\x62\x52\xa2\x06\x53\xa3\x06\xa9\x63\x8e\xa7\xd6\xcc\x1d\x5a\xb8\x2c\xbd\xaf\x4f\x92\x44\x99\x4c\xa8\xd2\x38\x7f\x72\x38\x1a\x8d\xae\xfa\x1b\xc5\x83\x36\x22\x9b\x6a\xfc\x79\x15\x43\xee\xcc\xe0\xb3\xef\xfe\x7a\xde\x66\xc5\x6a\xc6\x04\x19\xf0\xb2\x73\xd8\x86\x66\xc0\xd8\x97\x50\xe0\x1c\x9c\xa4\x15\x58\x34\x06\xf2\x5e\x89\xaa\x0e\x55\xd5\xe8\x1c\xad\xf3\xc1\x79\x25\x42\x2a\x9c\xcc\xdc\x09\x63\x6c\x9c\xa3\x17\x52\xb9\x53\x36\x76\x4d\x55\x09\x7b\x77\x3a\x4e\x4f\x2f\x32\x2b\x6a\x04\xa1\x54\xd8\x3e\x99\x23\x7a\x07\x85\x35\x15\x55\xae\xfd\xdc\x81\x97\x15\x2a\xa9\x71\x38\x4e\xd2\xd3\x71\xb2\x38\xcb\xc6\x99\xc9\xf1\xf4\x85\x76\x36\x01\x5d\x8b\x0a\xd9\x38\x89\x40\xe3\xa4\x53\xf0\x63\xaa\x2e\xab\x49\x6a\xaf\xa9\x0a\xd4\xd8\x84\xd4\x52\x4f\x81\x1a\x83\xa8\x6b\xf5\x7b\xe9\x0f\xdc\x75\x1c\x9b\x8c\xe9\x52\xa2\x07\x67\x46\x29\xcc\x3c\xe0\x0c\xed\x5d\xb4\x62\xa3\xae\xd1\xb2\xb0\xcb\x68\xfc\xdc\xb5\x06\x0f\x5f\xa8\xed\xb2\x86\x9d\x12\xad\x13\x7d\x29\x3c\xcc\xd1\x22\x78\x12\x60\x0e\x29\x16\xc6\x22\x1c\x8c\xf6\x5f\xbf\x94\x71\xd9\x3f\xfc\x0e\x85\x0d\x68\x9f\x42\xee\xa4\xce\x02\xf7\x1b\xbe\x7f\xc0\x0f\x46\x5b\xd1\x60\x1d\x94\xf5\xa0\xcd\xa6\x56\x0f\x2a\x17\x27\x66\x48\xa5\x54\x48\x85\x43\x7f\xeb\xb7\xc1\xdc\xa1\x3d\x4f\x29\x1c\x08\xc8\xdc\x2c\x6e\xdd\x1e\x29\x41\x72\x9e\xb9\x19\x51\xd3\xbd\xbe\xec\xf3\x4a\x4e\x4b\x0f\x25\xf1\xd7\xa5\xd1\x08\xba\xa9\x52\xb4\x0e\x8c\x05\xac\x84\x54\x20\xf2\xdc\xa2\x73\xf8\xe2\xac\x5b\x89\x40\xc4\xe4\x3c\x90\xb1\x1e\x9c\x4b\x57\x2b\x71\xb7\xd0\x29\xbd\x83\x19\x5a\x59\x48\xcc\xc3\xa9\x56\xcb\x49\x9b\x14\x22\x35\x8d\x87\x73\xa3\x85\xca\x61\x62\x9b\xaa\x7e\x79\x29\xec\x2c\xc3\xec\x00\xe7\x0b\xe2\x27\x11\x0a\x45\x28\xc0\x8a\x5c\x36\xa1\x0d\xef\xdf\x54\x20\xac\x69\x74\x0e\x02\x6a\x25\x32\xa4\xab\xe4\x3b\x61\x65\x0c\x27\xde\xd2\xeb\x11\x75\xa4\x0a\x5e\xa4\x9e\x37\x5b\x48\x85\xe9\x17\x3b\xaf\x8f\x86\x47\x47\xa3\xd1\xeb\xa3\xbd\x83\xe1\xe1\xd1\x9b\xe3\xc3\xe3\xbd\xfd\x9b\x6a\x67\x63\x6a\x7c\xdb\xf8\xba\xe9\x0a\xd2\xac\xbe\x6b\x6c\x21\xf6\xe8\xa0\xbb\x41\x8f\x0f\x46\xbf\x51\x7d\xa1\x14\x7e\x70\x46\x6f\xbb\x16\x02\x26\xe7\xf4\x8f\xd8\x89\xab\x33\x58\xc0\xc5\x5f\xbe\x96\x1e\x81\x40\x52\xe1\xb6\x42\xcc\x17\x60\xb1\xb3\xb9\x61\x9e\x76\x76\x0b\x7a\x6d\xf0\x1e\xed\xe2\xe6\x2a\x8c\x52\x66\x8e\x76\x3b\xc5\xf6\x88\xd6\x31\xce\x4b\xb3\xc6\xda\x72\x6e\x93\x51\xea\xe9\x52\x8b\x5f\x7b\xa7\x10\x91\xb5\x14\x0e\x0a\x31\x33\x56\x7a\xcc\xb7\xc3\xdd\xa2\xb9\x25\xee\x82\xc6\x85\xc0\x27\x75\x61\x6c\x25\xbc\x34\x9a\x8a\x16\x6d\xc8\xae\x68\xfa\x56\x2d\x07\x4e\x43\xab\xe5\x44\xcd\x7a\xf0\xbd\xa3\x30\x3b\x65\xe6\x7b\x90\x36\x1e\xb0\x28\x30\xf3\x72\x86\x50\xa1\x2f\x4d\x98\x7c\xa6\xc2\x97\x68\xd7\xda\x4d\x9b\x11\xb5\x35\x94\xb9\xd0\x7f\x17\x36\x39\xf8\xdb\xe1\xc1\x68\xd4\xee\xdd\x7b\x59\x7b\x79\xaf\x33\xd5\xe4\xa4\xeb\x07\x8c\x59\x39\xd8\x4a\x04\x5a\x5d\x57\x4d\xff\xb1\x91\xd9\xcd\x53\x63\x29\x23\xa8\xc1\xc0\xf1\xa3\x35\xd0\x0f\xcd\x5e\x06\xed\xd0\x81\x5d\x28\xb7\xd9\x25\x5b\x51\x79\xc1\xc1\x7a\xf0\x01\x5d\x53\x85\x60\xc5\xd1\x21\x7c\xce\x20\x27\x3d\xbe\x5e\xba\x1a\xb3\x78\x37\xc5\x57\xb6\xf7\xe7\x5b\xd2\x21\x10\xef\x8f\x8e\x5f\x8f\x0e\x8f\x8e\xdf\x1c\x1d\x8e\xde\x1c\x75\x03\x40\x18\xee\xe3\xec\x1c\xe6\x7b\x98\xa2\x46\x4b\xe3\x6a\x7a\x17\xf1\xe2\x1c\x9d\x09\x4a\x68\xba\x94\x08\x50\x79\x88\x09\x9e\x93\xb3\x69\x17\x63\x5f\xa3\x27\xf7\xd1\x7d\xab\xcd\x1c\x4e\xc2\x08\x03\xed\x97\x02\xc6\x7e\xfd\xf9\x9f\xbf\xc0\xee\x6e\x3b\xb4\xee\xee\xb2\x5d\x78\x27\x7d\xd9\xa4\x27\x70\xf9\x87\x56\x1a\x87\x21\x77\x92\x24\xd3\xb0\x34\xcc\x4c\x95\xb4\x6b\x83\x47\x08\x87\x29\xdd\x1d\xa8\x4b\xd3\xfc\x84\x7e\x0d\x6a\x6d\x75\x23\xe4\xda\x9e\x0e\xba\x96\xa8\x32\xb3\xbf\xbf\x86\xb9\x10\x6f\x04\x5b\x2c\x46\x7b\x9f\x7c\x02\x61\xac\x7b\x32\xda\xed\x81\x74\xae\xc1\x78\x1d\x15\x28\x7c\x63\x11\x2c\xfe\xd8\xa0\xa3\xf6\x65\x11\xe6\x04\x57\xe1\xab\x71\x6a\x21\x39\x7d\x8b\xa8\xa0\xb0\x18\x5e\x1a\xb3\x12\xb3\x1b\xb8\x6c\x11\x6a\x31\xc5\xdf\xf2\x58\xb2\xfc\x49\x2d\x89\x87\x06\x43\x76\x81\x08\x97\xd7\xc3\x24\x37\x99\x4b\xce\xbe\xfd\x66\xf2\xe1\xfd\x57\xdf\x4f\xde\x7f\xf3\x6e\x58\xe5\xd7\x9f\x8c\xe7\x92\x54\x99\x34\xa9\x84\xf3\x68\x37\x62\x0d\xa0\xa0\xa4\x8a\x13\xca\x30\x38\xe7\xc9\x87\x1f\xc6\xde\x51\xb3\x12\xf0\xdf\x7f\xff\xe3\x7f\xff\xf9\x3b\xc8\x02\x7c\x29\x43\x11\xfe\x40\x1d\x96\x06\x4e\xcc\xe9\xc8\xab\xff\x07\x00\x00\xff\xff\xbc\x54\x3c\x6f\x22\x14\x00\x00")

func DockerTemplatesReadme_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_alpineTmpl,
		".docker/templates/readme_alpine.tmpl",
	)
}

func DockerTemplatesReadme_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_alpine.tmpl", size: 5154, mode: os.FileMode(420), modTime: time.Unix(1577098741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_rootTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\x4f\x72\xdb\xb6\x17\xc7\xf7\x38\xc5\x8b\xfc\x9b\xfc\x6a\x4d\x48\x4e\xb7\x1e\x4a\xa9\xe3\xd8\xae\x17\xb5\x3b\x96\x93\x2e\x34\x9e\x31\x04\x3e\x91\x68\x40\x80\x01\x40\xa9\x19\x0d\xcf\xd0\xf6\x00\x9d\x6c\xb2\xed\xbe\xe7\xe9\x05\x9a\x23\x74\x40\x90\xb2\xa2\xca\x31\xe5\x91\x56\xa6\xf9\xfe\x7d\xf8\x05\xf0\xf8\xa8\x03\xb0\x73\x2e\x6d\x90\x28\xf6\x0e\x35\x4c\xa8\xc1\x04\x94\x84\x63\x51\x70\x89\x2f\xe0\xcd\xa4\x94\xb6\x04\x2a\x13\x78\x8d\x13\x4e\x25\x8c\x04\xcf\x09\x89\x0b\xa0\x82\xa7\x72\xd0\x63\x28\x2d\xea\xde\x90\x00\x00\xc4\x14\x32\x8d\xd3\x41\x2f\xb3\xb6\x30\x47\x51\x64\x35\x9d\x71\x13\x30\x1e\x32\x95\x47\x8b\x05\x84\x6f\x99\xf9\x91\xda\x0c\xaa\xaa\x37\x8c\x79\x9e\x82\xd1\xec\xde\x9f\xe7\x69\x68\x32\x8e\x22\x31\x21\x57\x4d\xf8\x5a\x5c\x68\x66\x69\x0f\xa2\x61\x1c\xd1\x07\xaa\x32\xa1\xca\x24\x4c\xb4\x92\xe8\xb2\x3c\x5e\x76\x2d\x80\x16\x3c\x9a\xd0\x24\xc5\xf5\xd2\x91\xb1\xd4\x96\xc6\x11\xbc\x74\x15\x35\x4e\x4d\x94\x21\x4d\x9c\x63\x78\x52\x6a\x8d\xd2\xbe\xd2\x54\xb2\xac\xaa\x96\x8c\x71\x54\x0c\xbb\x4b\x96\x72\x9b\x95\x93\x4d\x7a\x01\x15\x76\xd0\xf3\x76\xa0\x42\x80\x46\x81\xd4\xa0\xe9\xa0\xa4\x8f\x8a\x12\x35\x97\x42\x79\xde\x2f\x1e\xcc\x2a\x4b\xc5\xe3\xca\x76\x84\x13\xd4\xa2\xb1\x2d\xdf\x0e\xf0\x7c\xc2\x1d\x53\x5a\x9a\x76\x47\xb3\x34\xdd\x7a\x1f\x76\xe4\xd8\x5a\xa6\x26\x60\x5f\x3c\x85\xc6\x5d\x31\x45\x54\xec\x6e\xbd\xa6\x4a\xbf\xeb\x0e\xe4\xbc\x37\xb5\x8e\x97\xc6\x7e\x10\x38\x30\x8a\x71\x2a\x9e\x0b\x3a\x41\x31\x38\x73\x99\x77\x81\x68\x2c\xd5\x5b\x1c\xc7\xda\xbd\x23\xe3\xc8\x52\xbd\x13\xc6\x39\xb5\x2c\xc3\x6d\x30\xdb\x88\x8e\xa4\x3f\x39\xf7\x9d\xa0\xaa\x02\x25\x70\x63\xca\x6d\x7a\x9c\xf7\xdf\xd7\xe1\x60\x42\xb9\x77\xe4\xd3\xa0\x02\x1f\xbd\x2f\xb6\x5a\xae\x42\x6f\x4d\x55\xe8\x3d\xab\xf5\x24\xa6\x3d\x8b\xc5\x94\xb4\x9a\x4f\x4a\xab\xb6\x39\x0a\xab\x51\xfb\x22\x13\x9c\xa1\xdc\xa6\xf7\x36\x01\x4f\xe1\xb1\xa8\x43\xfe\x30\x8e\x45\x0d\x2c\xa3\x16\xb4\x52\xf9\x26\x20\x3f\x26\x85\x0f\x65\x7a\x9c\xe1\xab\x13\xa2\xe7\xf0\x2e\x50\x97\xda\xc9\xd0\xe8\x07\xb2\x83\x03\xb8\xc6\xf7\x25\xd7\x98\xa3\xb4\x86\x5c\x4c\xe1\x83\x2a\x21\x51\xf2\xff\x16\x32\x3a\x43\x78\x5d\x4f\xc5\x91\xff\x13\x9c\xa8\xbc\x50\x06\x81\x65\xc8\xde\x41\xbf\x3f\x42\x5b\x16\x8d\x4f\xbf\x0f\x06\x99\xe5\x4a\x12\x12\x27\x68\x29\x17\x66\x48\x62\x53\xe6\x39\xd5\x1f\x86\xf1\x64\xb8\xea\x1d\x47\x93\x61\x1c\xb5\x46\x12\x37\x34\xde\x48\x72\xca\xae\x46\x47\xff\x55\x2a\x51\xcc\x84\x7e\x50\xaf\xb5\xf2\x97\xc1\x54\xe9\x20\xa7\x2c\xe2\xd2\x58\x2a\x44\xd4\x1b\xc2\x96\x11\x50\x8b\x42\x04\x97\xe5\x2f\x1d\xea\xb6\x61\xb5\x7f\x9b\x93\x61\x54\xd6\xdf\x0a\x5f\xab\xff\x48\x64\xc3\xb1\x54\x02\x1a\xc5\xbb\xa3\x31\x1f\xd0\x45\x8b\x75\x57\xb8\xdf\x19\x71\xb4\x5c\x41\x07\xf3\xbd\x9a\x83\x55\x50\x3a\x90\x33\xa5\x61\xca\xb5\xb1\x50\x1a\x9a\xe2\x8b\x7a\xc7\x48\xc4\xc4\x79\x4c\x4a\x2e\x12\xe0\x39\x4d\x11\x9a\x4a\x84\xdc\xdd\xdd\x99\x0c\x85\x20\x29\xb7\xae\x1d\x4a\x84\x20\x48\xb0\xb0\xd9\xe0\x5b\x78\xb4\x31\x10\x96\x40\xd8\x28\x35\xe5\x02\x4d\x34\x1e\xbf\x3d\xbd\x1e\x5d\x5c\x5d\xde\xde\x46\xe3\xf1\xd5\xe8\xf6\x96\xb4\x42\x36\xfb\xb3\x2c\x20\x48\xd6\x6f\xea\x52\xfa\x4f\x3d\x08\x32\xc7\x44\x88\xd2\x50\xd3\x35\x9e\x50\x94\x42\xc0\x62\x11\x7a\xed\x2f\x69\x8e\xa6\xa0\x0c\xab\x2a\x5a\xde\x7c\x45\x0d\x56\xd5\xd1\x78\x7c\x73\x7c\xbe\xac\x5b\xa7\x0e\x2c\x87\x20\xd0\xf9\x56\x09\x96\x28\x37\x19\xca\xe6\x58\xd9\x0c\xe1\xfa\xf4\xf8\xf5\x0f\xa7\x61\x9e\xb8\x89\x0f\x90\xb2\x0c\x66\xa8\x0d\x57\xd2\x84\x6e\x45\x0e\xe0\x78\x46\xb9\xa0\x13\x81\x5e\x6d\x43\x9c\x6a\xbe\xc4\x45\x7d\xe3\xa6\x36\x56\x55\xbd\x80\xc7\xa5\xcd\x94\x76\x4e\x9a\xca\x14\xe1\x7f\x33\x2a\xe0\x68\x00\x61\x63\xa8\x2a\xf2\xf9\xe3\xef\x9f\xa0\xdf\x5f\x2c\x6a\x63\xe8\xe0\xa1\xaa\xfa\x7d\x97\x98\x4f\xfd\xcd\x9b\xb9\xef\x87\x55\xd5\x87\xe6\xfa\x08\xc6\xdf\xb5\x31\xf7\xe6\xdb\x6f\x96\xcd\xcd\xdf\x6b\x17\x76\xcd\xef\x10\x9e\x8d\xdb\xff\xce\x94\x10\x6a\x7e\x1f\xb9\xde\xd3\xbc\x5b\x34\xad\xdd\x36\xe4\x7a\xd9\x0e\xb2\xce\xfe\x7c\x75\x28\x3b\x5c\x2c\x00\x65\xe2\xc4\x58\x79\x98\x73\xff\xaa\x71\xcf\xe2\x2f\x57\x1f\x65\x69\xbc\xe7\xf9\x72\x87\x7e\xe9\xb5\xb9\xc2\x69\x4e\xb9\xa8\x0b\xd4\x57\x47\xd0\xc6\xb5\x86\xd5\x28\x94\x49\xb3\x58\x9f\x3f\x7e\xfa\x03\x4e\xda\xb7\x2c\x97\x29\x21\xf7\xff\x29\x69\x5e\x34\xa3\x57\xfd\x9b\xc4\x14\xa9\x2d\xeb\xaf\x95\xf7\x25\x1a\x6b\x80\x6a\x84\x39\x0a\xa6\x72\x7c\x16\x4f\x34\x44\xc3\x33\x44\x01\x53\x8d\xe8\x4e\xa8\xdf\x63\xe3\x26\x43\x41\x53\x7c\xe8\x09\x57\xbf\x61\xbc\xfb\x61\x48\x46\x88\x30\xbe\xab\xcf\xa3\x89\x4e\xae\x2e\x6f\xae\x2f\x5e\xbd\xb9\xb9\xb8\x3c\x0f\xf3\xe4\xae\x4b\x26\xab\x11\x37\xfc\x52\xb0\x31\xe1\x61\xbd\xfb\x9b\x4e\x54\xef\x7b\x18\x65\x6a\xee\x3a\x8e\x06\x53\x16\x85\xd2\x96\x90\x73\x3e\x43\xa0\xf0\xf7\x9f\xbf\xfd\xf3\xd7\xaf\x4e\x7b\x9b\x71\x03\x85\x56\x3f\x23\xb3\x90\xa1\x28\x30\x71\x21\xcf\x08\xf9\x37\x00\x00\xff\xff\x44\xff\xd5\x58\xec\x11\x00\x00")

func DockerTemplatesReadme_rootTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_rootTmpl,
		".docker/templates/readme_root.tmpl",
	)
}

func DockerTemplatesReadme_rootTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_rootTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_root.tmpl", size: 4588, mode: os.FileMode(420), modTime: time.Unix(1577030887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesTravisTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x51\x6b\xdb\x30\x10\x7e\xf7\xaf\x38\x4c\xa0\x0f\x43\x56\x3b\xd8\x1e\x0c\x1d\x94\x35\x8c\xb2\xb5\x1d\x09\xeb\x5e\x06\xa9\x62\x5d\x6c\xad\xb2\xe4\xea\x24\x27\xd4\xcd\x7f\x1f\x75\xdc\xc4\x49\xdd\xae\x6f\x86\xfb\xbe\xef\x7c\xdf\x7d\x27\xb1\xf0\xe8\x66\x94\x39\x55\xf9\x34\x02\x60\x20\x6d\x76\x87\x0e\x54\x29\x72\xa4\x28\xa2\x20\x6d\x0a\x0e\xef\x83\x72\x28\xa3\x68\x8e\x0b\xeb\x70\xa6\x0c\x79\xa1\xf5\x86\xf2\x84\x01\x57\x02\x5b\x00\x0f\xe4\xb8\xb6\x99\xd0\x7c\xae\x0c\xdf\x88\x31\xd2\xaa\x7c\x3f\x92\x11\x1a\xb2\xae\x25\x64\xc1\x69\x60\x3f\xa0\xf0\xbe\xa2\x94\xf3\x5c\xf9\x22\xcc\x93\xcc\x96\x7d\xc6\xde\xb7\x43\x8d\x82\x90\xb8\xb4\x4b\xa3\xad\x90\xfc\x24\xf9\xf8\x39\x39\xe1\x52\x91\x9f\x69\x65\xc2\x2a\xf1\xc2\x25\xf9\x03\x30\x66\x83\xaf\x82\x87\x1e\xbf\xab\xb5\xdd\xbd\x70\xb0\xaa\x17\xaf\x95\xb3\xa2\xb4\x12\x3e\xac\x60\xa7\xfc\x62\xe2\xff\x60\xfa\xb3\xb6\xe6\x94\xf5\x2b\xc8\x03\xc3\xde\xc1\xe8\xb4\x87\x88\x98\x15\x16\x8e\x9a\x18\x57\x15\x3a\x55\xa2\xf1\x42\xc7\xa9\x77\x01\xd7\x47\xf0\xb8\xd1\xf5\x88\xc0\xd1\x67\x9d\x24\x97\x02\x4b\x6b\x92\xbf\x64\x7b\xcd\x09\x5d\xad\x32\x7c\x4e\x8d\x43\xf2\xc2\xf9\x5e\x90\x58\x66\xcb\xca\x12\x02\x63\x35\x3a\x52\x7d\xb2\x3b\x1c\x8a\xef\x73\xde\x97\x00\xde\xa1\x87\x17\xff\x29\x39\x3e\x50\x65\xb7\xc1\x88\x12\x81\xd1\xed\xf6\xb3\xbc\x85\x2f\x30\xd4\x7c\xbb\xbd\x97\xb5\xad\xf9\xfb\x73\x0e\xb8\xfd\xa6\x13\x9d\x73\x15\x6d\x6f\xab\x7f\x8d\x99\xec\x00\x0b\xa5\x91\x78\x3c\xba\x19\x4f\xa6\x17\xd7\x57\x71\x5b\xbd\xb8\x3c\xfb\x36\x3e\x8d\x57\xc7\xee\xe1\xce\xd6\xdc\x2f\x95\xf1\xe9\xa8\xe9\x30\xfc\x0f\xe7\x6c\x1d\x47\x11\x9a\x3a\x6d\x1a\x27\x4c\x8e\x30\xaa\x85\x86\xf4\x14\x92\x9b\xcd\x3f\xd0\x7a\xdd\x4a\x75\x9c\xd3\xa6\x69\x21\xc9\xb9\x72\xf0\x66\x89\x0b\x5d\x29\x83\x6f\x21\x9e\x42\xd8\x34\x68\xe4\x7a\x1d\x45\x5a\x98\x3c\x88\x1c\x53\x98\x0b\x2a\xa2\xe8\xe5\x9b\xb3\x89\xf9\x80\x37\xf3\xa0\xb4\x04\xc6\xe8\x3e\x08\x2a\x80\x79\x88\x47\xed\xe8\x31\x24\xbb\x55\xf4\x45\x36\x8c\x67\xd4\x21\x06\x5c\x30\xc0\xbc\xda\xc9\xb0\xa2\xdf\xcf\xa0\x5f\x5a\x77\x07\x99\x43\xe1\x11\xcc\x92\xb5\xce\x0e\xed\x32\x54\xc0\xe4\xc0\xbb\xb9\x3d\xb2\x78\x74\x7e\xfd\xf5\xfb\x78\x32\xfb\x79\x36\x9d\xfe\xbe\x9e\x9c\xc7\xf0\xf8\x8c\xd5\x36\x57\x06\x58\xd8\x81\x7e\x4d\xc7\x93\xab\xb3\xcb\xa7\x3f\x62\x95\x20\x5a\x5a\x27\x19\x79\xa9\xf6\xb3\x12\xa8\xd8\x0d\x17\x75\x37\x48\x69\x57\xff\x17\x00\x00\xff\xff\xac\x7b\x43\x4b\xd4\x05\x00\x00")

func DockerTemplatesTravisTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesTravisTmpl,
		".docker/templates/travis.tmpl",
	)
}

func DockerTemplatesTravisTmpl() (*asset, error) {
	bytes, err := DockerTemplatesTravisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/travis.tmpl", size: 1492, mode: os.FileMode(420), modTime: time.Unix(1577019537, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".docker/templates/contributors.tmpl":           DockerTemplatesContributorsTmpl,
	".docker/templates/docker-compose.tmpl":         DockerTemplatesDockerComposeTmpl,
	".docker/templates/docker-entrypoint.tmpl":      DockerTemplatesDockerEntrypointTmpl,
	".docker/templates/docker-sync.tmpl":            DockerTemplatesDockerSyncTmpl,
	".docker/templates/dockerfile_alpine.tmpl":      DockerTemplatesDockerfile_alpineTmpl,
	".docker/templates/dockerfile_debian-slim.tmpl": DockerTemplatesDockerfile_debianSlimTmpl,
	".docker/templates/dockerfile_ubuntu.tmpl":      DockerTemplatesDockerfile_ubuntuTmpl,
	".docker/templates/dockerignore.tmpl":           DockerTemplatesDockerignoreTmpl,
	".docker/templates/env.tmpl":                    DockerTemplatesEnvTmpl,
	".docker/templates/makefile.tmpl":               DockerTemplatesMakefileTmpl,
	".docker/templates/readme.tmpl":                 DockerTemplatesReadmeTmpl,
	".docker/templates/readme_alpine.tmpl":          DockerTemplatesReadme_alpineTmpl,
	".docker/templates/readme_root.tmpl":            DockerTemplatesReadme_rootTmpl,
	".docker/templates/travis.tmpl":                 DockerTemplatesTravisTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".docker": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"contributors.tmpl":           &bintree{DockerTemplatesContributorsTmpl, map[string]*bintree{}},
			"docker-compose.tmpl":         &bintree{DockerTemplatesDockerComposeTmpl, map[string]*bintree{}},
			"docker-entrypoint.tmpl":      &bintree{DockerTemplatesDockerEntrypointTmpl, map[string]*bintree{}},
			"docker-sync.tmpl":            &bintree{DockerTemplatesDockerSyncTmpl, map[string]*bintree{}},
			"dockerfile_alpine.tmpl":      &bintree{DockerTemplatesDockerfile_alpineTmpl, map[string]*bintree{}},
			"dockerfile_debian-slim.tmpl": &bintree{DockerTemplatesDockerfile_debianSlimTmpl, map[string]*bintree{}},
			"dockerfile_ubuntu.tmpl":      &bintree{DockerTemplatesDockerfile_ubuntuTmpl, map[string]*bintree{}},
			"dockerignore.tmpl":           &bintree{DockerTemplatesDockerignoreTmpl, map[string]*bintree{}},
			"env.tmpl":                    &bintree{DockerTemplatesEnvTmpl, map[string]*bintree{}},
			"makefile.tmpl":               &bintree{DockerTemplatesMakefileTmpl, map[string]*bintree{}},
			"readme.tmpl":                 &bintree{DockerTemplatesReadmeTmpl, map[string]*bintree{}},
			"readme_alpine.tmpl":          &bintree{DockerTemplatesReadme_alpineTmpl, map[string]*bintree{}},
			"readme_root.tmpl":            &bintree{DockerTemplatesReadme_rootTmpl, map[string]*bintree{}},
			"travis.tmpl":                 &bintree{DockerTemplatesTravisTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
