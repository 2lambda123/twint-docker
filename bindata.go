// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// .docker/templates/alpine.tmpl
// .docker/templates/debian-slim.tmpl
// .docker/templates/dockerignore.tmpl
// .docker/templates/entrypoint.tmpl
// .docker/templates/makefile.tpml
// .docker/templates/travis.tmpl
// .docker/templates/ubuntu.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DockerTemplatesAlpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xd1\x6f\xd3\x30\x10\xc6\x9f\xf1\x5f\x71\xea\xd0\x5e\x86\xdb\x4d\x7d\x9b\x18\xa2\x2a\x05\x2a\x58\x5a\x85\xae\x68\x02\x84\x5c\xe7\xda\x1c\x73\xce\x96\x73\xc9\x56\x4d\xfb\xdf\x51\xd2\x6e\x74\x53\x27\x84\x78\xb2\xfd\xdd\xc9\xb9\xef\xcb\xcf\xef\xd3\xc9\x39\x18\x17\x88\xf1\xb4\xdf\x3d\x39\x86\xc1\x17\x58\x54\xe4\x32\xa5\xbe\x4e\xd2\x4f\xef\xc6\x29\xf4\x7c\x90\x9e\x09\x41\xa9\x03\x18\x73\x29\xc6\x39\x98\xae\x25\xf7\x0c\x86\x33\xc0\x1b\xc1\xc8\xc6\x41\x86\x01\x39\x43\xb6\x84\xe5\x2b\x20\xb6\xae\xca\x88\x57\x90\xa3\xc9\x30\x96\x6d\xf3\x87\xe1\x50\xa5\x17\x09\x98\x70\x05\x26\xcb\x40\x6b\xf6\xda\x1a\x9b\x23\x84\xf6\xca\xfe\xfd\xaa\x33\xac\x21\xac\xfb\x3a\x50\x00\x47\x8b\xe5\x92\xb6\x4b\x5b\x29\xaa\xd2\xb5\x9b\x95\xb5\xb0\x22\x01\x6b\xb4\xc5\x28\xb4\x24\x6b\x04\x4b\xf0\x01\x79\xe1\x4c\xf9\xa4\xfb\xe8\xe8\x91\x0d\x0a\xc8\x75\x3b\x51\xa0\xd0\x07\xda\xea\x61\xa3\xab\x03\x18\x46\x34\x82\x60\xa0\xa6\x28\x95\x71\x80\x5c\x53\xf4\x5c\x20\x4b\xeb\xc8\x58\xa1\xba\x69\x21\xd9\xdc\xb3\xb5\xa1\x0b\xa8\x91\xeb\x4d\x7a\xcd\x4e\x8d\x92\x39\x4c\x07\xb3\x8f\x67\x9d\x07\xad\xb7\x20\x3e\x7d\xd9\x88\x1d\xf8\xae\x5e\xcc\xc7\xe9\xec\x62\xf0\xf9\xe7\x28\x99\xef\x34\x75\x76\x27\xde\x0d\x19\x88\xc5\x83\xe4\xb8\x77\xb8\x6b\x92\x7c\xd7\x60\x1b\x92\xf3\x8c\xa0\x75\x86\x41\xf2\xb3\x13\xd0\x0b\xb8\xbd\xed\xce\x31\x96\xe4\xf9\xee\x0e\x72\x91\x50\x9e\xf6\x7a\x2b\x92\xbc\x5a\x74\xad\x2f\x7a\x72\x4d\x2c\x21\xfa\x5f\x68\x65\x73\x78\x00\xa2\x19\xf9\xf0\x10\x6c\xf6\x54\x79\x94\xa5\xd6\x55\x58\x45\x93\x61\x23\xef\x6b\xb0\x1b\x96\xf6\x54\xb8\x2a\xc2\x7a\x5f\xa1\xab\xd4\x53\x70\xd5\xf9\x60\x9c\xcc\x06\xe3\x64\x94\xc2\xcd\x71\xbc\xb9\xf2\x35\xbc\xde\x6e\xde\x86\xe8\xc5\x73\x61\xc8\x35\x9e\xde\xfc\x3b\xdb\xb1\x62\xa1\x02\x1f\xc7\xef\xd9\xad\xff\x46\xf3\x96\xdc\x7b\x1a\x9b\x73\x29\x99\xdd\x60\x38\xf4\x61\xfd\xec\xff\x5b\x46\x5f\xb4\xc5\x10\xb1\x26\x5f\x95\x40\x85\x59\xa1\x1a\x4e\xa6\x97\xa0\x75\x53\x3e\x6b\x5f\xea\x1f\xc4\x76\x60\x53\x07\x30\xb8\x27\xf3\x99\x2f\xfc\x1f\x90\xed\xec\x6b\x5f\x45\x30\x21\xb8\xe6\xd1\x91\xe7\x3d\xb9\x8e\x92\x59\x7a\x39\x9d\x8c\x93\x19\x7c\xeb\xb4\xfc\x74\x7e\xa8\xdf\x01\x00\x00\xff\xff\x6b\x5a\x87\xda\x76\x04\x00\x00")

func DockerTemplatesAlpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesAlpineTmpl,
		".docker/templates/alpine.tmpl",
	)
}

func DockerTemplatesAlpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesAlpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/alpine.tmpl", size: 1142, mode: os.FileMode(420), modTime: time.Unix(1576745892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDebianSlimTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x51\xeb\xda\x30\x14\xc5\xdf\xf3\x29\x2e\x0e\x7c\x98\xa4\x19\xf8\x30\x90\x39\x94\xad\x1b\x65\xb3\x95\xac\x2a\x32\xc7\x88\x6d\x96\x66\xb6\x49\x48\x6e\x9d\x22\x7e\xf7\x61\xf5\xcf\x5f\x7d\xca\x39\xe7\x47\xe0\x9c\xfb\x85\x67\x33\x70\x47\xac\xac\x19\x0d\xa3\xf7\x34\xd4\xba\xa1\x01\xbd\xc4\xa2\x22\x64\x36\x4d\xd2\x7c\x9a\xa4\x31\x87\xc3\x3b\x7f\xd8\xd9\x3d\x7c\xb8\x89\x89\xf3\x16\xad\x69\x84\xae\xa3\xc2\x36\x1f\x09\x99\xf2\xaf\x90\xaf\x92\x34\xff\xbd\x8c\xf9\x8f\x24\x4b\xc7\xa7\x53\xb4\x94\x3e\x68\x6b\xce\x67\x42\x3e\x65\xf3\x35\x94\xb6\xd8\x49\x4f\xa5\x41\x7f\x74\x56\x1b\x8c\x42\x05\xec\xc1\x12\xbe\x48\xa1\xa8\x1a\x5b\xc2\xe0\xf0\xcc\x3a\xb8\x21\xc2\x21\x55\x12\xa1\x75\xa5\x40\x09\xfd\xfe\x5d\xa6\x4d\x40\x51\xd7\x40\x8f\xb0\x21\x4a\xe3\xcb\x1f\xa7\xdd\xf0\x15\xd2\xd6\x29\x2f\x4a\x09\x54\x82\xd2\x38\xa8\x10\x5d\x18\x31\xa6\x34\x56\xed\xf6\x32\x89\xe1\x3f\x6d\xd0\x79\xfb\x57\x16\x78\x35\x91\xd2\x38\xb9\x5f\xf5\x46\x2a\x35\xee\xd0\x73\xb3\xa2\x96\xc2\x80\x68\xd1\x5e\x55\x57\xd1\x37\x40\xfd\x1f\x60\x7b\xe1\x59\xad\xb7\x4c\x38\x64\xb5\x0e\x18\xd8\x5b\x60\xd8\xb8\xcb\x73\x61\x9d\x24\x24\x4e\x73\xbe\x9e\x67\x49\x9a\xc3\xcf\xde\xe3\x21\x7a\xbf\xc8\x32\xfb\xbe\x98\xc5\x70\x6d\x46\x56\x19\xff\xf6\x39\xe1\xc0\x82\xdf\xdf\xa2\xff\x01\x00\x00\xff\xff\x15\xde\x8c\x62\xdc\x01\x00\x00")

func DockerTemplatesDebianSlimTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDebianSlimTmpl,
		".docker/templates/debian-slim.tmpl",
	)
}

func DockerTemplatesDebianSlimTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDebianSlimTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/debian-slim.tmpl", size: 476, mode: os.FileMode(420), modTime: time.Unix(1576745957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xce\xc9\xcc\xe5\x4a\xcc\x29\xc8\xcc\x4b\xe5\xf2\x4d\xcc\x4e\x4d\xcb\xcc\x49\xe5\x4a\xc9\x4f\xce\x4e\x2d\xd2\x4d\xce\xcf\x2d\xc8\x2f\x4e\xd5\xab\xcc\xcd\x41\x17\xd2\x02\x0b\xea\xa5\x67\x96\x80\x09\x7d\x08\xa9\x05\xa5\xb4\xb8\x00\x01\x00\x00\xff\xff\x78\xa9\x74\xfb\x57\x00\x00\x00")

func DockerTemplatesDockerignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerignoreTmpl,
		".docker/templates/dockerignore.tmpl",
	)
}

func DockerTemplatesDockerignoreTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerignore.tmpl", size: 87, mode: os.FileMode(420), modTime: time.Unix(1576745854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesEntrypointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\x52\x71\xe0\x02\x04\x00\x00\xff\xff\xc2\x78\x36\x2c\x0f\x00\x00\x00")

func DockerTemplatesEntrypointTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesEntrypointTmpl,
		".docker/templates/entrypoint.tmpl",
	)
}

func DockerTemplatesEntrypointTmpl() (*asset, error) {
	bytes, err := DockerTemplatesEntrypointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/entrypoint.tmpl", size: 15, mode: os.FileMode(420), modTime: time.Unix(1576745907, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesMakefileTpml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xdf\x0f\xd2\x30\x10\x7e\xee\xfd\x15\x97\x6c\x66\xf8\xb0\x15\x66\x82\xd0\x48\x82\x89\x44\x79\xe0\x47\x94\x68\x7c\xd1\xd4\xad\xb0\x65\xdd\xba\xac\x1d\xa8\xc0\xff\x6e\xda\x4d\xc7\x03\xbe\x5c\x7b\xdf\x7d\xfd\xee\xbb\xde\x7a\xf3\xf6\xfd\x0a\xd9\x02\x7f\x8e\x9b\xdf\x85\x3a\x53\x73\xc9\x2b\x13\xa6\x2a\x29\x44\x03\x9f\x57\x1f\x3f\xad\x77\x5b\xb6\x40\x7f\xa4\x33\x21\x25\x9e\x1a\x51\xe3\xe1\xcb\x7a\x7b\xf8\xde\x17\xf1\x9d\xe3\x1e\x73\x29\xf0\x86\xfc\x52\x60\x70\xad\x9b\xbc\x32\xe8\xc7\xf7\x00\x6f\x98\xb4\x06\xc3\x14\x83\x45\x80\xe1\x11\xe3\x97\x00\x9e\x87\x46\x68\x43\x08\x23\xf6\x8c\xc0\x46\x06\xc4\x34\xad\x70\xd5\xb3\x68\x74\xae\x2a\xc2\x48\x9a\xeb\x5a\xf2\x5f\x7f\x91\x08\xfa\x0b\x03\xb2\x14\x49\xa6\xd0\x1f\xf5\x3e\x3a\xdd\xbc\xe4\x27\x61\x85\x7f\xb4\xb9\x4c\xbb\x14\x79\x95\xa2\xe1\x27\x34\x99\x28\x23\x88\xf6\x1f\x76\xdb\xaf\xac\xab\x81\x8b\x56\xad\x1b\x19\xbb\x77\xa1\x41\xff\xea\xfe\xe6\xce\xfc\x6b\xdf\xe1\x8e\xd1\xc0\xb3\x7a\xcf\x28\xff\x30\xc9\xed\x54\xce\x54\xdd\xea\x2c\xec\x9c\x31\x62\x13\xec\x45\x1c\x36\x38\x1a\x78\x30\x5c\x1f\xbc\xb9\xa7\x4f\x9a\xfe\x8f\xf1\x60\x21\x13\xb2\xb6\xdf\xb2\x77\x9b\x49\x54\x59\xf2\x2a\xd5\x0e\x1e\xfa\xdb\x0c\x6c\x40\x86\x1b\x5e\x08\xbb\x53\x20\x4b\x2d\x52\x0c\x2b\x0c\x34\xfd\xe6\x79\x94\xd6\x01\xfa\x6f\x00\x3c\xcc\x8c\xa9\x35\xa3\x54\x1b\x9e\x14\xea\x2c\x9a\xa3\x54\x97\x28\x51\x25\xe5\x74\x1a\xbf\x7e\x35\x1b\xcf\xe9\x64\x16\x4f\x27\xe3\x39\xbc\xb0\x63\x30\xf8\x13\x00\x00\xff\xff\xa4\xdc\xfd\x9f\x6f\x02\x00\x00")

func DockerTemplatesMakefileTpmlBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesMakefileTpml,
		".docker/templates/makefile.tpml",
	)
}

func DockerTemplatesMakefileTpml() (*asset, error) {
	bytes, err := DockerTemplatesMakefileTpmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/makefile.tpml", size: 623, mode: os.FileMode(420), modTime: time.Unix(1576745814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesTravisTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x6b\xdb\x30\x14\xc7\xef\xfa\x14\x0f\x93\xdb\x90\xb5\xee\xb0\x83\x21\x87\xb0\x84\x51\xb6\x36\x23\x61\xdd\x65\x10\x14\xeb\xd9\x16\x95\x25\x4f\x4f\x72\x43\x8d\xbf\xfb\xa8\xed\x2e\x5e\xbb\x76\xbd\x19\xbd\xdf\xef\xc9\xff\x27\x49\x16\x01\xfd\x81\x72\xaf\x9b\x90\x31\x00\x0e\xca\xe5\xb7\xe8\x41\xd7\xb2\x44\x62\x8c\xa2\x72\x19\x78\xfc\x15\xb5\x47\xc5\xd8\x11\x0b\xe7\xf1\xa0\x2d\x05\x69\xcc\xa8\x3c\x30\xe0\x6b\xe0\x05\x88\x48\x5e\x18\x97\x4b\x23\x8e\xda\x8a\xb1\x19\x27\xa3\xeb\xb7\x93\x9c\xd0\x92\xf3\x83\x90\x47\x6f\x80\x7f\x85\x2a\x84\x86\x32\x21\x4a\x1d\xaa\x78\x4c\x73\x57\xcf\x8d\xbf\xbe\x3d\x1a\x94\x84\x24\x94\xbb\xb3\xc6\x49\x25\x2e\xd2\x0f\x1f\xd3\x0b\xa1\x34\x85\x83\xd1\x36\x9e\xd2\x20\x7d\x5a\xde\x03\xe7\x2e\x86\x26\x06\x98\xf9\x53\x6d\xd8\x3d\x48\x0f\xa7\xb6\x78\xa9\x9c\x57\xb5\x53\xf0\xee\x04\xe7\xce\xcf\x12\xff\x87\x99\x67\x1d\x86\x53\xb7\x2f\x90\x4f\x06\xf6\x06\x63\xea\xfd\x54\x7c\x3c\xc2\xf9\xa1\xe7\x6a\xca\x58\x68\x83\x24\x92\xc5\xcd\x66\xb7\xbf\xdc\x5e\x27\x43\xf5\xf2\x6a\xf5\x79\xb3\x4c\x4e\xef\xfd\xfd\xad\x6b\x45\xb8\xd3\x36\x64\x8b\x6e\x62\xc4\x4f\x21\x78\x9f\x30\x86\xb6\xcd\xba\xce\x4b\x5b\x22\x2c\x5a\x69\x20\x5b\x42\x7a\x83\x9e\xb4\xb3\xd4\xf7\x43\xab\xc9\x59\x76\xdd\x80\xa4\x6b\xed\xe1\xd5\x92\x90\xa6\xd1\x16\x5f\x23\x1e\xb2\x76\x1d\x5a\xd5\xf7\x8c\x19\x69\xcb\x28\x4b\xcc\xe0\x28\xa9\x62\xec\xf9\xd5\x1e\xa7\xd9\x8e\xff\x35\xbf\xf2\xc7\xa8\x8d\x02\x1e\x20\x59\x0c\x89\x13\x48\xcf\x53\x9e\xbb\x23\xf8\x48\xfd\xe3\xd5\xcc\x56\x8c\x2b\xb5\x05\x1e\x61\xb1\xde\x7e\xfa\xb2\xd9\x1d\xbe\xef\x37\xbb\xeb\xd5\xd5\x06\x78\xf3\x67\xed\xdb\x6a\xbf\xff\xb1\xdd\xad\xe7\x62\x13\xa9\x3a\xef\xc1\x08\x7d\xab\x73\xa4\x6c\xaa\xb3\xdf\x01\x00\x00\xff\xff\x84\xd7\xce\xf8\xba\x03\x00\x00")

func DockerTemplatesTravisTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesTravisTmpl,
		".docker/templates/travis.tmpl",
	)
}

func DockerTemplatesTravisTmpl() (*asset, error) {
	bytes, err := DockerTemplatesTravisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/travis.tmpl", size: 954, mode: os.FileMode(420), modTime: time.Unix(1576745837, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesUbuntuTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xdf\x6e\xd3\x30\x18\xc5\xef\xfd\x14\x9f\x86\x34\x01\x53\x62\xa6\x5d\x31\x31\xb4\x0a\x02\x44\xd0\x64\xf2\xd2\x56\x15\x45\xc8\x49\x8c\x63\x48\x6c\xcb\xfe\x5c\x48\xab\x3e\x10\xcf\xc1\x8b\xa1\xa6\x9d\xfa\xe7\xca\xe7\x9c\x9f\x65\x9d\xe3\x0f\x2c\x1f\x43\x28\x83\xc6\x70\x7b\xfd\x3a\xbe\x7e\x45\xc8\x78\x94\x66\xc5\x28\xcd\x12\x06\x8f\xff\xfe\x96\xdc\xa3\x12\x1a\x3e\x99\xb0\x12\x08\xcf\x7b\x63\x56\xca\xc4\x95\xe9\x5e\xc0\x1b\x2f\xf6\xf8\xfe\x10\xbf\x25\x64\xc4\x3e\x42\x31\x4b\xb3\xe2\xfb\x34\x61\x8f\x69\x9e\xdd\xad\xd7\xf1\x54\x38\xaf\x8c\xde\x6c\x08\x79\x97\x3f\xcc\xa1\x36\xd5\x2f\xe1\x22\xa1\xd1\xf5\xd6\x28\x8d\xb1\x6f\x80\x9e\x58\xc2\x26\x19\x54\x4d\x67\x6a\xb8\xfa\x73\xce\x06\xb8\x20\xdc\x62\x24\x05\x42\xb0\x35\x47\x01\x97\x97\x47\x99\xd2\x1e\x79\xdb\x42\xd4\xc3\x82\x48\x85\xb0\x20\xb6\xc7\xc6\xe8\x9b\xc8\x2a\xfb\xf4\x82\x55\xf6\xe6\x70\x35\x0a\x56\x3a\x5e\x0b\x88\x04\x48\x85\x57\x0d\xa2\xf5\xb7\x94\x4a\x85\x4d\x28\xb7\x03\x29\xfe\x56\x1a\xad\x33\x3f\x45\x85\x3b\x13\x4b\x85\xf7\xc7\x1b\x9f\x09\x29\xef\x06\x74\xde\xb3\x6a\x05\xd7\xc0\x03\x9a\x9d\x1a\x0a\xbb\x0e\x22\xf7\x03\xe8\x92\x3b\xda\xaa\x92\x72\x8b\xb4\x55\x1e\x3d\x7d\x09\x14\x3b\xbb\x3d\xb6\x6c\x90\x84\x24\x59\xc1\xe6\x0f\x79\x9a\x15\xf0\xf5\xe2\xf4\x5b\x2e\xbe\x91\x69\xfe\x65\x32\x4e\x60\xd7\x8c\xcc\x72\xf6\xf9\x7d\xca\x80\x7a\xb7\xdc\x47\xff\x03\x00\x00\xff\xff\x4f\xe2\x8d\x91\xf4\x01\x00\x00")

func DockerTemplatesUbuntuTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesUbuntuTmpl,
		".docker/templates/ubuntu.tmpl",
	)
}

func DockerTemplatesUbuntuTmpl() (*asset, error) {
	bytes, err := DockerTemplatesUbuntuTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/ubuntu.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1576745927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".docker/templates/alpine.tmpl":       DockerTemplatesAlpineTmpl,
	".docker/templates/debian-slim.tmpl":  DockerTemplatesDebianSlimTmpl,
	".docker/templates/dockerignore.tmpl": DockerTemplatesDockerignoreTmpl,
	".docker/templates/entrypoint.tmpl":   DockerTemplatesEntrypointTmpl,
	".docker/templates/makefile.tpml":     DockerTemplatesMakefileTpml,
	".docker/templates/travis.tmpl":       DockerTemplatesTravisTmpl,
	".docker/templates/ubuntu.tmpl":       DockerTemplatesUbuntuTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".docker": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"alpine.tmpl":       &bintree{DockerTemplatesAlpineTmpl, map[string]*bintree{}},
			"debian-slim.tmpl":  &bintree{DockerTemplatesDebianSlimTmpl, map[string]*bintree{}},
			"dockerignore.tmpl": &bintree{DockerTemplatesDockerignoreTmpl, map[string]*bintree{}},
			"entrypoint.tmpl":   &bintree{DockerTemplatesEntrypointTmpl, map[string]*bintree{}},
			"makefile.tpml":     &bintree{DockerTemplatesMakefileTpml, map[string]*bintree{}},
			"travis.tmpl":       &bintree{DockerTemplatesTravisTmpl, map[string]*bintree{}},
			"ubuntu.tmpl":       &bintree{DockerTemplatesUbuntuTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
