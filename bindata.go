// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// .docker/templates/alpine.tmpl
// .docker/templates/debian-slim.tmpl
// .docker/templates/docker-compose.tmpl
// .docker/templates/docker-entrypoint.tmpl
// .docker/templates/docker-sync.tmpl
// .docker/templates/dockerignore.tmpl
// .docker/templates/makefile.tmpl
// .docker/templates/readme-alpine.tmpl
// .docker/templates/readme.tmpl
// .docker/templates/travis.tmpl
// .docker/templates/ubuntu.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DockerTemplatesAlpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xd1\x4e\x1b\x3b\x10\x7d\xbe\xfe\x8a\x51\xb8\x82\x07\xae\x13\x50\xde\xb8\x97\xab\x46\x21\x6d\xa3\x96\x24\x5a\x42\x2a\x54\xaa\xca\xb1\x27\xd9\x29\xbb\xb6\x65\xcf\x2e\x89\x10\xff\x5e\xed\x6e\x02\x01\x05\xf1\xd0\xa7\xb5\x67\x8e\xec\x73\x8e\xe7\xec\xc7\x64\x7c\x09\x2a\xf3\x64\xf1\xac\xdb\x3e\x3d\x81\xde\x15\xcc\x0b\xca\x8c\x10\xdf\xc6\xc9\x97\x8b\x61\x02\x1d\xe7\xb9\xa3\xbc\x17\xe2\x00\x86\x36\xb2\xca\x32\x98\xac\x39\x75\x16\x94\x35\x80\x2b\xc6\x60\x55\x06\x06\x3d\x5a\x83\x56\x13\xc6\x7f\x80\xac\xce\x0a\x43\x76\x09\x29\x2a\x83\x21\xd6\xe0\x4f\xfd\xbe\x48\xae\x47\xa0\xfc\x1d\x28\x63\x40\x4a\xeb\xa4\x56\x3a\x45\xf0\xf5\x91\xdd\xed\x57\x1a\x2c\xc1\xaf\xbb\xd2\x93\x87\x8c\xe6\x8b\x05\x6d\x3e\x75\x27\x2f\x62\x56\x2f\x96\x5a\xc3\x92\x18\xb4\x92\x1a\x03\xd3\x82\xb4\x62\x8c\xe0\x3c\xda\x79\xa6\xe2\x2b\xf4\xf1\xf1\x0b\x19\xe4\xd1\x96\x35\x23\x4f\xbe\x0b\xb4\xa9\xfb\xa6\x2e\x0e\xa0\x1f\x50\x31\x82\x82\x92\x02\x17\x2a\x03\xb4\x25\x05\x67\x73\xb4\x5c\x2b\x52\x9a\xa9\xac\x20\xc4\xcd\x39\x1b\x19\x32\x87\x12\x6d\xd9\xb8\x57\xad\xc4\x60\x34\x83\x49\x6f\xfa\xf9\xbc\xf5\x54\xeb\xcc\xc9\x9e\xfd\x5d\x15\x5b\x70\x2b\xfe\x9a\x0d\x93\xe9\x75\xef\xeb\xcf\xc1\x68\xb6\x03\x6a\xed\x32\xde\x35\x19\xc8\xb2\x03\x4e\x71\x2f\xb9\x7b\xe2\x74\x57\x60\x6d\x52\xe6\x2c\x82\x94\x06\x3d\xa7\xe7\xa7\x20\xe7\xf0\xf0\xd0\x9e\x61\x88\xe4\xec\xe3\x23\xa4\xcc\x3e\x9e\x75\x3a\x4b\xe2\xb4\x98\xb7\xb5\xcb\x3b\x7c\x4f\x96\x7d\x70\xbf\x50\x73\xb3\x79\x1a\x88\x8a\xf2\xe1\x21\x68\xf3\xba\xf2\xc2\x4b\x29\x0b\xbf\x0c\xca\x60\x55\xde\x07\xd0\xcd\x2c\xed\xe9\xd8\x22\xf7\xeb\x7d\x8d\xb6\x10\xaf\x07\x57\x5c\xf6\x86\xa3\x69\x6f\x38\x1a\x24\xb0\x3a\x09\xab\x3b\x57\xc2\x7f\x9b\xc5\x07\x1f\x1c\x3b\x9b\x2b\xca\x2a\x4d\xff\xef\x3c\x6c\x28\x2c\x53\x8e\x50\x44\x0c\xb5\x4d\xf9\x9d\xa1\x00\xd2\xd7\x9a\x36\x77\x2b\x63\xaa\x3e\xc8\x0b\x68\x1c\x90\xe9\xb3\x64\x19\xa1\x7a\xc6\x4e\x4c\xe1\x56\x40\x05\x8f\xc5\x16\xa6\xe1\x68\xc7\x9d\x7f\x9f\x0f\x37\x8a\xd5\xd1\x7b\x81\xda\x72\x7b\xf1\xe6\xce\x66\xeb\xf7\x22\xb4\x89\xcb\x36\x02\xd5\x3e\xb2\xd1\xcd\xec\x5f\xdd\x13\xeb\x14\xd8\xd5\x9a\x41\x3b\xcb\xb8\x62\x71\x7d\x35\x48\x1a\xda\x7b\x83\xdf\x77\x7e\xfd\xe6\xa8\x2d\x82\xcb\xeb\xa6\x0f\x58\x92\x2b\x22\x50\xae\x96\x28\xfa\xe3\xc9\x0d\x48\x59\xb5\xcf\xeb\x9f\xca\x73\x1a\x76\x72\x21\x0e\xa0\xb7\x0d\xd1\x1b\x37\xfc\x49\x76\x06\xa3\x69\x72\x33\x19\x0f\x47\x53\xf8\xde\xaa\x05\xb6\x7e\xfc\x0e\x00\x00\xff\xff\x16\xea\xa4\x28\xf6\x04\x00\x00")

func DockerTemplatesAlpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesAlpineTmpl,
		".docker/templates/alpine.tmpl",
	)
}

func DockerTemplatesAlpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesAlpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/alpine.tmpl", size: 1270, mode: os.FileMode(420), modTime: time.Unix(1576830973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDebianSlimTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x51\xeb\xda\x30\x14\xc5\xdf\xf3\x29\x2e\x0e\x7c\x98\xa4\x19\xf8\x30\x90\x39\x94\xad\x1b\x65\xb3\x95\xac\x2a\x32\xc7\x88\x6d\x96\x66\xb6\x49\x48\x6e\x9d\x22\x7e\xf7\x61\xf5\xcf\x5f\x7d\xca\x39\xe7\x47\xe0\x9c\xfb\x85\x67\x33\x70\x47\xac\xac\x19\x0d\xa3\xf7\x34\xd4\xba\xa1\x01\xbd\xc4\xa2\x22\x64\x36\x4d\xd2\x7c\x9a\xa4\x31\x87\xc3\x3b\x7f\xd8\xd9\x3d\x7c\xb8\x89\x89\xf3\x16\xad\x69\x84\xae\xa3\xc2\x36\x1f\x09\x99\xf2\xaf\x90\xaf\x92\x34\xff\xbd\x8c\xf9\x8f\x24\x4b\xc7\xa7\x53\xb4\x94\x3e\x68\x6b\xce\x67\x42\x3e\x65\xf3\x35\x94\xb6\xd8\x49\x4f\xa5\x41\x7f\x74\x56\x1b\x8c\x42\x05\xec\xc1\x12\xbe\x48\xa1\xa8\x1a\x5b\xc2\xe0\xf0\xcc\x3a\xb8\x21\xc2\x21\x55\x12\xa1\x75\xa5\x40\x09\xfd\xfe\x5d\xa6\x4d\x40\x51\xd7\x40\x8f\xb0\x21\x4a\xe3\xcb\x1f\xa7\xdd\xf0\x15\xd2\xd6\x29\x2f\x4a\x09\x54\x82\xd2\x38\xa8\x10\x5d\x18\x31\xa6\x34\x56\xed\xf6\x32\x89\xe1\x3f\x6d\xd0\x79\xfb\x57\x16\x78\x35\x91\xd2\x38\xb9\x5f\xf5\x46\x2a\x35\xee\xd0\x73\xb3\xa2\x96\xc2\x80\x68\xd1\x5e\x55\x57\xd1\x37\x40\xfd\x1f\x60\x7b\xe1\x59\xad\xb7\x4c\x38\x64\xb5\x0e\x18\xd8\x5b\x60\xd8\xb8\xcb\x73\x61\x9d\x24\x24\x4e\x73\xbe\x9e\x67\x49\x9a\xc3\xcf\xde\xe3\x21\x7a\xbf\xc8\x32\xfb\xbe\x98\xc5\x70\x6d\x46\x56\x19\xff\xf6\x39\xe1\xc0\x82\xdf\xdf\xa2\xff\x01\x00\x00\xff\xff\x15\xde\x8c\x62\xdc\x01\x00\x00")

func DockerTemplatesDebianSlimTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDebianSlimTmpl,
		".docker/templates/debian-slim.tmpl",
	)
}

func DockerTemplatesDebianSlimTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDebianSlimTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/debian-slim.tmpl", size: 476, mode: os.FileMode(420), modTime: time.Unix(1576745957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerComposeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcf\x4e\xe3\x30\x10\xc6\xef\x79\x8a\x11\x7b\xe0\xe4\x34\x01\xb1\x80\xa5\x1e\x58\xc1\x65\x0f\x80\x04\x42\xdc\x22\x37\x99\x52\xab\xfe\x53\x8d\x9d\xb4\x6c\x94\x77\x5f\x39\x4e\xa2\x76\xd9\x96\xcb\x24\x9e\xf9\xe5\xf3\xcc\x37\x61\x8c\x25\x0d\x92\x93\xd6\x70\x38\xbf\x4c\xaf\xcf\x13\x87\xd4\xc8\x12\x1d\x4f\x12\x00\xbf\x95\xc6\xf3\x04\x00\x40\x6a\xf1\x81\x1c\x76\x19\xfd\x59\xdb\x66\x16\x2b\x6d\x0b\xe9\xbd\x24\xe8\xba\xb6\x95\x4b\x48\x7f\x09\x87\x5d\xc7\xda\x16\x4d\x15\x72\x31\x03\x5d\xd7\x4b\x2c\x6a\xa9\xaa\xa8\x06\x50\x5a\xe3\x71\xe7\x39\xa4\x43\xa2\xb2\xe5\x1a\x69\x29\x15\x72\xb8\x9f\xde\x93\x91\x15\xd2\x20\x15\x46\x68\xe4\xb1\x2d\x56\x2a\x39\xf5\xc8\x1c\x0a\x2a\x57\xc7\x5b\x1d\x01\x25\x3c\x3a\x7f\x42\x35\x72\x3d\xb0\xb1\xe4\x5d\x94\x64\x70\x99\x65\x19\x0f\xa1\x3f\xa3\x69\x24\x59\xa3\x71\xb4\x87\xc1\xe3\xd3\xfd\x43\xf1\xf0\xf8\x36\xdf\x90\xad\xea\xd2\x4b\x6b\xfa\xf6\x2c\xb1\x0d\xc9\xc6\xee\x3e\xf9\xf1\x6b\x0b\x6f\x69\xa0\xf6\x47\x08\x9e\x88\x0f\x9c\xed\x8b\xec\x4d\x70\xd0\xe0\xd9\x6d\x76\x95\xf1\x10\xce\xe0\x07\xbc\x5a\x82\x0d\x8d\x72\xb1\x9a\x87\x6a\x3e\x56\x43\x1f\x64\x55\x2f\x32\x42\x37\x79\x7e\xc3\x43\x08\xd0\x73\xbc\x10\x20\x8c\x81\x4a\x38\x2f\xcb\xff\xd8\x1c\xf7\x96\x0e\x40\x5a\xda\xd9\x01\x7b\x78\xe2\xd7\x69\x96\xe6\x27\x7c\x18\xe8\x63\x26\x1b\x5b\x61\x1a\xf8\xf9\x81\xec\x50\x2d\x55\xed\x3c\x52\x2a\x8d\xf4\x52\xa8\x42\x8b\x70\x2c\xc2\x47\xee\xe4\x07\xbd\x62\x1c\x84\x0d\xb9\x81\x58\x58\xeb\x9d\x27\xb1\x49\x35\x6a\x4b\x9f\x85\xb2\xe5\x7a\xee\xa9\xc6\xd1\xb3\x87\x97\xe2\xf7\xdd\xdb\x5d\xf1\xf4\xfc\xfa\x32\x67\xef\xda\x5d\xe5\x17\x1a\xd8\xbb\xde\x85\x97\xb3\x1e\xab\x95\xd4\x72\x5c\x15\x80\x46\x1d\x64\xc6\x23\x80\xb3\x4b\xcf\x81\xe5\x53\x62\x25\xa8\x9a\x12\x8d\x55\xb5\xc6\x69\xd1\xe8\x2a\xe1\x45\x96\xf3\x59\xed\x68\xe6\x56\x82\xf0\x1f\xcb\x43\xfd\xeb\x0f\x72\x7b\x91\x65\x3c\x84\xb0\xcf\xb5\x5c\x08\x23\xbe\x59\x64\x84\x86\xc7\xb7\xab\x8b\xd8\xd7\x7b\xaf\x7e\x66\x39\x0f\x21\x49\xf6\x26\x99\xa6\xe8\xa9\x8a\x64\x83\xc4\x41\xd9\x52\xa8\x24\x31\xe8\xb7\x96\xd6\x3d\x58\xe1\x52\xd4\x6a\xf8\x03\x70\xe7\x91\x8c\x50\xa3\x75\xf1\x7e\xb3\x2d\xfa\x16\xfe\x06\x00\x00\xff\xff\x37\x37\x77\x1d\xcf\x04\x00\x00")

func DockerTemplatesDockerComposeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerComposeTmpl,
		".docker/templates/docker-compose.tmpl",
	)
}

func DockerTemplatesDockerComposeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerComposeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-compose.tmpl", size: 1231, mode: os.FileMode(420), modTime: time.Unix(1576865162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerEntrypointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\x52\x71\xe0\x02\x04\x00\x00\xff\xff\xc2\x78\x36\x2c\x0f\x00\x00\x00")

func DockerTemplatesDockerEntrypointTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerEntrypointTmpl,
		".docker/templates/docker-entrypoint.tmpl",
	)
}

func DockerTemplatesDockerEntrypointTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerEntrypointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-entrypoint.tmpl", size: 15, mode: os.FileMode(420), modTime: time.Unix(1576745907, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerSyncTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x6a\xc3\x40\x0c\xc6\xf1\xdd\x4f\x21\x8e\xc2\x4d\x6e\xdd\x8e\x07\x5d\x4a\x1f\xc0\x5b\x47\x73\xb5\x95\xcb\x41\x90\x0e\x49\xb6\x63\x42\xde\x3d\x24\x86\x38\xe0\x4d\xfc\xfe\x82\x6f\x42\xd1\xcc\x14\xc0\x7d\xb9\x8a\x8b\x65\x26\x0d\x15\xc0\x84\xf2\xcf\x8a\x01\x4c\x46\xac\x74\xa1\xfe\xc1\xb1\x94\x6e\x88\x16\xef\x37\x80\x4a\x1f\xe0\xed\xd2\xfe\xfd\x5e\x3f\x6c\xce\x64\xab\x2e\xd4\x77\x6a\x12\x0d\xd3\x12\xc0\x53\xb4\x3c\x61\xc7\x7a\xf6\x5b\x1f\x15\x25\x0f\x01\x3e\x9b\xa6\xd9\x34\x09\x8f\x65\xcf\x51\x92\xae\x8b\x35\xb8\xba\x08\x1e\x50\x80\x70\x46\x71\x4f\xcd\x89\x58\xf0\xdb\xb7\xd1\x8e\xf0\x9e\xb2\xf9\x7d\xfb\xc1\x13\xcf\x2f\x0f\xb7\x00\x00\x00\xff\xff\x22\x21\x4b\x7c\xfd\x00\x00\x00")

func DockerTemplatesDockerSyncTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerSyncTmpl,
		".docker/templates/docker-sync.tmpl",
	)
}

func DockerTemplatesDockerSyncTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerSyncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-sync.tmpl", size: 253, mode: os.FileMode(420), modTime: time.Unix(1576854421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xce\xc9\xcc\xe5\x4a\xcc\x29\xc8\xcc\x4b\xe5\xf2\x4d\xcc\x4e\x4d\xcb\xcc\x49\xe5\x4a\xc9\x4f\xce\x4e\x2d\xd2\x4d\xce\xcf\x2d\xc8\x2f\x4e\xd5\xab\xcc\xcd\x41\x17\xd2\x02\x0b\xea\xa5\x67\x96\x80\x09\x7d\x08\xa9\x05\xa5\xb4\xb8\x00\x01\x00\x00\xff\xff\x78\xa9\x74\xfb\x57\x00\x00\x00")

func DockerTemplatesDockerignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerignoreTmpl,
		".docker/templates/dockerignore.tmpl",
	)
}

func DockerTemplatesDockerignoreTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerignore.tmpl", size: 87, mode: os.FileMode(420), modTime: time.Unix(1576745854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xdf\x0f\xd2\x30\x10\x7e\xee\xfd\x15\x97\x6c\x66\xf8\xb0\x15\x66\x82\xd0\x48\x82\x89\x44\x79\xe0\x47\x94\x68\x7c\xd1\xd4\xad\xb0\x65\xdd\xba\xac\x1d\xa8\xc0\xff\x6e\xda\x4d\xc7\x03\xbe\x5c\x7b\xdf\x7d\xfd\xee\xbb\xde\x7a\xf3\xf6\xfd\x0a\xd9\x02\x7f\x8e\x9b\xdf\x85\x3a\x53\x73\xc9\x2b\x13\xa6\x2a\x29\x44\x03\x9f\x57\x1f\x3f\xad\x77\x5b\xb6\x40\x7f\xa4\x33\x21\x25\x9e\x1a\x51\xe3\xe1\xcb\x7a\x7b\xf8\xde\x17\xf1\x9d\xe3\x1e\x73\x29\xf0\x86\xfc\x52\x60\x70\xad\x9b\xbc\x32\xe8\xc7\xf7\x00\x6f\x98\xb4\x06\xc3\x14\x83\x45\x80\xe1\x11\xe3\x97\x00\x9e\x87\x46\x68\x43\x08\x23\xf6\x8c\xc0\x46\x06\xc4\x34\xad\x70\xd5\xb3\x68\x74\xae\x2a\xc2\x48\x9a\xeb\x5a\xf2\x5f\x7f\x91\x08\xfa\x0b\x03\xb2\x14\x49\xa6\xd0\x1f\xf5\x3e\x3a\xdd\xbc\xe4\x27\x61\x85\x7f\xb4\xb9\x4c\xbb\x14\x79\x95\xa2\xe1\x27\x34\x99\x28\x23\x88\xf6\x1f\x76\xdb\xaf\xac\xab\x81\x8b\x56\xad\x1b\x19\xbb\x77\xa1\x41\xff\xea\xfe\xe6\xce\xfc\x6b\xdf\xe1\x8e\xd1\xc0\xb3\x7a\xcf\x28\xff\x30\xc9\xed\x54\xce\x54\xdd\xea\x2c\xec\x9c\x31\x62\x13\xec\x45\x1c\x36\x38\x1a\x78\x30\x5c\x1f\xbc\xb9\xa7\x4f\x9a\xfe\x8f\xf1\x60\x21\x13\xb2\xb6\xdf\xb2\x77\x9b\x49\x54\x59\xf2\x2a\xd5\x0e\x1e\xfa\xdb\x0c\x6c\x40\x86\x1b\x5e\x08\xbb\x53\x20\x4b\x2d\x52\x0c\x2b\x0c\x34\xfd\xe6\x79\x94\xd6\x01\xfa\x6f\x00\x3c\xcc\x8c\xa9\x35\xa3\x54\x1b\x9e\x14\xea\x2c\x9a\xa3\x54\x97\x28\x51\x25\xe5\x74\x1a\xbf\x7e\x35\x1b\xcf\xe9\x64\x16\x4f\x27\xe3\x39\xbc\xb0\x63\x30\xf8\x13\x00\x00\xff\xff\xa4\xdc\xfd\x9f\x6f\x02\x00\x00")

func DockerTemplatesMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesMakefileTmpl,
		".docker/templates/makefile.tmpl",
	)
}

func DockerTemplatesMakefileTmpl() (*asset, error) {
	bytes, err := DockerTemplatesMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/makefile.tmpl", size: 623, mode: os.FileMode(420), modTime: time.Unix(1576745814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadmeAlpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x4d\x6f\x1b\x37\x10\xbd\xeb\x57\x3c\xc8\x01\x12\x03\xa6\x2c\x7f\x01\x92\x81\x1c\xda\x28\x69\x83\x06\x68\x9a\xb8\xe8\x35\xa3\xdd\x59\x2d\x2b\x2e\xb9\x25\xb9\x92\x55\x41\xfd\xed\x05\xc9\xd5\x97\x13\xb7\x41\xbc\xf1\x41\x06\xb9\x8f\xf3\xde\x0c\x67\x38\xe4\x09\xfc\x52\x6a\x2f\x72\x93\xcd\xd9\xf6\x7a\x27\x27\xf8\xd9\x2c\xe1\x0d\x1a\xc7\x61\x78\x82\x37\xd2\x3a\x9f\x86\x6f\x8c\x45\xd1\x0e\x69\xc6\x67\x58\x99\x06\x9a\x39\x0f\x0b\xa6\x8d\x54\x39\x64\x45\x33\x46\x32\x37\xe8\xf5\x3e\x7d\xfa\xe4\x4a\x56\xaa\x97\x66\x50\x37\x4a\xe1\x7e\x68\xff\x9e\x9b\xc5\x79\xa4\xbe\x5d\xaf\x31\x98\x48\x8b\xcd\x26\xa0\x7b\x3d\x63\xf1\xd9\x3a\x91\x99\xaa\x36\x8e\x13\x49\xc2\x9d\x04\x71\xaf\x2c\x93\x67\x90\x06\x29\x49\x6e\xbf\x2e\x0e\x93\x73\x2f\xfb\x2d\xb9\x6d\x34\x84\x97\x10\xc2\x56\x10\x0b\x3c\x7b\x51\x2f\xf3\xd3\xf3\x9c\x3c\xdd\x9e\x9b\xda\x9f\x53\x5d\xc7\xd1\xa3\x0a\xd7\x6b\x59\x60\xf0\x23\x39\xde\x6c\xc4\x7a\xcd\x3a\x0f\x73\x69\x06\x9b\x4d\x3f\xf0\xe3\xf8\x2f\x05\xf1\xb5\x22\xe7\x65\xe6\x98\x6c\x56\x82\x74\x8e\x5f\xe4\x94\x34\xf5\x7a\x1f\x3d\x59\x1f\x03\x5e\x83\x15\x1d\x83\xe6\x2d\xe8\xb1\x70\x34\x35\x44\x1e\x96\x1d\x18\x6f\xd7\x6c\x63\x84\x3b\x63\x51\x5b\x73\xbf\x3a\xe6\xf2\xc6\xfe\x9f\xdd\x00\xd9\x99\x79\x7d\xcf\x59\xe3\x19\x77\x21\x24\xc8\x4c\x55\x91\xce\x1f\xb7\x10\x63\xbd\xc0\xb3\xf7\x7f\x4c\xda\x28\x1e\x47\x38\xce\x1d\x5a\xa7\xaa\x56\xec\x60\x8a\xbd\xed\x1f\x50\xf0\x12\x4e\x86\x2f\xe0\x2d\xc2\x1b\x94\xac\xea\x98\x7b\x8d\xce\xd9\x3a\x1f\x42\xe5\x4b\xc6\x94\x9c\xcc\xdc\xed\x13\x55\xb5\xbf\xa2\x09\x49\x6f\x35\x55\x0c\x81\x8f\x99\xa5\x9a\x41\x4a\x45\xa6\xbb\x25\xb3\x77\x28\xac\xa9\x22\xea\xb9\x83\x97\x15\x2b\xa9\x79\xd0\x19\xa9\x43\x2d\x35\x53\x1d\xdc\x3f\x52\x70\xc8\x1e\xd4\x3c\x50\x80\xcc\x68\x4f\x52\x4b\x3d\xdb\x5b\x78\x9a\xac\x63\x29\xaf\x8c\x52\x9c\x79\xf0\x82\xed\x2a\xa9\xf9\x22\x67\x52\x18\x51\x46\xf3\x73\xd7\x0a\xef\x2e\x42\x62\xc5\x64\x71\x39\xbc\xb8\x3e\x50\xd5\x46\xc7\x97\xe4\xb1\x64\xcb\xf0\x61\x82\x73\x4c\xb9\x30\x96\x23\xbc\x43\x09\x4e\xea\x2c\x1a\xbd\x11\x17\x97\xe2\x72\xf8\x35\x4a\x1e\xae\xe9\x4e\x8e\x41\x21\x15\x0f\xfc\xbd\xdf\xa7\x4c\x2b\x23\x54\x89\xa3\x05\x87\x0a\xda\x82\x3a\x27\xce\xdc\x02\x42\xc4\xdf\xc7\xe8\xc9\x81\x10\x10\x71\x41\x77\x1b\xc1\x15\x49\x05\x21\xea\xd2\xe8\x58\x30\xa5\x59\x1e\x6d\x41\x25\x67\xa5\x47\x19\x34\x24\x8c\x6e\xaa\x29\x5b\x07\x63\x91\x16\x53\x9e\x5b\x76\x8e\x9f\x98\xa2\x0e\xfd\x89\xd1\xa4\x72\xdc\xd9\xa6\xaa\xfb\x10\x62\xc1\x56\x16\x92\x73\x08\x4c\xa4\xab\x15\xad\xb6\xd2\xa6\x2b\xec\x3e\x06\x6f\x5a\xb1\x77\x6d\xaa\xd0\xd4\x34\x1e\x87\xe6\x9e\xa6\x6d\xf6\xb2\x7f\x3d\x1a\x8c\x46\xc3\xe1\xf5\xe8\xec\x72\x70\x35\xba\x19\x5f\x8d\xcf\x2e\xe6\x55\xff\x2b\xf6\x30\xd6\x33\xc1\x52\x2e\x9b\x78\x56\x5f\xcc\x2b\x90\x35\x8d\xce\x41\xa8\x15\x65\x0c\xa9\xf1\x9e\xac\x4c\x1b\xce\xf7\xb5\x09\x2d\xa7\xe4\x0a\xdf\xa6\xda\x7c\x97\x64\x61\x07\x65\x32\x52\xa5\x71\xfe\x76\x7c\x39\x0c\x55\xfb\x6b\xe3\xeb\x66\x5f\xb4\xe6\xb8\x69\x77\x5d\x28\x7f\x3a\xa3\x21\x44\xfa\xf7\x9f\xa5\x12\x21\x1d\xd7\x4a\xf8\x3c\x0d\x97\x16\x9f\x4e\xe4\x7c\x1a\x44\x04\xca\xbd\xfb\x84\x8f\xbf\xbd\x93\x9e\xb1\x05\x77\xc8\x5f\x18\xa5\xcc\x32\x24\xfb\xbe\xb1\x85\xab\x85\xf7\x6c\xb7\xed\x6c\x87\xe9\x9c\x37\x34\xa9\x1d\xef\xb2\x34\x0f\xb8\x5b\xe6\x4e\x79\x69\x61\xac\xf4\xec\x0e\xba\xc3\x83\xbb\x04\x25\xee\x92\x1c\xb6\xe8\xfc\xfb\x78\x2e\xc2\xb4\x28\xc2\x55\x7c\xaf\x26\x0e\xa3\x02\xa9\x0b\x63\x2b\xf2\xd2\xe8\x50\xd4\x6c\x63\xfe\xa5\x90\x74\xa7\xa7\xb6\x26\xe4\xf4\x56\xc6\xef\x2e\x64\x80\x53\x66\x79\x86\x69\xe3\xc1\x45\xc1\x99\x97\x0b\x46\xc5\xbe\x34\xf1\x85\x31\x23\x5f\xb2\x7d\x70\x16\xb5\xc9\xd2\x9a\xc3\x8b\x9f\x22\xc8\xe1\x9f\xab\x50\xd5\x09\x7b\xf6\x6d\x67\xcf\x5b\x9d\xa9\x26\x0f\x21\xfb\xc0\xa9\x4e\x4e\x3b\xdc\x10\xdb\xda\xdc\x39\xff\x57\x23\xb3\xf9\xe7\xee\x86\x14\x09\x07\x11\xc6\x3b\x7f\xf0\x22\xb6\x08\x19\xf5\xb1\xc3\xd6\xd4\xe9\x97\x83\xd2\xa9\x68\xd7\x54\x8c\x8b\xe1\xf8\x7a\x78\x35\x1a\xdf\x8c\xae\x86\x37\x23\x08\x7c\x48\xf3\x84\xf6\x11\xe2\xc2\x4b\x23\x44\x6e\x77\x47\x75\x35\x67\xa9\xc9\xa5\xfb\xe2\xdb\xc9\x60\x7f\xfd\x9f\x90\x27\x97\xde\x97\x41\x80\xc3\x8c\x35\xdb\xf0\xb2\x9b\xae\x92\x8e\xf4\xd6\xcc\x28\x64\x62\xe8\x36\x41\x88\xf2\x48\x99\x99\x87\x30\xc5\x07\x45\xef\x1d\xfb\xe0\x78\xe8\xaf\xda\x2c\x71\x7b\xfa\x6f\x00\x00\x00\xff\xff\xa0\x9e\xc9\xee\xe2\x0e\x00\x00")

func DockerTemplatesReadmeAlpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadmeAlpineTmpl,
		".docker/templates/readme-alpine.tmpl",
	)
}

func DockerTemplatesReadmeAlpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadmeAlpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme-alpine.tmpl", size: 3810, mode: os.FileMode(420), modTime: time.Unix(1576867839, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5b\x6f\x1b\x37\x13\x7d\xd7\xaf\x38\x90\x03\x24\x06\x4c\x59\xbe\x01\x92\x81\x3c\x7c\x5f\x94\xb4\x41\x03\x34\x4d\x5c\xf4\xd5\xa3\xdd\x59\x2d\x2b\x2e\xb9\x25\xb9\x92\x55\x41\xfd\xed\x05\xc9\xd5\xcd\x89\xdb\x20\xde\xfa\x41\x06\xb9\x87\x73\x0e\x0f\x67\x78\x39\x81\x5f\x4a\xed\x45\x6e\xb2\x39\xdb\x5e\xef\xe4\x04\x3f\x9a\x25\xbc\x41\xe3\x38\x34\x4f\xf0\x4e\x5a\xe7\x53\xf3\x9d\xb1\x28\xda\x26\xcd\xf8\x0c\x2b\xd3\x40\x33\xe7\x61\xc0\xb4\x91\x2a\x87\xac\x68\xc6\x48\xe1\x06\xbd\xde\xfd\xfd\xbd\x2b\x59\xa9\x5e\xea\x41\xdd\x28\x85\x87\xa1\xfd\x73\x6e\x16\xe7\x91\xfa\x76\xbd\xc6\x60\x22\x2d\x36\x9b\x80\xee\xf5\x8c\xc5\x17\xe3\x44\x66\xaa\xda\x38\x4e\x24\x09\x77\x12\xc4\xbd\xb1\x4c\x9e\x41\x1a\xa4\x24\xb9\xfd\xb8\xd8\x4c\x93\x7b\xdd\x6f\xc9\x6d\xa3\x21\xbc\x84\x10\xb6\x82\x58\xe0\xc5\xab\x7a\x99\x9f\x9e\xe7\xe4\xe9\xf6\xdc\xd4\xfe\x9c\xea\x3a\xb6\x9e\x54\xb8\x5e\xcb\x02\x83\xff\x93\xe3\xcd\x46\xac\xd7\xac\xf3\xd0\x97\x7a\xb0\xd9\xf4\x03\x3f\x8e\xff\x92\x89\x6f\x15\x39\x2f\x33\xc7\x64\xb3\x12\xa4\x73\xfc\x24\xa7\xa4\xa9\xd7\xfb\xec\xc9\xfa\x68\x78\x0d\x56\x74\x0c\x9a\xb7\xa0\xa7\xec\x68\x6a\x88\x3c\x0c\x3b\x08\xde\x8e\xd9\x7a\x84\x3b\x63\x51\x5b\xf3\xb0\x3a\xe6\xf2\xc6\xfe\x5b\xdc\x00\xd9\x85\x79\xfb\xc0\x59\xe3\x19\x77\xc1\x12\x64\xa6\xaa\x48\xe7\x4f\x47\x88\x5e\x2f\xf0\xe2\xe3\x6f\x93\xd6\xc5\x73\x67\x5b\x43\xd3\xb2\x1c\x86\xa6\xaa\x56\xec\x60\x8a\x7d\xe0\xff\xa1\xe0\x25\x9c\x0c\x5f\xc0\x5b\x84\x37\x28\x59\xd5\x31\xf1\x1a\x9d\xb3\x75\x3e\xf8\xe4\x4b\xc6\x94\x9c\xcc\xdc\xed\x73\x24\xb5\xbf\xa2\x09\xe9\x6e\x35\x55\x0c\x81\xcf\x99\xa5\x9a\x41\x4a\x45\x9a\xbb\x25\xb3\x77\x28\xac\xa9\x22\xea\xa5\x83\x97\x15\x2b\xa9\x79\xd0\x0d\xa3\x43\x2d\x35\x53\x1d\x26\x7e\x44\x7f\x48\x1d\xa4\x3c\xa2\x47\x66\xb4\x27\xa9\xa5\x9e\xed\x23\x3c\x43\xd3\xb1\x8e\x37\x46\x29\xce\x3c\x78\xc1\x76\x95\xa4\x7c\x95\x30\xc9\x8b\x28\xa3\xf9\xa5\x6b\x55\x77\xe4\x8d\x58\x31\x59\x5c\x0e\x2f\xae\x0f\x24\xb5\xbe\xf8\x92\x3c\x96\x6c\x19\x3e\x74\x70\x8e\x29\x17\xc6\x72\x84\x77\xc5\xef\xa4\xce\x62\xc4\x1b\x71\x71\x29\x2e\x87\xdf\x22\xe3\xf1\x98\x8e\xb4\x18\x14\x52\xf1\xc0\x3f\xf8\x7d\x9a\xb4\x1a\x42\x4d\x38\x5a\x70\xa8\x97\x2d\xa8\x5b\xd6\xcc\x2d\x20\x44\xfc\x7d\x8a\x9b\x1c\x08\x01\x11\x07\x74\xe4\x3f\x57\x24\x15\x84\xa8\x4b\xa3\x63\x79\x94\x66\x79\xe4\x7c\x25\x67\xa5\x47\x19\x04\x24\x8c\x6e\xaa\x29\x5b\x07\x63\x91\x06\x53\x9e\x5b\x76\x8e\x9f\x93\x93\x0e\xfd\x89\xd1\xa4\x72\xdc\xd9\xa6\xaa\xfb\x10\x62\xc1\x56\x16\x92\x73\x08\x4c\xa4\xab\x15\xad\xb6\xba\xa6\x2b\xec\x3e\x86\xa9\xb4\x4a\xef\xda\xf4\xa0\xa9\x69\x3c\x0e\xc3\x3d\x43\xd8\xec\x75\xff\x7a\x34\x18\x8d\x86\xc3\xeb\xd1\xd9\xe5\xe0\x6a\x74\x33\xbe\x1a\x9f\x5d\xcc\xab\xfe\x37\x2c\x5d\x2c\x5d\x82\xa5\x5c\x36\x71\x37\xbe\x98\x57\x20\x6b\x1a\x9d\x83\x50\x2b\xca\x18\x52\xe3\x23\x59\x99\xd6\x99\x1f\x6a\x13\x4e\x94\x92\x2b\x7c\x87\x64\xd3\x7d\x82\xb0\x83\x32\x19\xa9\xd2\x38\x7f\x3b\xbe\x1c\x86\x02\xfd\xb9\xf1\x75\xb3\xaf\x4f\x73\x7c\x1a\x77\x5a\x16\xbf\x3b\xa3\x21\x44\xfa\xf7\x8f\x85\x11\x21\x5d\x56\x46\xb8\xb8\x4c\xc3\x3d\xc4\xa7\x0d\x37\x9f\x06\x05\x81\x6f\x3f\x71\xc2\xe7\x5f\x3e\x48\xcf\xd8\x82\xbb\x22\x2f\x8c\x52\x66\x19\x52\x7b\x7f\x62\x85\xab\x82\xf7\x6c\xb7\xe7\xd4\x0e\xd3\x2d\x69\x38\x7d\x76\xa4\xcb\xd2\x3c\x22\x6e\x69\xbb\x23\xa5\x85\xb1\xd2\xb3\x3b\xd8\xf9\x1f\xdd\x0d\x28\x11\x97\xe4\xb0\x45\xe7\xff\xc1\x9c\x45\xe8\x16\x45\xb8\x51\xef\xa5\xc4\x66\xa4\x97\xba\x30\xb6\x22\x2f\x8d\x0e\xc5\xcb\x36\x26\x5c\x32\xa3\x23\x31\xb5\x35\x21\x83\xb7\x1a\x7e\x75\x61\xd5\x9d\x32\xcb\x33\x4c\x1b\x0f\x2e\x0a\xce\xbc\x5c\x30\x2a\xf6\xa5\x89\xaf\x84\x19\xf9\x92\xed\xa3\x0d\xa7\x4d\x90\x36\x1c\x5e\xfd\x10\x41\x0e\x7f\x5d\x85\x02\x4e\xd8\xb3\xef\xd8\x60\xde\xeb\x4c\x35\x79\x30\xeb\x13\xa7\xaa\x38\xed\x6a\x1d\x6c\x1b\x70\x37\xed\x3f\x1a\x99\xcd\xbf\x9c\x68\x48\x8b\xb0\xdb\x60\xbc\x9b\x09\x5e\xc5\xed\x5f\x46\x71\xec\xb0\x0d\x75\xfa\x75\x3b\xba\x53\xec\x9a\x8a\x71\x31\x1c\x5f\x0f\xaf\x46\xe3\x9b\xd1\xd5\xf0\x66\x04\x81\x4f\xa9\x9f\xd0\xbe\x1f\x5c\x78\x24\x04\xcf\x76\xf7\x4c\x57\x73\x96\x4e\xaf\x74\xed\x7b\x3f\x19\xec\x2f\xef\x13\xf2\xe4\xd2\xd3\x30\x6c\x2a\x0e\x33\xd6\x6c\xc3\xa3\x6c\xba\x4a\x3a\xd2\x33\x31\xa3\x90\x7d\xe1\x24\x09\x42\x94\x47\xca\xc6\x3c\x78\x14\x9f\x03\xbd\x0f\xec\xc3\xac\xc3\xc1\xa9\xcd\x12\xb7\xa7\x7f\x07\x00\x00\xff\xff\xcf\xc0\x80\x74\x9d\x0e\x00\x00")

func DockerTemplatesReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadmeTmpl,
		".docker/templates/readme.tmpl",
	)
}

func DockerTemplatesReadmeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme.tmpl", size: 3741, mode: os.FileMode(420), modTime: time.Unix(1576867844, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesTravisTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x6b\xdc\x30\x10\xc5\xef\xfa\x14\x83\x59\xc8\xa1\xc8\x6a\x7a\xe8\xc1\x90\xc3\xd2\x5d\x4a\x68\x93\x2d\xbb\x34\xbd\x14\x16\xad\x35\x6b\xab\x91\x25\x47\x23\x39\x4b\x5c\x7f\xf7\x12\xdb\xc9\xba\xcd\x9f\xe6\x66\xf4\xde\xef\xc9\x33\x9a\x91\xfb\x80\x7e\x4b\xb9\xd7\x75\xc8\x18\x00\x07\xe5\xf2\x6b\xf4\xa0\x2b\x59\x20\x31\x46\x51\xb9\x0c\x3c\xde\x44\xed\x51\x31\xb6\xc3\xbd\xf3\xb8\xd5\x96\x82\x34\x66\x40\xee\x3d\xe0\x2b\xe0\x7b\x10\x91\xbc\x30\x2e\x97\x46\xec\xb4\x15\x43\x18\x27\xa3\xab\xb7\x3b\x39\xa1\x25\xe7\x7b\x20\x8f\xde\x00\xff\x0a\x65\x08\x35\x65\x42\x14\x3a\x94\x71\x97\xe6\xae\x9a\x12\x7f\x7d\x7b\x34\x28\x09\x49\x28\x77\x6b\x8d\x93\x4a\x9c\xa6\x1f\x3e\xa6\xa7\x42\x69\x0a\x5b\xa3\x6d\x3c\xa4\x41\xfa\xb4\xb8\x03\xce\x5d\x0c\x75\x0c\x30\xe1\x47\xad\xbf\x3d\x48\x0f\x87\x66\xff\x92\x9c\x97\x95\x53\xf0\xee\x00\xc7\xe4\x27\x15\xff\xc7\x33\xad\xb5\x6f\x4e\xd5\xbc\xe0\xfc\xa7\x61\x6f\x20\xc6\xec\xe7\x40\xcc\x4b\x07\x27\x6d\x82\x87\x1a\xbd\xae\xd0\x06\x69\x92\x2c\xf8\x88\xdd\x09\xfc\x1e\x72\x03\x22\x08\x0c\xf9\x18\x29\x94\xc4\xca\xd9\xf4\x17\xb9\xc9\xe5\x84\xbe\xd1\x39\x3e\x4c\x8d\x47\x0a\xd2\x87\xc7\x31\x99\x0e\x56\xae\x46\xd7\x5e\x1b\x24\x91\xcc\xae\x96\xeb\xcd\xf9\xea\x32\xe9\xd5\xf3\x8b\xf9\xe7\xe5\x59\x72\x78\xef\xef\xae\x5d\x23\xc2\xad\xb6\x21\x9b\xb5\xa3\x47\xfc\x14\x82\x77\x09\x63\x68\x9b\xac\x6d\xbd\xb4\x05\xc2\xac\x91\x06\xb2\x33\x48\xaf\xd0\x93\x76\x96\xba\xae\x8f\x1a\x99\xb3\xb6\xed\x2d\xe9\x42\x7b\x78\x55\x12\xd2\xd4\xda\xe2\x6b\x8e\xfb\x7e\xb6\x2d\x5a\xd5\x75\x8c\x19\x69\x8b\x28\x0b\xcc\x60\x27\xa9\x64\xec\xe9\xfa\x0c\x2f\xd6\x0c\xff\x35\x5d\xab\x5d\xd4\x46\x01\xe7\x74\x13\x25\x95\xc0\x03\x24\xb3\xbe\xf4\x04\xd2\x63\x57\xa7\x21\x03\xf1\xe0\x7a\x66\x45\x27\x27\xc6\x15\xda\x02\x8f\x30\x5b\xac\x3e\x7d\x59\xae\xb7\xdf\x37\xcb\xf5\xe5\xfc\x62\x09\xbc\x7e\x3c\xfb\x36\xdf\x6c\x7e\xac\xd6\x8b\x29\x58\x47\x2a\x8f\x77\xb0\xf1\x55\x29\x1b\xf5\x3f\x01\x00\x00\xff\xff\xe0\x56\xfa\xe3\x26\x04\x00\x00")

func DockerTemplatesTravisTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesTravisTmpl,
		".docker/templates/travis.tmpl",
	)
}

func DockerTemplatesTravisTmpl() (*asset, error) {
	bytes, err := DockerTemplatesTravisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/travis.tmpl", size: 1062, mode: os.FileMode(420), modTime: time.Unix(1576830941, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesUbuntuTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xdf\x6e\xd3\x30\x18\xc5\xef\xfd\x14\x9f\x86\x34\x01\x53\x62\xa6\x5d\x31\x31\xb4\x0a\x02\x44\xd0\x64\xf2\xd2\x56\x15\x45\xc8\x49\x8c\x63\x48\x6c\xcb\xfe\x5c\x48\xab\x3e\x10\xcf\xc1\x8b\xa1\xa6\x9d\xfa\xe7\xca\xe7\x9c\x9f\x65\x9d\xe3\x0f\x2c\x1f\x43\x28\x83\xc6\x70\x7b\xfd\x3a\xbe\x7e\x45\xc8\x78\x94\x66\xc5\x28\xcd\x12\x06\x8f\xff\xfe\x96\xdc\xa3\x12\x1a\x3e\x99\xb0\x12\x08\xcf\x7b\x63\x56\xca\xc4\x95\xe9\x5e\xc0\x1b\x2f\xf6\xf8\xfe\x10\xbf\x25\x64\xc4\x3e\x42\x31\x4b\xb3\xe2\xfb\x34\x61\x8f\x69\x9e\xdd\xad\xd7\xf1\x54\x38\xaf\x8c\xde\x6c\x08\x79\x97\x3f\xcc\xa1\x36\xd5\x2f\xe1\x22\xa1\xd1\xf5\xd6\x28\x8d\xb1\x6f\x80\x9e\x58\xc2\x26\x19\x54\x4d\x67\x6a\xb8\xfa\x73\xce\x06\xb8\x20\xdc\x62\x24\x05\x42\xb0\x35\x47\x01\x97\x97\x47\x99\xd2\x1e\x79\xdb\x42\xd4\xc3\x82\x48\x85\xb0\x20\xb6\xc7\xc6\xe8\x9b\xc8\x2a\xfb\xf4\x82\x55\xf6\xe6\x70\x35\x0a\x56\x3a\x5e\x0b\x88\x04\x48\x85\x57\x0d\xa2\xf5\xb7\x94\x4a\x85\x4d\x28\xb7\x03\x29\xfe\x56\x1a\xad\x33\x3f\x45\x85\x3b\x13\x4b\x85\xf7\xc7\x1b\x9f\x09\x29\xef\x06\x74\xde\xb3\x6a\x05\xd7\xc0\x03\x9a\x9d\x1a\x0a\xbb\x0e\x22\xf7\x03\xe8\x92\x3b\xda\xaa\x92\x72\x8b\xb4\x55\x1e\x3d\x7d\x09\x14\x3b\xbb\x3d\xb6\x6c\x90\x84\x24\x59\xc1\xe6\x0f\x79\x9a\x15\xf0\xf5\xe2\xf4\x5b\x2e\xbe\x91\x69\xfe\x65\x32\x4e\x60\xd7\x8c\xcc\x72\xf6\xf9\x7d\xca\x80\x7a\xb7\xdc\x47\xff\x03\x00\x00\xff\xff\x4f\xe2\x8d\x91\xf4\x01\x00\x00")

func DockerTemplatesUbuntuTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesUbuntuTmpl,
		".docker/templates/ubuntu.tmpl",
	)
}

func DockerTemplatesUbuntuTmpl() (*asset, error) {
	bytes, err := DockerTemplatesUbuntuTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/ubuntu.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1576745927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".docker/templates/alpine.tmpl":            DockerTemplatesAlpineTmpl,
	".docker/templates/debian-slim.tmpl":       DockerTemplatesDebianSlimTmpl,
	".docker/templates/docker-compose.tmpl":    DockerTemplatesDockerComposeTmpl,
	".docker/templates/docker-entrypoint.tmpl": DockerTemplatesDockerEntrypointTmpl,
	".docker/templates/docker-sync.tmpl":       DockerTemplatesDockerSyncTmpl,
	".docker/templates/dockerignore.tmpl":      DockerTemplatesDockerignoreTmpl,
	".docker/templates/makefile.tmpl":          DockerTemplatesMakefileTmpl,
	".docker/templates/readme-alpine.tmpl":     DockerTemplatesReadmeAlpineTmpl,
	".docker/templates/readme.tmpl":            DockerTemplatesReadmeTmpl,
	".docker/templates/travis.tmpl":            DockerTemplatesTravisTmpl,
	".docker/templates/ubuntu.tmpl":            DockerTemplatesUbuntuTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".docker": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"alpine.tmpl":            &bintree{DockerTemplatesAlpineTmpl, map[string]*bintree{}},
			"debian-slim.tmpl":       &bintree{DockerTemplatesDebianSlimTmpl, map[string]*bintree{}},
			"docker-compose.tmpl":    &bintree{DockerTemplatesDockerComposeTmpl, map[string]*bintree{}},
			"docker-entrypoint.tmpl": &bintree{DockerTemplatesDockerEntrypointTmpl, map[string]*bintree{}},
			"docker-sync.tmpl":       &bintree{DockerTemplatesDockerSyncTmpl, map[string]*bintree{}},
			"dockerignore.tmpl":      &bintree{DockerTemplatesDockerignoreTmpl, map[string]*bintree{}},
			"makefile.tmpl":          &bintree{DockerTemplatesMakefileTmpl, map[string]*bintree{}},
			"readme-alpine.tmpl":     &bintree{DockerTemplatesReadmeAlpineTmpl, map[string]*bintree{}},
			"readme.tmpl":            &bintree{DockerTemplatesReadmeTmpl, map[string]*bintree{}},
			"travis.tmpl":            &bintree{DockerTemplatesTravisTmpl, map[string]*bintree{}},
			"ubuntu.tmpl":            &bintree{DockerTemplatesUbuntuTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
