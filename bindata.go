// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// .docker/templates/docker-compose.tmpl
// .docker/templates/docker-entrypoint.tmpl
// .docker/templates/docker-sync.tmpl
// .docker/templates/dockerfile_alpine.tmpl
// .docker/templates/dockerfile_debian-slim.tmpl
// .docker/templates/dockerfile_ubuntu.tmpl
// .docker/templates/dockerignore.tmpl
// .docker/templates/env.tmpl
// .docker/templates/makefile.tmpl
// .docker/templates/readme.tmpl
// .docker/templates/readme_alpine.tmpl
// .docker/templates/readme_root.tmpl
// .docker/templates/travis.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DockerTemplatesDockerComposeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x10\x5d\x81\x9e\xfc\x11\x14\xc3\x3a\x01\x39\xa4\x4b\x0e\xdd\x86\x24\x68\x82\xee\x68\xa8\x36\xd3\x0a\x91\xa5\x80\x92\x9d\x74\x86\xff\xfb\x20\xcb\x76\x93\xae\xcd\x76\x51\x42\xf2\xf1\xe9\x3d\xd2\x0a\xc3\x30\xa8\x90\x8c\xd0\x8a\xc1\xd5\x75\xf4\xe5\x2a\x30\x48\x95\xc8\xd0\xb0\x20\x00\xb0\x7b\xa1\x2c\x0b\x00\x00\x44\xc1\x9f\x90\xc1\x21\xa1\xdf\x5b\x5d\xc5\xbe\x52\xd7\x10\x4d\x05\x41\xd3\xd4\xb5\xd8\x40\x74\xcb\x0d\x36\x4d\x58\xd7\xa8\x72\x97\xf3\x19\x68\x9a\x96\xe2\xb1\x14\x32\xf7\x6c\x00\x99\x56\x16\x0f\x96\x41\xd4\x25\x72\x9d\x6d\x91\x36\x42\x22\x83\xe9\xf0\x3f\xe8\xb1\x5c\x28\xa4\x54\xf1\x02\x99\x97\x15\x66\x52\xb4\xd5\x4a\xcb\xb2\x40\xcf\x1b\xc2\xe5\xf2\xd7\xb4\x53\x17\xeb\x9d\xf5\x7f\xe3\x9c\x5b\x3e\x18\x0a\x0d\x72\xca\x9e\x3f\xf6\xd5\x03\x24\xb7\x68\xec\x19\x09\x1e\xd7\x02\x76\x9a\xac\xe9\x45\x5c\x27\x49\xc2\xdc\xd1\xc6\xa8\x2a\x41\x5a\x15\xd8\xcf\x32\x84\xf9\x62\x3a\x4b\x67\xf3\x87\xf1\x8e\x74\x5e\x66\x56\x68\xd5\xca\xd3\x14\xee\x48\x54\xfa\xf0\xc2\xce\x5c\x6b\x35\x75\xa8\x63\x0b\x6e\x80\xfc\x09\xe3\x63\x92\x23\x07\x27\x02\x2f\xbe\x26\x9f\x13\xe6\x8e\x0b\xf8\x04\x6b\x4d\xb0\xa3\x9e\xce\x57\x47\xae\x3a\xea\xab\x4e\x07\x69\xd9\x92\xf4\xa0\x9b\xd1\xe8\x86\xb9\xc3\x81\x96\xfe\x42\x00\x67\x03\x25\x37\x56\x64\xef\x8c\xd9\x2f\x39\xea\x00\x51\xa6\xe3\x13\xec\x69\xc4\x2e\xeb\xd9\xcf\xc9\x6a\x7d\xf7\x2d\x7d\x98\xdd\xaf\xee\x16\xf3\xe6\xcc\x50\xba\xd6\x8f\x26\xae\x74\x8e\x91\xc3\x8f\x4f\xee\xe8\xaa\x99\x2c\x8d\x45\x8a\x84\x12\x56\x70\x99\x16\xdc\x85\xa9\x6b\x32\x67\x1b\x5a\x46\xef\x2a\xec\x72\x1d\xe2\x51\x6b\x6b\x2c\xf1\x5d\x54\x60\xa1\xe9\x25\x95\x3a\xdb\x8e\x2d\x95\xd8\x0f\x70\xb6\x4a\xbf\x4f\x1e\x26\xe9\x62\xb9\x5e\x8d\x5f\xbd\x0e\xb9\xe6\xa2\x45\x96\x52\x14\xa2\x5f\x1d\x40\x81\x85\x63\xea\x43\x00\xa3\x37\x96\x41\x38\x1a\x12\xcf\x9c\xf2\x21\xe1\x5f\xc7\xb0\x78\x34\xee\x29\x24\x23\x16\x97\x86\x62\xf3\xcc\x09\xdf\xac\xa0\x7d\x2a\x7f\x7d\x30\xaf\xf2\x96\x8b\xfb\x75\xc3\xde\xc4\x6e\xeb\x5b\xf1\xc8\x15\xff\xc7\xba\x3d\xa8\xfb\x61\x97\xf5\x8f\xbb\xdb\xc9\x7c\xf2\x3f\xfb\xf5\x2d\xef\x29\xeb\x38\x7a\x61\xc7\x61\x10\x1c\xf9\x1f\xbc\xb7\x9d\x39\x89\x0a\x89\x81\xd4\x19\x97\x41\xa0\xd0\xee\x35\x6d\x5b\x60\x8e\x1b\x5e\xca\xee\xd3\xc1\x83\x45\x52\x5c\xf6\x03\xf7\x9a\xd4\x3e\x6c\x65\xfd\x09\x00\x00\xff\xff\xe2\xa2\xa0\xbb\x42\x05\x00\x00")

func DockerTemplatesDockerComposeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerComposeTmpl,
		".docker/templates/docker-compose.tmpl",
	)
}

func DockerTemplatesDockerComposeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerComposeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-compose.tmpl", size: 1346, mode: os.FileMode(420), modTime: time.Unix(1576946164, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerEntrypointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\x2a\x29\xcf\xcc\x2b\x51\x50\x71\xe0\x02\x04\x00\x00\xff\xff\xbd\x2f\x25\x36\x15\x00\x00\x00")

func DockerTemplatesDockerEntrypointTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerEntrypointTmpl,
		".docker/templates/docker-entrypoint.tmpl",
	)
}

func DockerTemplatesDockerEntrypointTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerEntrypointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-entrypoint.tmpl", size: 21, mode: os.FileMode(420), modTime: time.Unix(1576934386, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerSyncTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x6a\xc3\x40\x0c\xc6\xf1\xfd\x9e\x42\x1c\x85\x9b\xdc\xba\x1d\x0f\xba\x94\x3e\x80\xb7\x8e\xe6\xea\x28\x97\x83\x20\x19\x49\xb6\x63\x42\xde\x3d\xc4\x86\x38\xe0\x4d\xfc\xfe\x82\x6f\x44\xd1\xc2\x14\xc1\x7f\x79\xc7\xbd\x15\x26\x8d\x0e\x60\x44\xf9\x67\xc5\x08\x26\x03\x3a\xa7\x33\x75\x8b\xdb\x54\xc8\x1e\x07\x80\x4a\x17\xe1\xed\xda\xfc\xfd\xde\x3e\x16\x5e\x75\xa6\xae\x55\x93\x64\x98\xe7\x08\x81\x92\x95\x11\x5b\xd6\x4b\xd8\xfa\xa0\x28\xe5\x10\xe1\xb3\xae\xeb\x4d\xb3\xf0\xd0\xef\x39\x49\xd6\x75\xb1\x02\x5f\xf5\x82\x47\x14\x20\x9c\x50\xfc\x53\x4b\x26\x16\xfc\x0e\x4d\xb2\x13\xbc\xe7\x62\x61\xdf\x7e\xf0\xcc\xd3\xcb\xc3\x3d\x00\x00\xff\xff\x84\x17\x8f\xff\xfb\x00\x00\x00")

func DockerTemplatesDockerSyncTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerSyncTmpl,
		".docker/templates/docker-sync.tmpl",
	)
}

func DockerTemplatesDockerSyncTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerSyncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-sync.tmpl", size: 251, mode: os.FileMode(420), modTime: time.Unix(1576945687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x51\x4f\xdb\x3c\x14\x7d\xfe\xf2\x2b\xae\xca\x27\x78\x60\x6e\x40\x7d\x63\x63\x5a\x55\xba\xad\xda\x68\xab\x50\x3a\xa1\x31\x4d\xae\x7d\xdb\xdc\x91\xd8\x96\x73\x13\x5a\x21\xfe\xfb\x14\xa7\x85\x16\x15\xf1\xb0\xa7\xd8\xf7\x1e\xd9\xe7\x1c\xdf\x93\xcf\xc9\xe8\x12\x64\xe6\xc8\xe0\x59\xa7\x7d\x7a\x02\xdd\x2b\x98\x95\x94\xe9\x28\xfa\x31\x4a\xbe\x5d\x0c\x12\x88\xad\xe3\x58\x3a\x17\x45\x07\x30\x30\x05\xcb\x2c\x83\xf1\x8a\x53\x6b\x40\x1a\x0d\xb8\x64\xf4\x46\x66\xa0\xd1\xa1\xd1\x68\x14\x61\xf1\x0e\xc8\xa8\xac\xd4\x64\x16\x90\xa2\xd4\xe8\x8b\x00\xfe\xd2\xeb\x45\xc9\xf5\x10\xa4\xbb\x03\xa9\x35\x08\x61\xac\x50\x52\xa5\x08\x2e\x1c\xd9\xd9\x7c\x85\xc6\x0a\xdc\xaa\x23\x1c\x39\xc8\x68\x36\x9f\xd3\xfa\x13\x3a\x79\x59\x64\x61\xb1\x50\x0a\x16\xc4\xa0\xa4\x50\xe8\x99\xe6\xa4\x24\x63\x01\xd6\xa1\x99\x65\xb2\x78\x81\x3e\x3e\xde\x91\x41\x0e\x4d\x15\x18\x39\x72\x1d\xa0\x75\xdd\x35\xf5\xe8\x00\x7a\x1e\x25\x23\x48\xa8\xc8\x73\x29\x33\x40\x53\x91\xb7\x26\x47\xc3\x41\x91\x54\x4c\x55\x0d\x21\x6e\xce\x59\xcb\x10\x39\x54\x68\xaa\xc6\xbd\x7a\x15\xf5\x87\x53\x18\x77\x27\x5f\xcf\x5b\x4f\xb5\x78\x46\xe6\xec\xff\xba\xd8\x82\xdb\xe8\xbf\xe9\x20\x99\x5c\x77\xbf\xff\xee\x0f\xa7\x5b\xa0\xd6\x36\xe3\x6d\x93\x81\x0c\x5b\xe0\x14\xf7\x92\xbb\x27\x4e\xb7\x05\x06\x93\x32\x6b\x10\x84\xd0\xe8\x38\x3d\x3f\x05\x31\x83\x87\x87\xf6\x14\x7d\x41\xd6\x3c\x3e\x42\xca\xec\x8a\xb3\x38\x5e\x10\xa7\xe5\xac\xad\x6c\x1e\xf3\x3d\x19\x76\xde\xfe\x41\xc5\xcd\xe6\x69\x20\x6a\xca\x87\x87\xa0\xf4\xcb\xca\x8e\x97\x42\x94\x6e\xe1\xa5\xc6\xba\xbc\x0f\xa0\x9a\x59\xda\xd3\x31\x65\xee\x56\xfb\x1a\xed\x28\x7a\x39\xb8\xd1\x65\x77\x30\x9c\x74\x07\xc3\x7e\x02\xcb\x13\xbf\xbc\xb3\x15\x7c\x58\x2f\x3e\x39\x6f\xd9\x9a\x5c\x52\x56\x6b\xfa\xb8\xf5\xb0\xbe\x34\x4c\x39\x42\x59\xa0\x0f\x36\xe5\x77\x9a\x3c\x08\x17\x34\xad\xef\x96\x5a\xd7\x7d\x10\x17\xd0\x38\x20\xd2\x67\xc9\xa2\x80\xfa\x19\xe3\x22\x85\xdb\x08\x6a\x78\x51\x6e\x60\x0a\x8e\xb6\xdc\x79\xff\x7c\xb8\x96\x2c\x8f\xde\x0a\xd4\x86\xdb\xce\x9b\x5b\x93\xad\xde\x8a\xd0\x3a\x2e\x9b\x08\xd4\xfb\x82\xb5\x6a\x66\xff\xea\x9e\x58\xa5\xc0\x36\x68\x06\x65\x0d\xe3\x92\xa3\xeb\xab\x7e\xd2\xd0\xde\x0d\x7e\x28\xc5\x35\xdf\xe0\x9a\x75\xab\x57\x27\x6e\xee\x6d\x1e\x9a\xce\x63\x45\xb6\x2c\x80\x72\xb9\xc0\xa8\x37\x1a\xdf\x80\x10\x75\xfb\x3c\xfc\x5b\x9e\x43\xb1\x15\x8f\xe8\x00\xba\x9b\x2c\xbd\x72\xc3\xbf\x44\xa8\x3f\x9c\x24\x37\xe3\xd1\x60\x38\x81\x9f\xad\x20\xaa\xf5\xeb\x6f\x00\x00\x00\xff\xff\x88\x87\x4e\x40\xfd\x04\x00\x00")

func DockerTemplatesDockerfile_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_alpineTmpl,
		".docker/templates/dockerfile_alpine.tmpl",
	)
}

func DockerTemplatesDockerfile_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_alpine.tmpl", size: 1277, mode: os.FileMode(420), modTime: time.Unix(1576950494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_debianSlimTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x51\xcb\xda\x30\x18\x85\xef\xf3\x2b\x5e\x1c\x78\x31\x49\x33\xf0\x62\x20\x73\x28\x5b\x37\xca\x66\x2b\x59\x55\x64\x8e\x11\xdb\x2c\xcd\x6c\x93\x90\xbc\x75\x8a\xf8\xdf\x87\xd5\x8f\x4f\xbd\xca\x39\x79\x08\x3c\x27\x5f\x78\x36\x03\x77\xc4\xca\x9a\xd1\x30\x7a\x4f\x43\xad\x1b\x1a\xd0\x4b\x2c\x2a\x42\x66\xd3\x24\xcd\xa7\x49\x1a\x73\x38\xbc\xf3\x87\x9d\xdd\xc3\x87\x5b\x98\x38\x6f\xd1\x9a\x46\xe8\x3a\x2a\x6c\xf3\x91\x90\x29\xff\x0a\xf9\x2a\x49\xf3\xdf\xcb\x98\xff\x48\xb2\x74\x7c\x3a\x45\x4b\xe9\x83\xb6\xe6\x7c\x26\xe4\x53\x36\x5f\x43\x69\x8b\x9d\xf4\x54\x1a\xf4\x47\x67\xb5\xc1\x28\x54\xc0\x1e\x2a\xe1\x8b\x14\x8a\xaa\xb1\x25\x0c\x0e\xcf\xac\x83\x1b\x22\x1c\x52\x25\x11\x5a\x57\x0a\x94\xd0\xef\xdf\xdd\x69\x13\x50\xd4\x35\xd0\x23\x6c\x88\xd2\xf8\xf2\xc6\x69\x37\x7c\x85\xb4\x75\xca\x8b\x52\x02\x95\xa0\x34\x0e\x2a\x44\x17\x46\x8c\x29\x8d\x55\xbb\xbd\x4c\x62\xf8\x4f\x1b\x74\xde\xfe\x95\x05\x5e\x4b\xa4\x34\x4e\xee\x57\xbd\x91\x4a\x8d\x3b\xf4\x6c\x56\xd4\x52\x18\x10\x2d\xda\x6b\xea\x14\x7d\x03\xd4\xff\x01\xb6\x17\x9e\xd5\x7a\xcb\x84\x43\x56\xeb\x80\x81\xbd\x05\x86\x8d\xbb\x1c\x17\xd6\x45\x42\xe2\x34\xe7\xeb\x79\x96\xa4\x39\xfc\xec\x3d\x7e\x44\xef\x17\x59\x66\xdf\x17\xb3\x18\xae\x66\x64\x95\xf1\x6f\x9f\x13\x0e\xcc\xba\x9b\x2c\x2b\x05\x0a\xf2\x3f\x00\x00\xff\xff\xd3\x2b\x6a\xe0\xe1\x01\x00\x00")

func DockerTemplatesDockerfile_debianSlimTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_debianSlimTmpl,
		".docker/templates/dockerfile_debian-slim.tmpl",
	)
}

func DockerTemplatesDockerfile_debianSlimTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_debianSlimTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_debian-slim.tmpl", size: 481, mode: os.FileMode(420), modTime: time.Unix(1576950484, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_ubuntuTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x5d\x8e\xd3\x30\x14\x85\xdf\xbd\x8a\xab\x41\x1a\x01\xa3\xc4\x8c\xe6\x89\x11\x83\xa6\x82\x00\x11\x34\xa9\xdc\xb4\x55\x45\x11\x72\x12\xe3\x18\x12\xdb\xb2\xaf\x81\xb4\xea\x82\x58\x07\x1b\x43\x4d\x8b\xfa\xf3\xe4\x7b\xcf\x67\x59\xdf\xf1\x3b\x96\x8f\x21\x94\x41\x63\xb8\xbf\x7d\x19\xdf\xbe\x20\x64\x3c\x4a\xb3\x62\x94\x66\x09\x83\xe9\xdf\x3f\x25\xf7\xa8\x84\x86\x0f\x26\xac\x05\xc2\xd3\xde\x98\xb5\x32\x71\x65\xba\x67\xf0\xca\x8b\x03\x7e\x3c\xc6\xaf\x09\x19\xb1\xf7\x50\x2c\xd2\xac\xf8\x3a\x4f\xd8\x34\xcd\xb3\x87\xcd\x26\x9e\x0b\xe7\x95\xd1\xdb\x2d\x21\x6f\xf2\xc9\x12\x6a\x53\xfd\x10\x2e\x12\x1a\x5d\x6f\x8d\xd2\x18\xfb\x06\xe8\xd9\x4a\xd8\x2c\x83\xaa\xe9\x4c\x0d\x37\xbf\x2f\xd9\x00\x57\x84\x5b\x8c\xa4\x40\x08\xb6\xe6\x28\xe0\xfa\xfa\x24\x53\xda\x23\x6f\x5b\x88\x7a\x58\x11\xa9\x10\x56\xc4\xf6\xd8\x18\x7d\x17\x59\x65\xff\xbf\x60\x95\xbd\x3b\x5e\x8d\x82\x95\x8e\xd7\x02\x22\x01\x52\xe1\x4d\x83\x68\xfd\x3d\xa5\x52\x61\x13\xca\x5d\x41\x8a\xbf\x94\x46\xeb\xcc\x77\x51\xe1\x7e\x89\xa5\xc2\xc7\xd3\x8e\x4f\x84\x94\x0f\x03\xba\xf4\xac\x5a\xc1\x35\xf0\x80\x66\x3f\x0d\xc2\xae\x83\xc8\x7d\x03\xfa\x93\x3b\xda\xaa\x92\x72\x8b\xb4\x55\x1e\x3d\x7d\x0e\x14\x3b\xbb\x3b\x76\x6c\x18\x09\x49\xb2\x82\x2d\x27\x79\x9a\x15\xf0\xf9\xea\xfc\x5b\xae\xbe\x90\x79\xfe\x69\x36\x4e\x60\x6f\x46\x16\x39\xfb\xf8\x36\x65\x40\x8d\x3d\xc8\xd2\x9a\x23\x27\xff\x02\x00\x00\xff\xff\xe9\x63\x67\x16\xf9\x01\x00\x00")

func DockerTemplatesDockerfile_ubuntuTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_ubuntuTmpl,
		".docker/templates/dockerfile_ubuntu.tmpl",
	)
}

func DockerTemplatesDockerfile_ubuntuTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_ubuntuTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_ubuntu.tmpl", size: 505, mode: os.FileMode(420), modTime: time.Unix(1576950475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xce\xc9\xcc\xe5\x4a\xcc\x29\xc8\xcc\x4b\xe5\xf2\x4d\xcc\x4e\x4d\xcb\xcc\x49\xe5\x4a\xc9\x4f\xce\x4e\x2d\xd2\x4d\xce\xcf\x2d\xc8\x2f\x4e\xd5\xab\xcc\xcd\x41\x17\xd2\x02\x0b\xea\xa5\x67\x96\x80\x09\x7d\x08\xa9\x05\xa5\xb4\xb8\x00\x01\x00\x00\xff\xff\x78\xa9\x74\xfb\x57\x00\x00\x00")

func DockerTemplatesDockerignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerignoreTmpl,
		".docker/templates/dockerignore.tmpl",
	)
}

func DockerTemplatesDockerignoreTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerignore.tmpl", size: 87, mode: os.FileMode(420), modTime: time.Unix(1576745854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesEnvTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\x83\x30\x18\x86\xef\xfe\x8a\xd0\xee\xaa\xd3\x42\x27\x1d\xe4\xf0\x69\x83\x64\xb5\x2a\x26\xba\xde\xc4\x39\xc7\x02\xd3\x43\x23\x74\x10\xf2\xdf\x87\x2e\x5a\xe9\xed\x7b\x9f\x97\xf7\xe1\xdb\x22\x7e\x13\xfd\x60\xf1\x77\x9a\xf0\xaa\x0c\x59\x55\xe4\x31\x56\x0a\x39\x65\x23\x8b\x3c\x46\x5a\x9b\x8e\x43\x34\xf1\xa3\xb8\x22\xad\x95\x12\x5f\xc8\x09\x6a\xd9\x6a\x6d\x2b\xd5\xf6\x9f\x23\xfb\x27\xf7\x4d\x49\x72\x46\xd3\x64\xb5\x33\x45\x02\x67\xc2\x32\x08\xc9\x54\xa5\xb7\xbe\x5d\x95\x01\x30\x82\x87\xd5\x5b\xf4\x0c\x11\xc1\x4f\xea\x61\xab\x9f\x67\x34\x2e\xf4\xeb\x9c\x38\x44\xb3\x2a\xa2\x47\x7c\xf0\x7d\x93\x0a\x93\xac\x2d\x22\x3f\xb5\x1c\x44\x23\xdb\xfa\xda\x7c\x5b\x24\x06\xc6\x69\xb8\xfc\xeb\x3b\xae\xe3\x2d\x34\x4b\x73\x8e\x0f\x3b\xd7\x5d\xc8\x1b\x94\x50\xa5\x19\x67\x78\x63\x5f\x3a\xb9\xf7\x76\x1d\xb2\x2f\xdd\xef\x78\x6c\x46\xfd\x49\x7c\xd4\x7d\x6d\x9d\x68\x00\x09\x3c\x68\x0d\x9c\xac\xfb\x17\xd7\xfb\x0b\x00\x00\xff\xff\xd4\x69\x13\x70\x83\x01\x00\x00")

func DockerTemplatesEnvTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesEnvTmpl,
		".docker/templates/env.tmpl",
	)
}

func DockerTemplatesEnvTmpl() (*asset, error) {
	bytes, err := DockerTemplatesEnvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/env.tmpl", size: 387, mode: os.FileMode(420), modTime: time.Unix(1576920292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xdf\x0f\xd2\x30\x10\x7e\xee\xfd\x15\x97\x6c\x66\xf8\xb0\x15\x66\x82\xd0\x48\x82\x89\x44\x79\xe0\x47\x94\x68\x7c\xd1\xd4\xad\xb0\x65\xdd\xba\xac\x1d\xa8\xc0\xff\x6e\xda\x4d\xc7\x03\xbe\x5c\x7b\xdf\x7d\xfd\xee\xbb\xde\x7a\xf3\xf6\xfd\x0a\xd9\x02\x7f\x8e\x9b\xdf\x85\x3a\x53\x73\xc9\x2b\x13\xa6\x2a\x29\x44\x03\x9f\x57\x1f\x3f\xad\x77\x5b\xb6\x40\x7f\xa4\x33\x21\x25\x9e\x1a\x51\xe3\xe1\xcb\x7a\x7b\xf8\xde\x17\xf1\x9d\xe3\x1e\x73\x29\xf0\x86\xfc\x52\x60\x70\xad\x9b\xbc\x32\xe8\xc7\xf7\x00\x6f\x98\xb4\x06\xc3\x14\x83\x45\x80\xe1\x11\xe3\x97\x00\x9e\x87\x46\x68\x43\x08\x23\xf6\x8c\xc0\x46\x06\xc4\x34\xad\x70\xd5\xb3\x68\x74\xae\x2a\xc2\x48\x9a\xeb\x5a\xf2\x5f\x7f\x91\x08\xfa\x0b\x03\xb2\x14\x49\xa6\xd0\x1f\xf5\x3e\x3a\xdd\xbc\xe4\x27\x61\x85\x7f\xb4\xb9\x4c\xbb\x14\x79\x95\xa2\xe1\x27\x34\x99\x28\x23\x88\xf6\x1f\x76\xdb\xaf\xac\xab\x81\x8b\x56\xad\x1b\x19\xbb\x77\xa1\x41\xff\xea\xfe\xe6\xce\xfc\x6b\xdf\xe1\x8e\xd1\xc0\xb3\x7a\xcf\x28\xff\x30\xc9\xed\x54\xce\x54\xdd\xea\x2c\xec\x9c\x31\x62\x13\xec\x45\x1c\x36\x38\x1a\x78\x30\x5c\x1f\xbc\xb9\xa7\x4f\x9a\xfe\x8f\xf1\x60\x21\x13\xb2\xb6\xdf\xb2\x77\x9b\x49\x54\x59\xf2\x2a\xd5\x0e\x1e\xfa\xdb\x0c\x6c\x40\x86\x1b\x5e\x08\xbb\x53\x20\x4b\x2d\x52\x0c\x2b\x0c\x34\xfd\xe6\x79\x94\xd6\x01\xfa\x6f\x00\x3c\xcc\x8c\xa9\x35\xa3\x54\x1b\x9e\x14\xea\x2c\x9a\xa3\x54\x97\x28\x51\x25\xe5\x74\x1a\xbf\x7e\x35\x1b\xcf\xe9\x64\x16\x4f\x27\xe3\x39\xbc\xb0\x63\x30\xf8\x13\x00\x00\xff\xff\xa4\xdc\xfd\x9f\x6f\x02\x00\x00")

func DockerTemplatesMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesMakefileTmpl,
		".docker/templates/makefile.tmpl",
	)
}

func DockerTemplatesMakefileTmpl() (*asset, error) {
	bytes, err := DockerTemplatesMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/makefile.tmpl", size: 623, mode: os.FileMode(420), modTime: time.Unix(1576745814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6e\x23\xb7\x15\xbe\x9f\xa7\x38\x6b\x05\x88\x64\x98\x1a\xf9\x0f\x90\x85\x24\x68\x62\x77\x5d\xa3\x41\x92\xae\x15\xf4\xc2\x30\x60\xce\xcc\x19\x0d\x23\x0e\x39\x4b\x72\x24\x7b\x0d\xf7\x15\xda\x3e\x40\xb1\x37\x7b\xdb\xfb\x3e\x4f\x5f\xa0\xfb\x08\xc5\x21\x47\xbf\xb6\x77\x17\xce\xec\xc5\x5a\x3c\x3c\x3c\xdf\xc7\xf3\x47\x72\x3a\xe0\xe6\x42\x39\x96\xe9\x74\x8a\x26\x8a\xbe\x79\xc5\x18\x8c\xf5\x29\x58\xc7\x8d\x03\xc6\xbe\x8b\x3a\x1d\x18\xf3\x44\x22\xe8\x1c\x4e\xb5\x72\xa8\x9c\x8d\xf6\xfb\x70\xf5\x27\x3d\x07\xa7\xa1\xb6\x78\xdd\xed\x14\x7a\xce\x9c\x66\xb5\xc5\x5e\x04\x40\xd3\xaf\x85\xb1\xae\x99\xcd\xe9\xf7\x62\x12\xc2\xfc\xa9\x41\xee\x10\xb8\x02\x2e\x05\xb7\xd7\xdd\x4e\xea\x25\x8c\x2b\xe6\x25\x3d\x8f\x72\xe6\x99\xb1\x53\x5d\x56\xda\xdb\x0a\x54\x59\x1a\x04\x6b\x06\xff\x28\xb9\x75\x22\xb5\xc8\x4d\x5a\x00\x57\x19\xfc\x59\x24\x5c\xf1\xeb\x6e\x07\xd7\xa7\x18\x57\x19\x9b\xfa\xa9\xb5\xd5\x63\x6d\xa0\x32\xfa\xf6\xee\xba\xdb\x71\xda\x30\xff\x7b\xdd\xfa\x2d\xa6\xb5\x43\x18\x93\xbf\x20\xd5\x65\xc9\x55\x46\xa6\x83\x9c\x05\x3f\x36\xf2\x8d\x75\xbc\xac\x24\x5a\x72\xdf\xfa\xaa\x20\x65\x3a\x5f\x5f\xe3\x37\xcc\x9d\xf7\x46\x46\x7f\x83\x0f\xbe\xaf\x5d\xa1\x0d\x09\x79\xf8\x15\xc4\x1f\xdf\x7f\xf8\x97\x0f\x89\x11\x49\xed\x84\x9a\x5c\x77\x3b\x2c\x5d\x1b\x07\xb5\xcb\x42\xcf\xe1\x4e\xd7\x06\x6c\x5d\x55\xda\xb8\xeb\x6e\xc7\x52\xbc\x48\xc6\x1a\x59\x6f\x15\x7a\x54\x99\x0f\x3c\x45\x7e\x15\x63\x1a\x76\x60\x19\xd4\x28\x7a\xad\x0d\xe4\xcd\x90\x4f\x70\x8f\x20\x40\x21\x66\xb4\x20\xa9\x85\xcc\x40\x94\x7c\x82\x10\x02\xd6\x8f\xa2\x9b\x9b\x1b\x5b\xa0\x94\x51\x90\x40\x55\x4b\x09\xb7\x03\xf3\x6e\xaa\x67\xb1\xf7\xdf\xe8\xfe\x1e\xfa\x67\xc2\xc0\xc3\x03\x69\x47\x91\x36\xf0\x68\xdd\x22\xf4\x01\x24\xe8\x75\x88\xdc\x56\x46\xad\xd6\xf9\x61\xc8\xf4\x6f\x77\x1a\x70\x53\x2b\x60\x4e\x00\x63\xa6\x04\x36\x83\xaf\xba\xd5\x3c\xeb\xc5\xe4\xf5\x51\xac\x2b\x17\xf3\xaa\xf2\xa3\x67\x19\xde\xdf\x8b\x1c\xfa\x3f\x70\x8b\x0f\x0f\xec\xfe\x1e\x55\x46\xb2\x20\x81\x87\x87\x1d\xc2\x87\xcd\x7f\xc1\x89\xcf\x25\x6a\x14\x5d\xfa\xaa\x23\x87\x57\x80\x92\x6f\x2a\x4d\x1b\xa5\xe7\xdc\x51\x57\xc0\x32\xd8\x48\xf5\xc5\x9a\x85\x8f\x60\x99\xe5\x9b\x58\x4e\x9b\xcf\xd9\x25\x95\x95\x19\x5f\x04\x97\x01\x43\x28\x87\x26\xe7\x29\x3e\xe2\xbf\xb5\xcb\x50\x22\x41\xf0\x59\xb8\x35\xdd\x4d\x53\x81\xc5\xb8\x40\x05\xba\x42\x05\x42\x85\xe4\x4e\x8c\x9e\x5b\x34\x70\x55\x38\x57\x8d\xe2\x58\xea\x94\xcb\x42\x5b\x37\x3a\x1c\x0c\x06\xd7\xdd\x27\xc5\xbd\x26\x22\x4f\x15\xf7\xf3\x14\x7d\xee\xcc\xe0\xab\x5f\xfe\x7a\xd6\x64\xc5\x66\xc6\x78\xd9\xca\x5b\x4f\xb4\x80\x28\xfa\x1e\x72\x9c\x83\x15\x34\x03\x8b\x76\x40\xae\x2b\x50\x56\xbe\x96\x6a\x95\xa1\xb1\xce\x7b\xae\x40\x48\xb8\x15\xa9\x1d\xfd\x4e\x56\xc0\x6a\x2a\x5f\xa3\x78\x89\xc0\xe0\x32\x35\xbc\x42\xe0\x52\x7a\x8c\xf1\x1c\xd1\x59\xc8\x8d\x2e\xbd\xd6\xd7\x16\x9c\x28\x51\x0a\x85\xfd\x16\xe0\x2c\x54\x42\x21\xaf\x68\xcb\x1b\xd8\xeb\xb8\xc4\x63\x0b\x1b\xa8\xa9\x71\xa1\x84\x9a\xac\x2c\xbc\x94\xd0\x26\x89\x53\x2d\x25\xa6\x0e\x70\x86\xe6\x2e\xf0\x78\x12\x2d\x70\xf3\x5a\x5a\xe1\xd7\xb6\xa1\xdc\x86\x57\xd8\x1d\x72\x03\x07\x83\xfd\xa3\x35\x3e\x8d\x47\x5c\xc1\x1d\xcc\xd1\x20\x38\x12\x60\x06\x09\xe6\xda\xa0\x57\x6f\x05\xdc\x0a\x95\x7a\x73\xc7\x6c\xff\x80\x1d\x0c\xbe\x84\xc3\xf6\x9a\x36\x88\x68\xc8\x85\xc4\xbe\xbb\x75\xab\xd4\x68\x08\x50\x05\x58\x3e\x43\xaa\x8e\x85\x52\x8b\x90\xa9\x9d\x01\x63\xfe\xff\xe7\x80\xb9\x05\x0e\xa4\xe1\x17\xb4\xe1\x76\x2c\xb9\x90\xc0\x58\x55\x68\xe5\x8b\x81\x0e\xe9\x75\x87\x97\x62\x52\x38\x28\x08\x3d\xe8\xa8\xba\x4c\xd0\x58\xd0\x06\xc2\x62\x9e\x65\x06\xad\xc5\x17\x27\xa1\x85\x9d\x33\xad\xb8\xcc\x60\x6c\xea\xb2\xda\x01\xc6\x66\x68\x44\x2e\x30\x03\x06\x67\xc2\x56\x92\xdf\x2d\x48\x25\x77\xb0\x9c\xa4\x7d\x34\x34\xc7\x4d\x4a\xf0\x44\xd7\x0e\xd6\xcd\xbd\x94\xd5\xe4\xdb\x9d\xa3\x61\x7f\x38\x1c\x0c\x8e\x86\x7b\x07\xfd\xc3\xe1\xf1\xc9\xe1\xc9\xde\xfe\xb4\xdc\xf9\x82\x88\xf9\x2a\xe5\x60\x78\x26\x6a\xdf\x6f\xf7\xa7\x25\x70\xa3\x6b\x95\x01\x87\x4a\xf2\x14\xe9\xc0\xf8\x85\x1b\x11\xc2\x8b\xb7\x74\xfb\xa1\xa6\x53\xc2\x8b\xf8\x3a\xdd\x72\x6a\xa0\x85\xd5\x19\x75\x72\x30\xa0\x8a\xfc\xb9\x76\x55\xbd\x2a\x48\xbd\x79\x85\x68\xaf\x14\x7e\xb3\x5a\x01\x63\xe1\xcf\x27\x8b\xc1\xab\xb4\x56\x0d\x34\x91\xd0\xb5\xc9\x85\xae\x9a\x25\x04\x4f\x60\xab\x2d\x73\xb8\xfc\xcb\x8f\xc2\x21\x2c\x94\x5b\x41\xce\xb5\x94\x7a\x4e\xe9\xbc\x3a\x90\xe8\x1a\xe0\x1c\x9a\xc5\x31\xb4\xd4\x69\x11\x91\x0e\x97\x25\xe2\xbc\xd0\x5b\xa8\x0d\x66\x4b\x88\x7c\xa6\x8d\x70\x68\xd7\x7a\xfb\xd6\x89\xcf\x03\x6a\xc1\x2d\x2c\xb4\xb3\xb6\x77\x4b\xef\x3f\xc3\x72\xba\xf4\xaf\x78\xf8\xa1\xc7\x16\x2a\xd7\xa6\xe4\x4e\x68\x45\xa5\x8a\xc6\x67\x58\x70\x43\x1b\x4c\x2a\xa3\x29\x5f\x17\x04\x7e\xb5\x14\x69\x2b\xf5\x7c\x0f\x92\xda\x01\xe6\x39\xa6\x4e\xcc\x10\x4a\x74\x85\xf6\xaf\x98\x09\x77\x05\x9a\xad\xde\xd2\x24\x45\x63\x0e\xba\xe7\x5e\xc9\xc2\xdf\x0e\xa9\x56\x83\xee\xde\xcb\x7a\xc9\x85\x4a\x65\x9d\x91\xb3\xde\x60\xa8\x84\x5e\x2b\x41\x30\x8d\xb5\xe5\xb6\xdf\xd6\x22\x9d\x3e\xde\x28\x25\x04\x35\x16\x38\x59\xee\x04\xba\xbe\xcd\x0b\xcf\x0c\x2d\x2c\x4c\xf5\x9e\x76\x47\x4b\x74\x6d\x5d\x22\xec\x0f\x4e\x8e\x06\x87\xc3\x93\xe3\xe1\xe1\xe0\x78\x08\x0c\xde\x04\x39\x87\xe6\x59\xe0\xbf\x51\x90\xb7\x96\xf7\x46\x5b\x61\x1a\x8e\xa8\x70\x93\xbb\x38\xeb\xaf\xae\xe1\xfe\x61\x1d\xde\xad\xfe\x6d\x0d\x13\x54\x68\xe8\xc5\x98\xdc\x05\x1e\xe1\x0d\x9b\x72\xca\x3b\x3a\x31\x88\x88\x74\x10\xf2\x30\x23\x07\xf9\x8b\x7d\xf4\x23\x3a\xda\x32\x9d\x8e\x4a\xcf\x61\xe4\x5f\x11\xd0\xbc\xd2\xa3\xe8\xe3\xfb\x7f\x7e\x80\xdd\xdd\xe6\xdd\xb8\xbb\x1b\xed\xc2\xb9\x70\x45\x9d\x8c\xe0\xea\x0f\x8d\x34\xbc\x47\xec\x28\x8e\x27\x7e\xaa\x9f\xea\x32\x6e\xe6\x7a\x4b\x13\x16\x13\xea\xf3\xa8\x0a\x5d\xbf\x43\xb7\x65\x6a\x6b\xf6\x49\x93\x5b\x3a\x81\xe9\xa3\x0f\x07\x51\xb4\x1a\x69\x65\xf7\x40\x58\x5b\x63\xe8\xf9\x39\x72\x57\x1b\x04\x83\x6f\x6b\xb4\xd4\x2b\x0c\xc2\x1c\x65\xaa\x4b\x7c\xf5\x4d\x62\x20\xfe\xee\x35\xa2\x84\xdc\xa0\xbf\xa1\xa5\x05\xa6\x53\xb8\x6a\x2c\x54\x7c\x82\x9f\xda\x6b\xbc\xfe\xfd\x29\x0e\x8b\x7a\xfd\xe8\x12\x11\xae\x6e\xfa\x71\xa6\x53\x1b\x9f\xfe\xfc\xd3\xf8\xcd\xc5\x0f\xbf\x8e\x2f\x7e\x3a\xef\x97\xd9\xcd\x17\xdb\xb3\x71\x22\x75\x12\x97\xdc\x3a\x34\x4f\xda\xea\x41\x4e\xe9\x80\x8e\x0b\x69\xfb\xde\x39\x8f\x3e\x97\x44\xd1\x39\xb5\x05\x0e\xff\xfd\xf7\x3f\xfe\xf7\x9f\xbf\x83\xc8\xc1\x15\xc2\xa7\xfc\x6f\xd4\xc2\xe8\xc1\x86\x19\x2d\x79\xf5\xff\x00\x00\x00\xff\xff\x5d\xf3\xbf\x9a\x4f\x13\x00\x00")

func DockerTemplatesReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadmeTmpl,
		".docker/templates/readme.tmpl",
	)
}

func DockerTemplatesReadmeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme.tmpl", size: 4943, mode: os.FileMode(420), modTime: time.Unix(1576950591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xef\x6e\x23\xb7\x11\xff\xbe\x4f\x31\x67\x05\x88\x64\x98\x5a\xc9\xbe\x03\x64\x21\x09\x9a\xd8\xbd\xab\xd1\x20\x49\xcf\x0a\xfa\xc1\x30\x20\xee\xee\xac\x96\x11\x97\xdc\x90\x5c\xc9\x8e\xe1\xbe\x42\xdb\x07\x28\xf2\x25\x5f\xfb\xbd\xcf\xd3\x17\x68\x1e\xa1\x18\x72\xf5\xd7\x72\xee\xe0\xec\x7d\x38\x8b\xc3\xe1\xfc\x7e\x1c\xce\x0c\x39\xdb\x01\xb7\x14\xca\xb1\x4c\xa7\x73\x34\xc0\x80\xcb\x4a\x28\x8c\xa2\xcf\x5e\x31\x06\x13\x7d\x01\xd6\x71\xe3\x80\xb1\x2f\xa2\x4e\x07\x26\x3c\x91\x08\x3a\x87\x0b\xad\x1c\x2a\x67\xa3\x61\x1f\x6e\xfe\xa4\x97\xe0\x34\xd4\x16\x6f\xbb\x9d\x42\x2f\x99\xd3\xac\xb6\xd8\x8b\x00\x68\xfa\xad\x30\xd6\x35\xb3\x39\xfd\x5e\x4d\x42\x98\xbf\x30\xc8\x1d\x02\x57\xc0\xa5\xe0\xf6\xb6\xdb\x49\xbd\x84\x71\xc5\xbc\xa4\xe7\x51\x2e\x3d\x45\x76\xa1\xcb\x4a\x7b\x5b\x81\x33\x4b\x83\x60\xcb\xe0\x1f\x25\xb7\x4e\xa4\x16\xb9\x49\x0b\xe0\x2a\x83\x3f\x8b\x84\x2b\x7e\xdb\xed\xe0\xf6\x14\xe3\x2a\x63\x73\x3f\xb5\xb5\x7a\xa2\x0d\x54\x46\xdf\xdd\xdf\x76\x3b\x4e\x1b\xe6\x7f\x6f\x5b\xbf\xc3\xb4\x76\x08\x13\x72\x1c\xa4\xba\x2c\xb9\xca\xc8\x74\x90\xb3\xe0\xd0\x46\xbe\xb3\x8e\x97\x95\x44\x4b\xee\xdb\x5e\x15\xa4\x4c\xe7\xdb\x6b\xfc\x86\xb9\xf3\xde\xc8\xe8\x6f\xf0\xc1\x97\xb5\x2b\xb4\x21\x21\x0f\xbf\x82\xf8\xd7\x9f\x7f\xf9\x97\x3f\x12\x23\x92\xda\x09\x35\xbb\xed\x76\x58\xba\x35\x0e\x6a\xd7\x85\x5e\xc2\xbd\xae\x0d\xd8\xba\xaa\xb4\x71\xb7\xdd\x8e\xa5\xf3\x22\x19\x6b\x64\xbd\xcd\xd1\xa3\xca\xfc\xc1\xd3\xc9\x6f\xce\x98\x86\x1d\x58\x1f\x6a\x14\xbd\xd5\x06\xf2\x66\xc8\x67\x78\x42\x10\xa0\x10\x33\x5a\x90\xd4\x42\x66\x20\x4a\x3e\x43\x08\x07\xd6\x8f\xa2\xe9\x74\x6a\x0b\x94\x32\x6a\xc2\xae\xaa\xa5\x84\xbb\x81\xf9\x69\xae\x17\xb1\xf7\xdf\xf8\xe1\x01\xfa\x97\xc2\xc0\xe3\x23\x6b\x42\x72\x3a\x9d\x46\x91\x36\xf0\x64\xf9\x2a\x02\x02\x56\xd0\xeb\x10\xc7\xbd\xc0\xda\xac\xf3\xc3\x10\xf9\x9f\x1f\x35\x1c\x4c\xad\x80\x39\x01\x8c\x99\x12\xd8\x02\x3e\xe9\x56\xcb\xac\x17\x93\xf3\xc7\xb1\xae\x5c\xcc\xab\xca\x8f\x9e\x25\xfa\xf0\x20\x72\xe8\x7f\xc5\x2d\x3e\x3e\xb2\x87\x07\x54\x19\xc9\x82\x04\x1e\x1f\x8f\x08\x1f\x76\xff\x05\x5f\x3e\x17\xaf\x51\x74\xed\x93\x8f\xfc\x5e\x01\x4a\xbe\xab\x34\x6f\x94\x9e\x73\x47\x5d\x01\xcb\x60\x27\xe2\x57\x6b\x56\x3e\x82\x75\xb0\xef\x62\x39\x6d\x3e\x64\x97\x54\x36\x66\x7c\x2e\x5c\x07\x0c\xa1\x1c\x9a\x9c\xa7\xf8\x84\xff\xde\x2e\x43\xa6\x04\xc1\x07\xe1\xb6\x74\x77\x4d\x05\x16\x93\x02\x15\xe8\x0a\x15\x08\x15\x62\x3c\x31\x7a\x69\xd1\xc0\x4d\xe1\x5c\x35\x8e\x63\xa9\x53\x2e\x0b\x6d\xdd\xf8\x6c\x30\x18\xdc\x76\x0f\x8a\x7b\xcd\x89\x1c\xca\xf1\xe7\x29\xfa\xd8\x59\xc0\x27\xdf\xfd\xf5\xb2\x89\x8a\xdd\x88\xf1\xb2\x8d\xb7\x0e\x54\x82\x28\xfa\x12\x72\x5c\x82\x15\x34\x03\xab\xaa\x40\xae\x2b\x50\x56\x3e\xa5\x6a\x95\xa1\xb1\xce\x7b\xae\x40\x48\xb8\x15\xa9\x1d\xff\x4e\x56\xc0\x6a\xca\x62\xa3\x78\x89\xc0\xe0\x3a\x35\xbc\x42\xe0\x52\x7a\x8c\xc9\x12\xd1\x59\xc8\x8d\x2e\xbd\xd6\xa7\x16\x9c\x28\x51\x0a\x85\xfd\x16\xe0\x2c\x50\x66\xf3\x8a\xb6\xbc\x83\xbd\x8d\x4b\x3c\xf6\xb0\x81\x6a\x1b\x17\x4a\xa8\xd9\xc6\xc2\x4b\x09\xed\x92\xb8\xd0\x52\x62\xea\x00\x17\x68\xee\x03\x8f\x83\x68\x81\x9b\xd7\xd2\x0a\x3f\xb5\x0d\xe5\x36\xbc\xc2\xee\x91\x1b\x38\x1d\x0c\x5f\x6f\xf1\x69\x3c\xe2\x0a\xee\x60\x89\x06\xc1\x91\x00\x33\x48\x30\xd7\x06\xbd\x7a\x2b\xe0\x56\xa8\xd4\x9b\x7b\xc3\x86\xa7\xec\x74\xf0\x31\x1c\xf6\xd7\xb4\x41\x44\x43\x2e\x24\xf6\xdd\x9d\xdb\x84\x46\x43\x80\x32\xc0\xf2\x05\x52\x76\xac\x94\x5a\x84\x4c\xed\x02\x18\xf3\xff\x3f\x07\xcc\x2d\x70\x20\x0d\xbf\xa0\x0d\xb7\x63\xc9\x85\x04\xc6\xaa\x42\x2b\x9f\x0c\x74\x57\x6f\x3b\xbc\x14\xb3\xc2\x41\x41\xe8\x41\x47\xd5\x65\x82\xc6\x82\x36\x10\x16\xf3\x2c\x33\x68\x2d\xbe\x38\x08\x2d\x1c\x5d\x6a\xc5\x65\x06\x13\x53\x97\xd5\x11\x30\xb6\x40\x23\x72\x81\x19\x30\xb8\x14\xb6\x92\xfc\x7e\x45\x2a\xb9\x87\xf5\x24\xed\xa3\xa1\x39\x69\x42\x82\x27\xba\x76\xb0\x6d\xee\xa5\xac\x66\x9f\x1f\xbd\x1e\xf5\x47\xa3\xc1\xe0\xf5\xe8\xe4\xb4\x7f\x36\x7a\x73\x7e\x76\x7e\x32\x9c\x97\x47\x1f\x71\x62\x3e\x4b\x39\x18\x9e\x89\xda\xd7\xdb\xe1\xbc\x04\x6e\x74\xad\x32\xe0\x50\x49\x9e\x22\x5d\x18\xdf\x71\x23\xc2\xf1\xe2\x1d\x3d\x82\xa8\xe8\x94\xf0\x22\xbe\x4e\xb7\x1c\x1a\x68\x61\x73\x47\x9d\x9f\x0e\x28\x23\xbf\xad\x5d\x55\x6f\x12\x52\xef\x3e\x21\xda\x4b\x85\x1f\xac\x56\xc0\x58\xf8\xf3\x9b\xc9\xe0\x55\x5a\xcb\x06\x9a\x48\xe8\xd9\xe4\x42\x55\xcd\x12\x82\x27\xb0\xcd\x96\x39\x5c\xff\xe5\x6b\xe1\x10\x56\xca\xad\x20\xe7\x5a\x4a\xbd\xa4\x70\xde\x5c\x48\xf4\x0c\x70\x0e\xcd\xea\x1a\x5a\xeb\xb4\x88\x48\x97\xcb\x1a\x71\x59\xe8\x3d\xd4\x06\xb3\x25\x44\xbe\xd0\x46\x38\xb4\x5b\xb5\x7d\xef\xc6\xe7\x01\xb5\xe0\x16\x56\xda\x59\xdb\xbb\xa5\x36\xd0\xb0\x9c\xde\xfe\x1b\x1e\x7e\xe8\xb1\x85\xca\xb5\x29\xb9\x13\x5a\x51\xaa\xa2\xf1\x11\x16\xdc\xd0\x06\x93\xca\x68\x8a\xd7\x15\x81\xef\x2d\x9d\xb4\x95\x7a\x79\x02\x49\xed\x00\xf3\x1c\x53\x27\x16\x08\x25\xba\x42\xfb\x66\x66\xc6\x5d\x81\x66\xaf\xb6\x34\x41\xd1\x98\x83\xee\x3b\xaf\x64\xe1\x6f\x67\x94\xab\x41\xf7\xe4\x65\xb5\xe4\x4a\xa5\xb2\xce\xc8\x59\xef\x31\x64\x42\xaf\x95\x43\x30\x8d\xb5\xf5\xb6\x7f\xac\x45\x3a\x7f\xba\x51\x0a\x08\x2a\x2c\x70\xbe\xde\x09\x74\x7d\x99\x17\x9e\x19\x5a\x58\x99\xea\x1d\x76\x47\x4b\x74\x6d\x5d\x22\x0c\x07\xe7\xaf\x07\x67\xa3\xf3\x37\xa3\xb3\xc1\x9b\x11\x30\x78\x1f\xe4\x1c\x9a\xb6\xc0\x7f\xaa\x20\x6f\xad\xdf\x8d\xb6\xc2\x34\x5c\x51\xe1\x25\x77\x75\xd9\xdf\x3c\xc3\x7d\x7f\x1d\xda\x57\xdf\x62\xc3\x0c\x15\x1a\xea\x18\x93\xfb\xc0\x23\xb4\xb2\x29\xa7\xb8\xa3\x1b\x83\x88\x48\x07\x21\x0e\x33\x72\x90\x7f\xd8\x47\x5f\xa3\xa3\x2d\xd3\xed\xa8\xf4\x12\xc6\xbe\x8b\x80\xa6\x59\x8f\xa2\x5f\x7f\xfe\xe7\x2f\x70\x7c\xdc\xf4\x8d\xc7\xc7\xd1\x31\xbc\x13\xae\xa8\x93\x31\xdc\xfc\xa1\x91\x86\x7e\xc4\x8e\xe3\x78\xe6\xa7\xfa\xa9\x2e\xe3\x66\xae\xb7\x36\x61\x31\xa1\x3a\x8f\xaa\xd0\xf5\x4f\xe8\xf6\x4c\xed\xcd\x1e\x34\xb9\xa7\xb3\x31\x5d\x09\x94\xa9\x1e\x0e\xf7\x6c\xae\xc4\x07\x8d\xad\x26\xc3\x7e\x9f\x7c\x85\x88\xa2\xcd\x48\x2b\x7b\x02\xc2\xda\x1a\xc3\xcd\x91\x23\x77\xb5\x41\x30\xf8\x63\x8d\x96\x2a\x8e\x41\x58\x92\xb9\x12\x5f\x7d\x96\x18\x88\xbf\x78\x8b\x28\x21\x37\xe8\xdf\x79\x69\x81\xe9\x1c\x6e\x1a\x0b\x15\x9f\xe1\x6f\x79\x2c\xde\xfe\xaa\x15\x87\x45\xbd\x7e\x74\x8d\x08\x37\xd3\x7e\x9c\xe9\xd4\xc6\x17\xdf\x7e\x33\x79\x7f\xf5\xd5\xf7\x93\xab\x6f\xde\xf5\xcb\x6c\xfa\xd1\xf6\x6c\x9c\x48\x9d\xc4\x25\xb7\x0e\xcd\x41\x5b\x3d\xc8\x29\xa8\xd0\x71\x21\x6d\xdf\x3b\xe7\xc9\xb7\x97\x28\x7a\x47\xc5\x85\xc3\x7f\xff\xfd\x8f\xff\xfd\xe7\xef\x20\x72\x70\x85\xf0\x89\xf3\x03\x15\x42\x6a\xfb\x30\xa3\x25\xaf\xfe\x1f\x00\x00\xff\xff\xf4\x14\xba\x45\xa5\x13\x00\x00")

func DockerTemplatesReadme_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_alpineTmpl,
		".docker/templates/readme_alpine.tmpl",
	)
}

func DockerTemplatesReadme_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_alpine.tmpl", size: 5029, mode: os.FileMode(420), modTime: time.Unix(1576950665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_rootTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x97\xcd\x6e\xe3\x36\x10\xc7\xef\x7c\x8a\x89\x03\x2c\x6a\x23\x92\x9a\x6b\x60\x27\xcd\x77\x73\x68\x52\xc4\xde\xed\xc1\x08\x10\x8a\x1a\x4b\x6c\x28\x52\x25\x47\x76\xb3\x81\x9f\xa1\xed\x03\x14\x7b\xd9\x6b\xef\x7d\x9e\xbe\x40\xf7\x11\x0a\x89\x76\x92\xaa\x4e\x63\x07\xf6\x51\x9c\xf9\x0f\x7f\x33\xfc\x1a\x6d\x03\x4d\xa4\xa6\x20\x31\xe2\x0e\x2d\xc4\xdc\x61\x02\x46\xc3\xa1\x2a\xa4\xc6\x1d\x78\x1f\x97\x9a\x4a\xe0\x3a\x81\x13\x8c\x25\xd7\xd0\x57\x32\x67\xac\x5b\x00\x57\x32\xd5\xbd\x96\x40\x4d\x68\x5b\xfb\x0c\x00\xa0\xcb\x21\xb3\x38\xea\xb5\x32\xa2\xc2\xed\x45\x11\x59\x3e\x96\x2e\x10\x32\x14\x26\x8f\x1e\x1e\x20\xfc\x20\xdc\xf7\x9c\x32\x98\x4e\x5b\xfb\x5d\x99\xa7\xe0\xac\x78\xf2\x97\x79\x1a\xba\x4c\xa2\x4a\x5c\x28\xcd\x4c\xde\xd0\x85\x6e\x9c\xb6\x20\xda\xef\x46\xfc\x85\x59\x85\x32\x65\x12\x26\xd6\x68\xac\xa2\xbc\x3e\x6d\x43\xc0\x0b\x19\xc5\x3c\x49\xb1\x39\x75\xe4\x88\x53\xe9\x2a\x82\x83\x6a\x46\x8b\x23\x17\x65\xc8\x93\xca\x31\x3c\x2e\xad\x45\x4d\x47\x96\x6b\x91\x4d\xa7\x8f\x8c\xdd\xa8\xd8\x5f\xbe\x64\xa9\xa4\xac\x8c\x17\xd5\x0b\xb8\xa2\x5e\xcb\xdb\x81\x2b\x05\x16\x15\x72\x87\x6e\x89\x4a\x7a\x55\x94\x98\x89\x56\xc6\xf3\xfe\x2b\x31\x32\xc4\xd5\xeb\x95\x5d\x12\x4e\x71\x42\x47\x73\xbe\x35\xe0\xf9\x80\x6b\xa6\x24\x9e\x2e\x8f\x46\x3c\x5d\x79\x1f\x2e\xc9\xb1\x72\x99\x66\x82\x4d\xf1\x14\x16\xd7\xc5\x14\x71\xb5\xbe\xf5\x1a\x19\x7b\xb7\x3c\x50\xe5\xbd\xe8\xea\x38\x70\x74\xaf\xb0\xe7\x8c\x90\x5c\xbd\x53\x3c\x46\xd5\x3b\xab\x22\xaf\x03\xd1\x11\xb7\x2b\x1c\xc7\xda\x7d\x49\xc6\x3e\x71\xbb\x16\xc6\x09\x27\x91\xe1\x2a\x98\x73\xc5\x92\xa4\x3f\x54\xee\x6b\x41\x35\x05\x6a\x90\xce\x95\xab\xdc\x71\xde\x7f\x53\x87\x43\x28\x53\xbd\x91\x6f\x83\x0a\xbc\x7a\x53\x6c\x75\xb9\x0a\xbb\x32\x55\x61\x37\x5c\xad\x37\x31\x6d\xb8\x58\xc2\x68\xb2\x32\x2e\xc9\xac\x72\x14\x9e\xab\x36\x45\xa6\xa4\x40\xbd\xca\xdd\x3b\x13\xbc\x85\x87\xd0\x86\xf2\x65\x1c\x42\x0b\x22\xe3\x04\xd6\x98\x7c\x11\x90\x6f\x93\xc2\x97\x22\xbd\xce\xf0\xbf\x1d\xa2\xe7\xf0\x2e\x50\x4f\xb5\x96\xa6\xd1\x37\x64\xdb\xdb\xf0\xad\x99\x00\x19\x28\x1d\x32\x76\x66\x2c\x8c\xa4\x75\x04\xa5\xe3\x29\xee\xc0\xbd\x29\x41\x23\x26\x95\x47\x5c\x4a\x95\x80\xcc\x79\x8a\xe0\x7b\xe5\x90\xb1\xdb\xdb\x5b\x97\xa1\x52\x2c\x95\x54\xed\x74\x8d\x10\x04\x09\x16\x94\xf5\x76\xe1\xd5\x35\x67\x22\x81\x30\xf2\xc1\x46\x52\xa1\x8b\x86\xc3\x0f\xa7\xd7\xfd\x8b\xab\xcb\x9b\x9b\x68\x38\xbc\xea\xdf\xdc\x30\x6f\x0e\x84\xc9\x0b\xe3\x10\xca\x02\x82\xa4\x39\x68\x4b\xed\xbb\x78\x08\xb2\x8a\x89\x31\x63\xa1\xa6\x9b\x79\x42\x51\x2a\x05\x0f\x0f\xe1\x49\xfd\x79\xc9\x73\x74\x05\x17\x38\x9d\x46\x8f\x83\x47\xdc\xe1\x74\xba\x37\x1c\x0e\x0e\xcf\x1f\xe7\xad\x43\x07\x24\x21\x08\x6c\xbe\x52\x80\x47\x94\x41\x86\x1a\x44\x86\xe2\x0e\x28\x43\xb8\x3e\x3d\x3c\xf9\xee\x34\xcc\x93\xea\x31\x07\xe4\x22\x83\x31\x5a\x27\x8d\x76\x61\xb5\x22\xdb\x70\x38\xe6\x52\xf1\x58\xa1\xaf\xb6\x63\x55\xd5\xfc\x14\x17\xf5\xc0\xa0\x36\x4e\xa7\xf5\x02\x1e\x96\x94\x19\xeb\x18\xfb\xf2\xe9\xb7\xcf\xd0\xe9\x14\x12\x95\x30\xbb\xbb\x9d\x0e\xeb\xc0\x79\x5d\xfa\x3d\x18\x7e\x33\x1f\xbe\xf9\x6a\xc1\xb2\xcc\x8d\x6d\xd6\x81\xc1\xa4\xde\xc8\x95\x46\x1b\x8d\x85\x95\x63\x2e\xee\x9f\x64\xe4\xed\xb5\xee\x99\x43\x1b\xb6\x86\x33\x29\x9c\x19\xa5\xcc\xe4\x49\xd2\xdc\x9d\xde\x2d\x1a\xd5\x6e\xcf\x83\x1c\xcc\x7b\x91\xca\xf0\xee\xf9\xbb\xda\x7e\xcc\xef\xe7\xaf\xed\xc7\x3b\x33\x6e\xa4\x37\x1b\x5d\x98\xdd\xcc\xd6\x48\xee\x3f\x8a\xe7\x89\xcd\x25\x6f\x4e\x6a\x16\x60\x99\x84\x1c\xc6\xdc\x91\x44\x9d\x99\xf2\x23\x52\x23\xb1\x86\x75\x61\x82\x0d\x9f\x36\xab\x37\xc6\x97\x4f\x9f\x7f\x87\xe3\xf9\x65\x2d\x75\xca\xd8\xd3\x97\xd1\x6e\x67\xf6\x82\xd7\xbf\xb6\x23\xe4\x54\xd6\x4d\xef\x4f\x25\x3a\x72\xc0\x2d\xc2\xa4\xda\x15\x39\x6e\x75\x63\x0b\xd1\xfe\x19\xa2\x82\x91\x45\xac\x6e\x03\xbf\x9f\x87\xb3\x08\x05\x4f\x71\x21\x59\xa3\x15\xf6\xee\xed\x90\xf5\x11\x61\x78\x5b\x9f\x7d\x17\x1d\x5f\x5d\x0e\xae\x2f\x8e\xde\x0f\x2e\x2e\xcf\xc3\x3c\xb9\x5d\x26\x12\x59\xc4\x05\x3f\x9c\x0b\x03\xb6\xeb\x93\x96\x20\x71\xa9\xfc\x19\x83\x7e\x66\x26\xd5\xed\x66\xc1\x95\x45\x61\x2c\x31\x76\x2e\xc7\x08\x1c\xfe\xfa\xe3\xd7\xbf\xff\xfc\x05\xe4\x08\x28\x93\x0e\x0a\x6b\x7e\x44\x41\x90\xa1\x2a\x30\xa9\x24\x5b\x8c\xfd\x13\x00\x00\xff\xff\x74\xd7\x4b\x23\x33\x10\x00\x00")

func DockerTemplatesReadme_rootTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_rootTmpl,
		".docker/templates/readme_root.tmpl",
	)
}

func DockerTemplatesReadme_rootTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_rootTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_root.tmpl", size: 4147, mode: os.FileMode(420), modTime: time.Unix(1576949985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesTravisTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcd\x6e\xdb\x3a\x10\x85\xf7\x7c\x8a\x81\x60\x20\x8b\x0b\x8a\x37\x5d\x74\x21\x20\x8b\xa0\x31\x8a\xa0\x4d\x5c\xd8\x68\xba\x29\x60\xd0\xd2\x58\x62\x43\x91\xca\x0c\xa9\x18\x51\xfd\xee\x45\x24\x25\x56\xf3\xd7\xec\x04\x9d\xef\x1c\x72\x86\x33\x7a\x1b\x90\xd6\x9c\x93\x69\x42\x26\x00\x24\x14\x3e\xbf\x46\x02\x53\xeb\x12\x59\x08\x8e\x85\xcf\x80\xf0\x26\x1a\xc2\x42\x88\x0d\x6e\x3d\xe1\xda\x38\x0e\xda\xda\xc1\x72\xcf\x00\xd5\x20\xb7\xa0\x22\x93\xb2\x3e\xd7\x56\x6d\x8c\x53\x43\x98\x64\x6b\xea\xf7\x93\x92\xd1\xb1\xa7\xde\x90\x47\xb2\x20\xbf\x42\x15\x42\xc3\x99\x52\xa5\x09\x55\xdc\xa4\xb9\xaf\xa7\x8e\xbf\xbe\x09\x2d\x6a\x46\x56\x85\xbf\x75\xd6\xeb\x42\x1d\xa7\x1f\x3e\xa6\xc7\xaa\x30\x1c\xd6\xd6\xb8\xb8\x4b\x83\xa6\xb4\xbc\x03\x29\x7d\x0c\x4d\x0c\x30\xf1\x8f\x5a\x7f\x7a\xd0\x04\xbb\x76\xfb\x9a\x9c\x57\xb5\x2f\xe0\xbf\x1d\x1c\x92\x9f\x55\xfc\x0f\x66\x5a\x6b\xdf\x9c\xba\x7d\x85\x7c\xd2\xb0\x77\x38\xc6\xec\x97\x8c\x98\x57\x1e\x8e\xba\x04\x77\x0d\x92\xa9\xd1\x05\x6d\x93\x2c\x50\xc4\xfd\x11\xfc\x1e\x72\x03\x22\x28\x0c\xf9\x18\xa9\x0a\x8d\xb5\x77\xe9\x2f\xf6\x93\xc3\x19\xa9\x35\x39\x3e\x4c\x0d\x21\x07\x4d\xe1\x71\x4c\xa6\x83\x95\x17\x23\xb5\x35\x16\x59\x25\xb3\xab\xf9\x72\x75\xbe\xb8\x4c\x7a\xf5\xfc\xe2\xf4\xf3\xfc\x24\xd9\xfd\x4f\x77\xd7\xbe\x55\xe1\xd6\xb8\x90\xcd\xba\x91\x51\x3f\x95\x92\xfb\x44\x08\x74\x6d\xd6\x75\xa4\x5d\x89\x30\x6b\xb5\x85\xec\x04\xd2\x2b\x24\x36\xde\xf1\x7e\xdf\x47\x8d\x9e\x93\xae\xeb\x91\xf4\xcc\x10\xbc\x29\x29\x6d\x1b\xe3\xf0\x2d\xe2\xbe\x9f\x5d\x87\xae\xd8\xef\x85\xb0\xda\x95\x51\x97\x98\xc1\x46\x73\x25\xc4\xf3\xf5\x19\x5e\xac\x1d\xee\x35\x5d\xab\x4d\x34\xb6\x00\x29\xf9\x26\x6a\xae\x40\x06\x48\x66\x7d\xe9\x09\xa4\x87\xae\x4e\x43\x06\xc7\x03\xf5\x94\x01\x8a\x0e\x64\x30\x87\x18\x59\xbd\xb0\xc6\x93\x3f\xd6\x97\xc6\x81\x8c\x30\x3b\x5b\x7c\xfa\x32\x5f\xae\xbf\xaf\xe6\xcb\xcb\xd3\x8b\x39\xc8\xe6\xf1\xdf\xb7\xd3\xd5\xea\xc7\x62\x79\x36\x35\x36\x91\xab\xc3\x3d\xc4\xf8\xf2\x9c\x8d\xfa\x9f\x00\x00\x00\xff\xff\x8c\x58\x8b\xbc\x4a\x04\x00\x00")

func DockerTemplatesTravisTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesTravisTmpl,
		".docker/templates/travis.tmpl",
	)
}

func DockerTemplatesTravisTmpl() (*asset, error) {
	bytes, err := DockerTemplatesTravisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/travis.tmpl", size: 1098, mode: os.FileMode(420), modTime: time.Unix(1576921076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".docker/templates/docker-compose.tmpl":         DockerTemplatesDockerComposeTmpl,
	".docker/templates/docker-entrypoint.tmpl":      DockerTemplatesDockerEntrypointTmpl,
	".docker/templates/docker-sync.tmpl":            DockerTemplatesDockerSyncTmpl,
	".docker/templates/dockerfile_alpine.tmpl":      DockerTemplatesDockerfile_alpineTmpl,
	".docker/templates/dockerfile_debian-slim.tmpl": DockerTemplatesDockerfile_debianSlimTmpl,
	".docker/templates/dockerfile_ubuntu.tmpl":      DockerTemplatesDockerfile_ubuntuTmpl,
	".docker/templates/dockerignore.tmpl":           DockerTemplatesDockerignoreTmpl,
	".docker/templates/env.tmpl":                    DockerTemplatesEnvTmpl,
	".docker/templates/makefile.tmpl":               DockerTemplatesMakefileTmpl,
	".docker/templates/readme.tmpl":                 DockerTemplatesReadmeTmpl,
	".docker/templates/readme_alpine.tmpl":          DockerTemplatesReadme_alpineTmpl,
	".docker/templates/readme_root.tmpl":            DockerTemplatesReadme_rootTmpl,
	".docker/templates/travis.tmpl":                 DockerTemplatesTravisTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".docker": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"docker-compose.tmpl":         &bintree{DockerTemplatesDockerComposeTmpl, map[string]*bintree{}},
			"docker-entrypoint.tmpl":      &bintree{DockerTemplatesDockerEntrypointTmpl, map[string]*bintree{}},
			"docker-sync.tmpl":            &bintree{DockerTemplatesDockerSyncTmpl, map[string]*bintree{}},
			"dockerfile_alpine.tmpl":      &bintree{DockerTemplatesDockerfile_alpineTmpl, map[string]*bintree{}},
			"dockerfile_debian-slim.tmpl": &bintree{DockerTemplatesDockerfile_debianSlimTmpl, map[string]*bintree{}},
			"dockerfile_ubuntu.tmpl":      &bintree{DockerTemplatesDockerfile_ubuntuTmpl, map[string]*bintree{}},
			"dockerignore.tmpl":           &bintree{DockerTemplatesDockerignoreTmpl, map[string]*bintree{}},
			"env.tmpl":                    &bintree{DockerTemplatesEnvTmpl, map[string]*bintree{}},
			"makefile.tmpl":               &bintree{DockerTemplatesMakefileTmpl, map[string]*bintree{}},
			"readme.tmpl":                 &bintree{DockerTemplatesReadmeTmpl, map[string]*bintree{}},
			"readme_alpine.tmpl":          &bintree{DockerTemplatesReadme_alpineTmpl, map[string]*bintree{}},
			"readme_root.tmpl":            &bintree{DockerTemplatesReadme_rootTmpl, map[string]*bintree{}},
			"travis.tmpl":                 &bintree{DockerTemplatesTravisTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
