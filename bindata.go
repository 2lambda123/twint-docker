// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// .docker/templates/docker-compose.tmpl
// .docker/templates/docker-entrypoint.tmpl
// .docker/templates/docker-sync.tmpl
// .docker/templates/dockerfile_alpine.tmpl
// .docker/templates/dockerfile_debian-slim.tmpl
// .docker/templates/dockerfile_ubuntu.tmpl
// .docker/templates/dockerignore.tmpl
// .docker/templates/env.tmpl
// .docker/templates/makefile.tmpl
// .docker/templates/readme.tmpl
// .docker/templates/readme_alpine.tmpl
// .docker/templates/travis.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DockerTemplatesDockerComposeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x41\x4f\xe3\x3c\x10\xbd\xe7\x57\x8c\xf8\x90\x38\x39\x4d\x84\x3e\x2d\x6b\xa9\x87\xb2\xf4\xc0\xee\xaa\x45\xb4\xe2\x1a\x99\x64\x0a\x56\x1d\xbb\x1a\x3b\xa1\x6c\x94\xff\xbe\x72\x9c\x84\x96\x85\xee\x5e\x9c\xcc\xcc\x9b\xe7\x37\xf3\xcc\x18\x8b\x6a\x24\x2b\x8d\xe6\x70\x71\x19\x7f\xb9\x88\x2c\x52\x2d\x73\xb4\x3c\x8a\x00\xdc\x8b\xd4\x8e\x47\x00\x00\xb2\x14\x4f\xc8\x61\x9f\xd0\xaf\xad\xa9\x27\xa1\xd2\x34\x10\xdf\x48\x82\xb6\x6d\x1a\xb9\x81\xf8\x5a\x58\x6c\x5b\xd6\x34\xa8\x0b\x9f\x0b\x19\x68\xdb\x8e\xe2\xb1\x92\xaa\x08\x6c\x00\xb9\xd1\x0e\xf7\x8e\x43\xdc\x27\x0a\x93\x6f\x91\x36\x52\x21\x87\x9b\xf1\x3f\x1a\xb0\x42\x6a\xa4\x4c\x8b\x12\x79\x90\xc5\x72\x25\x47\x8d\xcc\xa2\xa0\xfc\xf9\x73\xa9\x03\x40\x09\x87\xd6\x9d\x60\x0d\xb8\x0e\xb0\x33\xe4\x6c\xa0\x64\x70\x99\x24\x09\xf7\x47\x17\xa3\xae\x25\x19\x5d\xe2\xb0\x1e\x06\x8b\xe5\xcd\x3c\x9b\x2f\x1e\xa6\x3b\x32\x45\x95\x3b\x69\x74\x27\xcf\x10\xdb\x91\xac\xcd\xfe\x95\x9f\xb8\xd6\x19\xea\x51\x87\x23\xf8\x9d\x88\x27\x9c\x1c\x92\x1c\x4c\x70\x24\xf0\xec\x6b\xf2\x7f\xc2\xfd\x71\x06\xff\xc1\xda\x10\xec\x68\xa0\x0b\xd5\xd4\x57\xd3\xa1\xea\x75\x90\x51\x1d\xc9\x00\xba\x4a\xd3\x2b\xee\x0f\x0f\xba\x0b\x17\x02\xf8\x31\x50\x09\xeb\x64\xfe\xc1\x9a\x83\x6f\x71\x0f\x88\x73\x33\x39\xc2\x1e\x47\xfc\xbc\x99\xff\x9c\xad\xd6\xb7\xdf\xb2\x87\xf9\xfd\xea\x76\xb9\x68\x4f\x2c\xa5\x6f\xfd\x6c\xe3\xda\x14\x18\x7b\xfc\xf4\xe8\x8e\xbe\x9a\xab\xca\x3a\xa4\x58\x6a\xe9\xa4\x50\x59\x29\x7c\x98\xf9\x26\x7b\xb2\xa1\x63\x0c\x53\xb1\x3e\xd7\x23\x1e\x8d\x71\xd6\x91\xd8\xc5\x25\x96\x86\x5e\x33\x65\xf2\xed\xd4\x51\x85\xc3\x02\xe7\xab\xec\xfb\xec\x61\x96\x2d\xef\xd6\xab\xe9\xdb\xac\x63\xae\x3d\xeb\x90\x95\x92\xa5\x1c\xac\x03\x28\xb1\xf4\x4c\x43\x08\x60\xcd\xc6\x71\x60\xe9\x98\x78\x16\x54\x8c\x89\xda\xa8\xaa\xc4\xd1\x78\xb4\x85\x70\x22\x49\xf9\xa4\xb2\x34\xb1\xcf\x82\xf0\x9d\x05\xbe\xfe\xe7\x83\x79\x93\x77\xb7\xbc\x5f\xb7\xfc\x5d\xec\x5d\xdf\xca\x47\xa1\xc5\x5f\xec\x0e\xa0\xfe\xc3\xcf\x9b\x1f\xb7\xd7\xb3\xc5\xec\x5f\xfc\x0d\x2d\x1f\x29\xeb\x39\x06\x61\x87\x61\x14\x1d\xcc\x3f\xce\xde\x75\x16\x24\x6b\x24\x0e\xca\xe4\x42\x45\x91\x46\xf7\x62\x68\xdb\x01\x0b\xdc\x88\x4a\xf5\x4f\x07\xf7\x0e\x49\x0b\x35\x2c\x3c\x68\xd2\x2f\xac\x93\xf5\x3b\x00\x00\xff\xff\x93\x51\xb3\x35\x15\x05\x00\x00")

func DockerTemplatesDockerComposeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerComposeTmpl,
		".docker/templates/docker-compose.tmpl",
	)
}

func DockerTemplatesDockerComposeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerComposeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-compose.tmpl", size: 1301, mode: os.FileMode(420), modTime: time.Unix(1576920052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerEntrypointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\x52\x71\xe0\x02\x04\x00\x00\xff\xff\xc2\x78\x36\x2c\x0f\x00\x00\x00")

func DockerTemplatesDockerEntrypointTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerEntrypointTmpl,
		".docker/templates/docker-entrypoint.tmpl",
	)
}

func DockerTemplatesDockerEntrypointTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerEntrypointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-entrypoint.tmpl", size: 15, mode: os.FileMode(420), modTime: time.Unix(1576745907, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerSyncTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x6a\xc3\x40\x0c\xc6\xf1\xdd\x4f\x21\x8e\xc2\x4d\x6e\xdd\x8e\x07\x5d\x4a\x1f\xc0\x5b\x47\x73\xb5\x95\xcb\x41\x90\x0e\x49\xb6\x63\x42\xde\x3d\x24\x86\x38\xe0\x4d\xfc\xfe\x82\x6f\x42\xd1\xcc\x14\xc0\x7d\xb9\x8a\x8b\x65\x26\x0d\x15\xc0\x84\xf2\xcf\x8a\x01\x4c\x46\xac\x74\xa1\xfe\xc1\xb1\x94\x6e\x88\x16\xef\x37\x80\x4a\x1f\xe0\xed\xd2\xfe\xfd\x5e\x3f\x6c\xce\x64\xab\x2e\xd4\x77\x6a\x12\x0d\xd3\x12\xc0\x53\xb4\x3c\x61\xc7\x7a\xf6\x5b\x1f\x15\x25\x0f\x01\x3e\x9b\xa6\xd9\x34\x09\x8f\x65\xcf\x51\x92\xae\x8b\x35\xb8\xba\x08\x1e\x50\x80\x70\x46\x71\x4f\xcd\x89\x58\xf0\xdb\xb7\xd1\x8e\xf0\x9e\xb2\xf9\x7d\xfb\xc1\x13\xcf\x2f\x0f\xb7\x00\x00\x00\xff\xff\x22\x21\x4b\x7c\xfd\x00\x00\x00")

func DockerTemplatesDockerSyncTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerSyncTmpl,
		".docker/templates/docker-sync.tmpl",
	)
}

func DockerTemplatesDockerSyncTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerSyncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-sync.tmpl", size: 253, mode: os.FileMode(420), modTime: time.Unix(1576854421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xd1\x4e\x1b\x3b\x10\x7d\xbe\xfe\x8a\x51\xb8\x82\x07\xae\x13\x50\xde\xb8\x97\xab\x46\x21\x6d\xa3\x96\x24\x5a\x42\x2a\x54\xaa\xca\xb1\x27\xd9\x29\xbb\xb6\x65\xcf\x2e\x89\x10\xff\x5e\xed\x6e\x02\x01\x05\xf1\xd0\xa7\xb5\x67\x8e\xec\x73\x8e\xe7\xec\xc7\x64\x7c\x09\x2a\xf3\x64\xf1\xac\xdb\x3e\x3d\x81\xde\x15\xcc\x0b\xca\x8c\x10\xdf\xc6\xc9\x97\x8b\x61\x02\x1d\xe7\xb9\xa3\xbc\x17\xe2\x00\x86\x36\xb2\xca\x32\x98\xac\x39\x75\x16\x94\x35\x80\x2b\xc6\x60\x55\x06\x06\x3d\x5a\x83\x56\x13\xc6\x7f\x80\xac\xce\x0a\x43\x76\x09\x29\x2a\x83\x21\xd6\xe0\x4f\xfd\xbe\x48\xae\x47\xa0\xfc\x1d\x28\x63\x40\x4a\xeb\xa4\x56\x3a\x45\xf0\xf5\x91\xdd\xed\x57\x1a\x2c\xc1\xaf\xbb\xd2\x93\x87\x8c\xe6\x8b\x05\x6d\x3e\x75\x27\x2f\x62\x56\x2f\x96\x5a\xc3\x92\x18\xb4\x92\x1a\x03\xd3\x82\xb4\x62\x8c\xe0\x3c\xda\x79\xa6\xe2\x2b\xf4\xf1\xf1\x0b\x19\xe4\xd1\x96\x35\x23\x4f\xbe\x0b\xb4\xa9\xfb\xa6\x2e\x0e\xa0\x1f\x50\x31\x82\x82\x92\x02\x17\x2a\x03\xb4\x25\x05\x67\x73\xb4\x5c\x2b\x52\x9a\xa9\xac\x20\xc4\xcd\x39\x1b\x19\x32\x87\x12\x6d\xd9\xb8\x57\xad\xc4\x60\x34\x83\x49\x6f\xfa\xf9\xbc\xf5\x54\xeb\xcc\xc9\x9e\xfd\x5d\x15\x5b\x70\x2b\xfe\x9a\x0d\x93\xe9\x75\xef\xeb\xcf\xc1\x68\xb6\x03\x6a\xed\x32\xde\x35\x19\xc8\xb2\x03\x4e\x71\x2f\xb9\x7b\xe2\x74\x57\x60\x6d\x52\xe6\x2c\x82\x94\x06\x3d\xa7\xe7\xa7\x20\xe7\xf0\xf0\xd0\x9e\x61\x88\xe4\xec\xe3\x23\xa4\xcc\x3e\x9e\x75\x3a\x4b\xe2\xb4\x98\xb7\xb5\xcb\x3b\x7c\x4f\x96\x7d\x70\xbf\x50\x73\xb3\x79\x1a\x88\x8a\xf2\xe1\x21\x68\xf3\xba\xf2\xc2\x4b\x29\x0b\xbf\x0c\xca\x60\x55\xde\x07\xd0\xcd\x2c\xed\xe9\xd8\x22\xf7\xeb\x7d\x8d\xb6\x10\xaf\x07\x57\x5c\xf6\x86\xa3\x69\x6f\x38\x1a\x24\xb0\x3a\x09\xab\x3b\x57\xc2\x7f\x9b\xc5\x07\x1f\x1c\x3b\x9b\x2b\xca\x2a\x4d\xff\xef\x3c\x6c\x28\x2c\x53\x8e\x50\x44\x0c\xb5\x4d\xf9\x9d\xa1\x00\xd2\xd7\x9a\x36\x77\x2b\x63\xaa\x3e\xc8\x0b\x68\x1c\x90\xe9\xb3\x64\x19\xa1\x7a\xc6\x4e\x4c\xe1\x56\x40\x05\x8f\xc5\x16\xa6\xe1\x68\xc7\x9d\x7f\x9f\x0f\x37\x8a\xd5\xd1\x7b\x81\xda\x72\x7b\xf1\xe6\xce\x66\xeb\xf7\x22\xb4\x89\xcb\x36\x02\xd5\x3e\xb2\xd1\xcd\xec\x5f\xdd\x13\xeb\x14\xd8\xd5\x9a\x41\x3b\xcb\xb8\x62\x71\x7d\x35\x48\x1a\xda\x7b\x83\xdf\x77\x7e\xfd\xe6\xa8\x2d\x82\xcb\xeb\xa6\x0f\x58\x92\x2b\x22\x50\xae\x96\x28\xfa\xe3\xc9\x0d\x48\x59\xb5\xcf\xeb\x9f\xca\x73\x1a\x76\x72\x21\x0e\xa0\xb7\x0d\xd1\x1b\x37\xfc\x49\x76\x06\xa3\x69\x72\x33\x19\x0f\x47\x53\xf8\xde\xaa\x05\xb6\x7e\xfc\x0e\x00\x00\xff\xff\x16\xea\xa4\x28\xf6\x04\x00\x00")

func DockerTemplatesDockerfile_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_alpineTmpl,
		".docker/templates/dockerfile_alpine.tmpl",
	)
}

func DockerTemplatesDockerfile_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_alpine.tmpl", size: 1270, mode: os.FileMode(420), modTime: time.Unix(1576830973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_debianSlimTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x51\xeb\xda\x30\x14\xc5\xdf\xf3\x29\x2e\x0e\x7c\x98\xa4\x19\xf8\x30\x90\x39\x94\xad\x1b\x65\xb3\x95\xac\x2a\x32\xc7\x88\x6d\x96\x66\xb6\x49\x48\x6e\x9d\x22\x7e\xf7\x61\xf5\xcf\x5f\x7d\xca\x39\xe7\x47\xe0\x9c\xfb\x85\x67\x33\x70\x47\xac\xac\x19\x0d\xa3\xf7\x34\xd4\xba\xa1\x01\xbd\xc4\xa2\x22\x64\x36\x4d\xd2\x7c\x9a\xa4\x31\x87\xc3\x3b\x7f\xd8\xd9\x3d\x7c\xb8\x89\x89\xf3\x16\xad\x69\x84\xae\xa3\xc2\x36\x1f\x09\x99\xf2\xaf\x90\xaf\x92\x34\xff\xbd\x8c\xf9\x8f\x24\x4b\xc7\xa7\x53\xb4\x94\x3e\x68\x6b\xce\x67\x42\x3e\x65\xf3\x35\x94\xb6\xd8\x49\x4f\xa5\x41\x7f\x74\x56\x1b\x8c\x42\x05\xec\xc1\x12\xbe\x48\xa1\xa8\x1a\x5b\xc2\xe0\xf0\xcc\x3a\xb8\x21\xc2\x21\x55\x12\xa1\x75\xa5\x40\x09\xfd\xfe\x5d\xa6\x4d\x40\x51\xd7\x40\x8f\xb0\x21\x4a\xe3\xcb\x1f\xa7\xdd\xf0\x15\xd2\xd6\x29\x2f\x4a\x09\x54\x82\xd2\x38\xa8\x10\x5d\x18\x31\xa6\x34\x56\xed\xf6\x32\x89\xe1\x3f\x6d\xd0\x79\xfb\x57\x16\x78\x35\x91\xd2\x38\xb9\x5f\xf5\x46\x2a\x35\xee\xd0\x73\xb3\xa2\x96\xc2\x80\x68\xd1\x5e\x55\x57\xd1\x37\x40\xfd\x1f\x60\x7b\xe1\x59\xad\xb7\x4c\x38\x64\xb5\x0e\x18\xd8\x5b\x60\xd8\xb8\xcb\x73\x61\x9d\x24\x24\x4e\x73\xbe\x9e\x67\x49\x9a\xc3\xcf\xde\xe3\x21\x7a\xbf\xc8\x32\xfb\xbe\x98\xc5\x70\x6d\x46\x56\x19\xff\xf6\x39\xe1\xc0\x82\xdf\xdf\xa2\xff\x01\x00\x00\xff\xff\x15\xde\x8c\x62\xdc\x01\x00\x00")

func DockerTemplatesDockerfile_debianSlimTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_debianSlimTmpl,
		".docker/templates/dockerfile_debian-slim.tmpl",
	)
}

func DockerTemplatesDockerfile_debianSlimTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_debianSlimTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_debian-slim.tmpl", size: 476, mode: os.FileMode(420), modTime: time.Unix(1576745957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_ubuntuTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xdf\x6e\xd3\x30\x18\xc5\xef\xfd\x14\x9f\x86\x34\x01\x53\x62\xa6\x5d\x31\x31\xb4\x0a\x02\x44\xd0\x64\xf2\xd2\x56\x15\x45\xc8\x49\x8c\x63\x48\x6c\xcb\xfe\x5c\x48\xab\x3e\x10\xcf\xc1\x8b\xa1\xa6\x9d\xfa\xe7\xca\xe7\x9c\x9f\x65\x9d\xe3\x0f\x2c\x1f\x43\x28\x83\xc6\x70\x7b\xfd\x3a\xbe\x7e\x45\xc8\x78\x94\x66\xc5\x28\xcd\x12\x06\x8f\xff\xfe\x96\xdc\xa3\x12\x1a\x3e\x99\xb0\x12\x08\xcf\x7b\x63\x56\xca\xc4\x95\xe9\x5e\xc0\x1b\x2f\xf6\xf8\xfe\x10\xbf\x25\x64\xc4\x3e\x42\x31\x4b\xb3\xe2\xfb\x34\x61\x8f\x69\x9e\xdd\xad\xd7\xf1\x54\x38\xaf\x8c\xde\x6c\x08\x79\x97\x3f\xcc\xa1\x36\xd5\x2f\xe1\x22\xa1\xd1\xf5\xd6\x28\x8d\xb1\x6f\x80\x9e\x58\xc2\x26\x19\x54\x4d\x67\x6a\xb8\xfa\x73\xce\x06\xb8\x20\xdc\x62\x24\x05\x42\xb0\x35\x47\x01\x97\x97\x47\x99\xd2\x1e\x79\xdb\x42\xd4\xc3\x82\x48\x85\xb0\x20\xb6\xc7\xc6\xe8\x9b\xc8\x2a\xfb\xf4\x82\x55\xf6\xe6\x70\x35\x0a\x56\x3a\x5e\x0b\x88\x04\x48\x85\x57\x0d\xa2\xf5\xb7\x94\x4a\x85\x4d\x28\xb7\x03\x29\xfe\x56\x1a\xad\x33\x3f\x45\x85\x3b\x13\x4b\x85\xf7\xc7\x1b\x9f\x09\x29\xef\x06\x74\xde\xb3\x6a\x05\xd7\xc0\x03\x9a\x9d\x1a\x0a\xbb\x0e\x22\xf7\x03\xe8\x92\x3b\xda\xaa\x92\x72\x8b\xb4\x55\x1e\x3d\x7d\x09\x14\x3b\xbb\x3d\xb6\x6c\x90\x84\x24\x59\xc1\xe6\x0f\x79\x9a\x15\xf0\xf5\xe2\xf4\x5b\x2e\xbe\x91\x69\xfe\x65\x32\x4e\x60\xd7\x8c\xcc\x72\xf6\xf9\x7d\xca\x80\x7a\xb7\xdc\x47\xff\x03\x00\x00\xff\xff\x4f\xe2\x8d\x91\xf4\x01\x00\x00")

func DockerTemplatesDockerfile_ubuntuTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_ubuntuTmpl,
		".docker/templates/dockerfile_ubuntu.tmpl",
	)
}

func DockerTemplatesDockerfile_ubuntuTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_ubuntuTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_ubuntu.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1576745927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xce\xc9\xcc\xe5\x4a\xcc\x29\xc8\xcc\x4b\xe5\xf2\x4d\xcc\x4e\x4d\xcb\xcc\x49\xe5\x4a\xc9\x4f\xce\x4e\x2d\xd2\x4d\xce\xcf\x2d\xc8\x2f\x4e\xd5\xab\xcc\xcd\x41\x17\xd2\x02\x0b\xea\xa5\x67\x96\x80\x09\x7d\x08\xa9\x05\xa5\xb4\xb8\x00\x01\x00\x00\xff\xff\x78\xa9\x74\xfb\x57\x00\x00\x00")

func DockerTemplatesDockerignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerignoreTmpl,
		".docker/templates/dockerignore.tmpl",
	)
}

func DockerTemplatesDockerignoreTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerignore.tmpl", size: 87, mode: os.FileMode(420), modTime: time.Unix(1576745854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesEnvTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\x83\x30\x18\x86\xef\xfe\x8a\xd0\xee\xaa\xd3\x42\x27\x1d\xe4\xf0\x69\x83\x64\xb5\x2a\x26\xba\xde\xc4\x39\xc7\x02\xd3\x43\x23\x74\x10\xf2\xdf\x87\x2e\x5a\xe9\xed\x7b\x9f\x97\xf7\xe1\xdb\x22\x7e\x13\xfd\x60\xf1\x77\x9a\xf0\xaa\x0c\x59\x55\xe4\x31\x56\x0a\x39\x65\x23\x8b\x3c\x46\x5a\x9b\x8e\x43\x34\xf1\xa3\xb8\x22\xad\x95\x12\x5f\xc8\x09\x6a\xd9\x6a\x6d\x2b\xd5\xf6\x9f\x23\xfb\x27\xf7\x4d\x49\x72\x46\xd3\x64\xb5\x33\x45\x02\x67\xc2\x32\x08\xc9\x54\xa5\xb7\xbe\x5d\x95\x01\x30\x82\x87\xd5\x5b\xf4\x0c\x11\xc1\x4f\xea\x61\xab\x9f\x67\x34\x2e\xf4\xeb\x9c\x38\x44\xb3\x2a\xa2\x47\x7c\xf0\x7d\x93\x0a\x93\xac\x2d\x22\x3f\xb5\x1c\x44\x23\xdb\xfa\xda\x7c\x5b\x24\x06\xc6\x69\xb8\xfc\xeb\x3b\xae\xe3\x2d\x34\x4b\x73\x8e\x0f\x3b\xd7\x5d\xc8\x1b\x94\x50\xa5\x19\x67\x78\x63\x5f\x3a\xb9\xf7\x76\x1d\xb2\x2f\xdd\xef\x78\x6c\x46\xfd\x49\x7c\xd4\x7d\x6d\x9d\x68\x00\x09\x3c\x68\x0d\x9c\xac\xfb\x17\xd7\xfb\x0b\x00\x00\xff\xff\xd4\x69\x13\x70\x83\x01\x00\x00")

func DockerTemplatesEnvTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesEnvTmpl,
		".docker/templates/env.tmpl",
	)
}

func DockerTemplatesEnvTmpl() (*asset, error) {
	bytes, err := DockerTemplatesEnvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/env.tmpl", size: 387, mode: os.FileMode(420), modTime: time.Unix(1576920292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xdf\x0f\xd2\x30\x10\x7e\xee\xfd\x15\x97\x6c\x66\xf8\xb0\x15\x66\x82\xd0\x48\x82\x89\x44\x79\xe0\x47\x94\x68\x7c\xd1\xd4\xad\xb0\x65\xdd\xba\xac\x1d\xa8\xc0\xff\x6e\xda\x4d\xc7\x03\xbe\x5c\x7b\xdf\x7d\xfd\xee\xbb\xde\x7a\xf3\xf6\xfd\x0a\xd9\x02\x7f\x8e\x9b\xdf\x85\x3a\x53\x73\xc9\x2b\x13\xa6\x2a\x29\x44\x03\x9f\x57\x1f\x3f\xad\x77\x5b\xb6\x40\x7f\xa4\x33\x21\x25\x9e\x1a\x51\xe3\xe1\xcb\x7a\x7b\xf8\xde\x17\xf1\x9d\xe3\x1e\x73\x29\xf0\x86\xfc\x52\x60\x70\xad\x9b\xbc\x32\xe8\xc7\xf7\x00\x6f\x98\xb4\x06\xc3\x14\x83\x45\x80\xe1\x11\xe3\x97\x00\x9e\x87\x46\x68\x43\x08\x23\xf6\x8c\xc0\x46\x06\xc4\x34\xad\x70\xd5\xb3\x68\x74\xae\x2a\xc2\x48\x9a\xeb\x5a\xf2\x5f\x7f\x91\x08\xfa\x0b\x03\xb2\x14\x49\xa6\xd0\x1f\xf5\x3e\x3a\xdd\xbc\xe4\x27\x61\x85\x7f\xb4\xb9\x4c\xbb\x14\x79\x95\xa2\xe1\x27\x34\x99\x28\x23\x88\xf6\x1f\x76\xdb\xaf\xac\xab\x81\x8b\x56\xad\x1b\x19\xbb\x77\xa1\x41\xff\xea\xfe\xe6\xce\xfc\x6b\xdf\xe1\x8e\xd1\xc0\xb3\x7a\xcf\x28\xff\x30\xc9\xed\x54\xce\x54\xdd\xea\x2c\xec\x9c\x31\x62\x13\xec\x45\x1c\x36\x38\x1a\x78\x30\x5c\x1f\xbc\xb9\xa7\x4f\x9a\xfe\x8f\xf1\x60\x21\x13\xb2\xb6\xdf\xb2\x77\x9b\x49\x54\x59\xf2\x2a\xd5\x0e\x1e\xfa\xdb\x0c\x6c\x40\x86\x1b\x5e\x08\xbb\x53\x20\x4b\x2d\x52\x0c\x2b\x0c\x34\xfd\xe6\x79\x94\xd6\x01\xfa\x6f\x00\x3c\xcc\x8c\xa9\x35\xa3\x54\x1b\x9e\x14\xea\x2c\x9a\xa3\x54\x97\x28\x51\x25\xe5\x74\x1a\xbf\x7e\x35\x1b\xcf\xe9\x64\x16\x4f\x27\xe3\x39\xbc\xb0\x63\x30\xf8\x13\x00\x00\xff\xff\xa4\xdc\xfd\x9f\x6f\x02\x00\x00")

func DockerTemplatesMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesMakefileTmpl,
		".docker/templates/makefile.tmpl",
	)
}

func DockerTemplatesMakefileTmpl() (*asset, error) {
	bytes, err := DockerTemplatesMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/makefile.tmpl", size: 623, mode: os.FileMode(420), modTime: time.Unix(1576745814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdb\x6e\x1b\x37\x13\xbe\xdf\xa7\x98\x58\x01\x22\x19\xa6\x24\x9f\x00\xd9\x48\x82\x3f\xb1\xff\xb8\x46\x83\x24\x8d\x15\xf4\xc2\x30\x60\xee\xee\xac\x96\x11\x97\xdc\x90\x5c\xc9\x8e\xe1\xbe\x42\xdb\x07\x28\x72\x93\xdb\xde\xf7\x79\xfa\x02\xcd\x23\x14\x43\xae\x8e\xb6\xdb\x20\x56\x7d\x61\x89\xc3\x39\x7c\x9c\x13\x39\x6a\x80\x1b\x0b\xe5\x58\xaa\x93\x21\x9a\x28\x7a\xfc\x80\x31\xe8\xeb\x03\xb0\x8e\x1b\x07\x8c\x3d\x8d\x1a\x0d\xe8\xf3\x58\x22\xe8\x0c\x0e\xb4\x72\xa8\x9c\x8d\x36\xdb\x70\xfa\x9d\x1e\x83\xd3\x50\x59\x3c\x6b\x36\x72\x3d\x66\x4e\xb3\xca\x62\x2b\x02\xa0\xed\x17\xc2\x58\x57\xef\x66\xf4\x7d\xb2\x09\x61\xff\xc0\x20\x77\x08\x5c\x01\x97\x82\xdb\xb3\x66\x23\xf1\x14\xc6\x15\xf3\x94\x96\xb7\x72\xe8\x91\xb1\x03\x5d\x94\xda\xeb\x0a\x50\x59\x12\x08\x73\x0a\xff\x2f\xb9\x75\x22\xb1\xc8\x4d\x92\x03\x57\x29\x7c\x2f\x62\xae\xf8\x59\xb3\x81\xf3\x5b\x8c\xab\x94\x0d\xfd\xd6\x9c\x74\x5f\x1b\x28\x8d\xbe\xb8\x3c\x6b\x36\x9c\x36\xcc\x7f\x9f\xd7\x7e\x81\x49\xe5\x10\xfa\xe4\x2f\x48\x74\x51\x70\x95\x92\xea\x40\x67\xc1\x8f\x35\x7d\x41\x8e\x17\xa5\x44\x4b\xee\x9b\x97\x0a\x54\xa6\xb3\x79\x19\x7f\x60\xee\xbc\x37\x52\xfa\x0c\x3e\x78\x56\xb9\x5c\x1b\x22\xf2\xf0\x2d\x90\xbf\x7c\xfa\xfc\x9b\x0f\x89\x11\x71\xe5\x84\x1a\x9c\x35\x1b\x44\x63\xc9\x1c\x2d\xb0\x9e\xe4\x7a\x0c\x97\xba\x32\x60\xab\xb2\xd4\xc6\x9d\x35\x1b\x96\x62\x46\x34\x56\xd3\x5a\xb3\xf0\xa3\x4a\x7d\xf0\x29\xfa\xb3\x38\xd3\xb2\x01\xd3\xc0\x46\xd1\x0b\x6d\x20\xab\x97\x7c\x80\x1b\x64\x02\x14\x62\x4a\x02\x71\x25\x64\x0a\xa2\xe0\x03\x84\x10\xb4\x76\x14\x9d\x9f\x9f\xdb\x1c\xa5\x8c\x02\x05\xca\x4a\x4a\xb8\xe8\x9a\x8f\x43\x3d\xea\x78\x1f\xee\x5f\x5d\x41\xfb\x50\x18\xb8\xbe\x26\xee\x28\xd2\x06\x6e\xc8\x4d\xc2\x1f\x8c\x04\xbe\x06\x81\x5b\xca\xaa\x99\x9c\x5f\x86\x6c\x7f\xb2\x56\x1b\x37\x95\x02\xe6\x04\x30\x66\x0a\x60\x23\x78\xd8\x2c\xc7\x69\xab\x43\x9e\xdf\xef\xe8\xd2\x75\x78\x59\xfa\xd5\x9d\x08\xaf\xae\x44\x06\xed\xe7\xdc\xe2\xf5\x35\xbb\xba\x42\x95\x12\x2d\x50\xe0\xfa\x7a\x8d\xec\xc3\xe2\x5f\x70\xe2\x5d\xc9\x1a\x45\x27\xbe\xf2\xc8\xe1\x25\xa0\xe4\x8b\x4c\xc3\x9a\xe9\x2e\x77\x54\x25\xb0\x14\x16\xd2\x7d\x22\x33\xf1\x11\x4c\x33\x7d\xd1\x96\xd3\xe6\xdf\xf4\x12\xcb\x54\xcd\xad\x05\x71\xb7\x06\xef\xeb\x11\x3c\x7c\xf3\xe3\x61\xed\xc5\x8e\x35\xb5\x43\x43\x58\xe6\x55\xdf\xa8\x99\x28\x7a\x06\x19\x8e\xc1\x0a\xda\x81\x49\xfd\x10\xf6\x1c\x65\xe9\x13\xaf\x52\x29\x1a\xeb\xc8\x4f\x2e\x47\x88\xb9\x15\x89\xdd\xbf\x0f\xa4\xfa\x3f\xab\x28\xdd\x8d\xe2\x05\x02\x83\x93\xc4\xf0\x12\x81\x4b\xe9\xcd\xf4\xc7\x88\xce\x42\x66\x74\xe1\xb9\x1e\x59\x70\xa2\x40\x29\x14\xb6\x57\x63\xd1\x42\x29\x14\xf2\x92\x0e\xbe\x60\x7e\xde\x34\x41\x59\x32\x0f\xd4\x07\xb8\x50\x42\x0d\x66\x1a\xee\x81\x69\x11\xc7\x81\x96\x12\x13\x07\x38\x42\x73\x19\xa0\xdc\x6a\x30\xc0\xf3\x5c\x5a\xe1\x23\x5b\xa3\x5e\x91\x6f\xd8\x25\x72\x03\x5b\xdd\xcd\x9d\x39\x48\xb5\x5f\x5c\xce\x1d\x8c\xd1\x20\x38\x22\x60\x0a\x31\x66\xda\xa0\x67\x5f\x95\x7d\x2b\x54\xe2\x35\xee\xb2\xcd\x2d\xb6\xd5\xfd\x1a\x18\xcb\x32\x2b\xc2\xa2\x21\x13\x12\xdb\xee\xc2\xcd\xd2\xa4\xc6\x40\x35\x61\xf9\x08\xa9\x5e\x26\x4c\xab\xb5\x9a\xd8\x11\x30\xe6\xff\xdf\x65\x9b\x5b\xe0\x40\x1c\x5e\x60\x45\xfe\xc7\x82\x0b\x09\x8c\x95\xb9\x56\xbe\x3c\xe8\xa6\x9b\xf7\x7c\x21\x06\xb9\x83\x9c\x00\x04\x1e\x55\x15\x31\x1a\x0b\xda\x40\x10\xe6\x69\x6a\xd0\x5a\xbc\x4f\x4e\x5a\x58\x3b\xd4\x8a\xcb\x14\xfa\xa6\x2a\xca\x35\x60\x6c\x84\x46\x64\x02\x53\x60\x70\x28\x6c\x29\xf9\xe5\x04\x57\x7c\x09\xd3\x4d\x3a\x4a\x8d\xb4\x5f\xa7\x07\x8f\x75\xe5\x60\x5e\xdd\x3d\x80\x0d\x9e\xac\xed\xf4\xda\xbd\x5e\xb7\xbb\xd3\xdb\xd8\x6a\x6f\xf7\x76\xf7\xb6\xf7\x36\x36\x87\xc5\xda\x57\x84\xce\x97\x2e\x07\xc3\x53\x51\xf9\x6e\xbc\x39\x2c\x80\x1b\x5d\xa9\x14\x38\x94\x92\x27\x08\x42\xc1\x1b\x6e\x44\x88\x33\x5e\xd0\x43\x82\x9a\x51\x01\xdf\x00\x59\xaf\x3e\x41\xd0\x82\xd4\x09\x97\xb9\xb6\x6e\x7f\x6f\xab\x4b\x05\xfa\xba\x72\x65\x35\xab\x4f\xbd\x78\x1b\xaf\xb4\x2c\xde\x5b\xad\x80\xb1\xf0\xf1\x8f\x85\xe1\x59\x56\x59\x19\xf4\x70\x89\xe9\x1d\xe2\x42\xc3\x4d\x63\x42\x40\xf6\x66\x07\xe7\x70\xf2\xc3\x4b\xe1\x10\x26\xcc\xab\x32\x9e\x69\x29\xf5\x98\x52\x7b\x76\x63\xd1\x53\xc1\x39\x34\x93\x7b\x6a\xca\xb3\x5a\xa3\x74\xfb\x4c\x8d\x8e\x73\xbd\x64\xb8\x36\xbb\x3a\xa3\x7c\xa4\x8d\x70\x68\xe7\x3a\xff\xd2\xdb\x80\x07\xc3\x39\xb7\x30\xe1\x4e\xff\x83\x33\xd3\x80\x65\x58\x46\x2f\xea\x19\x14\xbf\xf4\xe6\x85\xca\xb4\x29\xb8\x13\x5a\x51\xf1\xa2\xf1\x09\x17\x9c\xb1\x22\x30\xa5\xd1\x94\xc1\x13\x0c\xef\x2c\x45\xdd\x4a\x3d\xde\x80\xb8\x72\x80\x59\x86\x89\x13\x23\x84\x02\x5d\xae\xfd\x94\x30\xe0\x2e\x47\xb3\xd4\x70\xea\x04\xa9\xd5\x41\xf3\xc8\x33\x59\xf8\x69\x9b\x0a\x38\xf0\x6e\x7c\x43\x83\x39\x56\x89\xac\x52\x72\xd6\x5b\x0c\x55\xd1\x5a\x55\x1c\x4c\xad\x70\x7a\xec\x0f\x95\x48\x86\x37\x0f\x4a\x69\x41\xdd\x06\xf6\xa6\x27\x81\xa6\x6f\xff\xc2\x83\x43\x0b\x13\x55\xad\xdb\xdd\xb1\x3a\xc4\xb6\x2a\x10\x36\xbb\x7b\x3b\xdd\xed\xde\xde\x6e\x6f\xbb\xbb\xdb\x03\x06\x6f\x03\x9d\x43\x3d\x3f\xf8\x9f\x02\xc8\x67\xd3\x77\xa6\x2d\x31\x09\xb7\x57\x78\xf6\x1d\x1f\xb6\x67\x8f\x77\x3f\xbf\x86\xd1\xd0\x8f\xb0\x30\x40\x85\x86\x86\xb2\xf8\x32\xe0\x08\x63\x62\xc2\x29\xfb\xe8\x26\x21\x20\xd2\x41\xc8\xc6\x94\x7c\xe4\xc7\x81\xe8\x25\x3a\x3a\x35\x5d\x9c\x4a\x8f\x61\xbf\xe5\xc7\xd1\x7a\x18\x8e\xa2\x2f\x9f\x7e\xfd\x0c\xeb\xeb\x17\x5d\x73\x31\xd4\xa3\xf5\xf5\x68\x1d\x8e\x84\xcb\xab\x78\x1f\x4e\xff\x57\x53\xcf\x9a\xb9\x73\xa5\xdd\xef\x74\x06\x7e\xab\x9d\xe8\xa2\x53\xef\xb5\xa6\x2a\x2c\xc6\xd4\xff\x51\xe5\xba\xfa\x88\x6e\x49\xd5\xd2\xee\xad\x2a\x97\x78\x02\xd2\x1b\xf3\x79\x14\xcd\x56\x5a\xd9\x0d\x10\xd6\x56\x18\x2e\x82\x0c\xb9\xab\x0c\x82\xc1\x0f\x15\x5a\x6a\x1a\x06\x61\x8c\x32\xd1\x05\x3e\x78\x1c\x1b\xe8\x3c\x7d\x81\x28\x21\x33\xe8\x5f\x71\x49\x8e\xc9\x10\x4e\x6b\x0d\x25\x1f\xe0\x5d\x67\x9d\x0d\xae\xf5\xcf\x3c\x9d\x20\xd4\x6a\x47\x27\x88\x70\x7a\xde\xee\xa4\x3a\xb1\x9d\x83\xd7\xaf\xfa\x6f\x8f\x9f\xbf\xeb\x1f\xbf\x3a\x6a\x17\xe9\xf9\x57\xeb\xb3\x9d\x58\xea\xb8\x53\x70\xeb\xd0\xdc\xaa\xab\x05\x19\xa5\x03\x3a\x2e\xa4\x6d\x7b\xe7\xdc\xf8\x45\x22\x8a\x8e\xa8\x33\x70\xf8\xf3\xf7\x5f\xfe\xfa\xe3\x67\x10\x19\xb8\x5c\xf8\xac\x7f\x4f\x8d\x8c\xc6\x3c\x4c\x49\xe4\xc1\xdf\x01\x00\x00\xff\xff\xa3\x4a\xb6\x22\xb6\x12\x00\x00")

func DockerTemplatesReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadmeTmpl,
		".docker/templates/readme.tmpl",
	)
}

func DockerTemplatesReadmeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme.tmpl", size: 4790, mode: os.FileMode(420), modTime: time.Unix(1576924114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdb\x6e\x1b\x37\x13\xbe\xdf\xa7\x98\x58\x01\x22\x19\xa6\x24\x9f\x00\xd9\x48\x82\x3f\xb1\xff\xf8\x37\xfe\x20\x49\x63\x05\xbd\x30\x0c\x98\xbb\x3b\xab\x65\xc4\x25\x37\x24\x57\xb2\x63\xb8\xaf\xd0\xf6\x01\x8a\xdc\xe4\xb6\xf7\x7d\x9e\xbe\x40\xf3\x08\xc5\x90\xab\xa3\xed\x36\x88\x15\x5f\x58\xe2\x70\x0e\x1f\xe7\xc0\xe1\xa8\x01\x6e\x2c\x94\x63\xa9\x4e\x86\x68\xa2\xe8\xf1\x03\xc6\xa0\xaf\x0f\xc0\x3a\x6e\x1c\x30\xf6\x34\x6a\x34\xa0\xcf\x63\x89\xa0\x33\x38\xd0\xca\xa1\x72\x36\xda\x6c\xc3\xe9\xff\xf4\x18\x9c\x86\xca\xe2\x59\xb3\x91\xeb\x31\x73\x9a\x55\x16\x5b\x11\x00\x6d\xbf\x10\xc6\xba\x7a\x37\xa3\xef\x93\x4d\x08\xfb\x07\x06\xb9\x43\xe0\x0a\xb8\x14\xdc\x9e\x35\x1b\x89\xa7\x30\xae\x98\xa7\xb4\xbc\x95\x43\x8f\x8c\x1d\xe8\xa2\xd4\x5e\x57\x80\xca\x92\x40\x98\x53\xf8\x5f\xc9\xad\x13\x89\x45\x6e\x92\x1c\xb8\x4a\xe1\xff\x22\xe6\x8a\x9f\x35\x1b\x38\xbf\xc5\xb8\x4a\xd9\xd0\x6f\xcd\x49\xf7\xb5\x81\xd2\xe8\x8b\xcb\xb3\x66\xc3\x69\xc3\xfc\xf7\x79\xed\x17\x98\x54\x0e\xa1\x4f\xfe\x82\x44\x17\x05\x57\x29\xa9\x0e\x74\x16\xfc\x58\xd3\x17\xe4\x78\x51\x4a\xb4\xe4\xbe\x79\xa9\x40\x65\x3a\x9b\x97\xf1\x07\xe6\xce\x7b\x23\xa5\xcf\xe0\x83\x67\x95\xcb\xb5\x21\x22\x0f\xdf\x02\xf9\xcb\xa7\xcf\xbf\xf9\x90\x18\x11\x57\x4e\xa8\xc1\x59\xb3\x41\x34\x96\xcc\xd1\x02\xeb\x49\xae\xc7\x70\xa9\x2b\x03\xb6\x2a\x4b\x6d\xdc\x59\xb3\x61\x29\x66\x44\x63\x35\xad\x35\x0b\x3f\xaa\xd4\x07\x9f\xa2\x3f\x8b\x33\x2d\x1b\x30\x0d\x6c\x14\xbd\xd0\x06\xb2\x7a\xc9\x07\xb8\x41\x26\x40\x21\xa6\x24\x10\x57\x42\xa6\x20\x0a\x3e\x40\x08\x41\x6b\x47\xd1\xf9\xf9\xb9\xcd\x51\xca\x28\x50\xa0\xac\xa4\x84\x8b\xae\xf9\x38\xd4\xa3\x8e\xf7\xe1\xfe\xd5\x15\xb4\x0f\x85\x81\xeb\x6b\xe2\x8e\x22\x6d\xe0\x86\xdc\x24\xfc\xc1\x48\xe0\x6b\x10\xb8\xa5\xac\x9a\xc9\xf9\x65\xc8\xf6\x27\x6b\xb5\x71\x53\x29\x60\x4e\x00\x63\xa6\x00\x36\x82\x87\xcd\x72\x9c\xb6\x3a\xe4\xf9\xfd\x8e\x2e\x5d\x87\x97\xa5\x5f\xdd\x89\xf0\xea\x4a\x64\xd0\x7e\xce\x2d\x5e\x5f\xb3\xab\x2b\x54\x29\xd1\x02\x05\xae\xaf\xd7\xc8\x3e\x2c\xfe\x05\x27\xde\x95\xac\x51\x74\xe2\x2b\x8f\x1c\x5e\x02\x4a\xbe\xc8\x34\xac\x99\xee\x72\x47\x55\x02\x4b\x61\x21\xdd\x27\x32\x13\x1f\xc1\x34\xd3\x17\x6d\x39\x6d\xfe\x4d\x2f\xb1\x4c\xd5\xdc\x5a\x10\x77\x6b\xf0\xbe\x1e\xc1\xc3\x37\x3f\x1e\xd6\x5e\x5c\xf4\xb0\xa7\xcd\x6b\xbf\x51\x36\x51\xf4\x0c\x32\x1c\x83\x15\xb4\x03\x93\x12\x22\xf8\x39\xca\xd2\xe7\x5e\xa5\x52\x34\xd6\x91\xab\x5c\x8e\x10\x73\x2b\x12\xbb\x7f\x4f\x54\xf5\x7f\x56\x51\xd2\x1b\xc5\x0b\x04\x06\x27\x89\xe1\x25\x02\x97\xd2\x5b\xea\x8f\x11\x9d\x85\xcc\xe8\xc2\x73\x3d\xb2\xe0\x44\x81\x52\x28\x6c\xaf\xcc\xa8\x85\x52\x28\xe4\x25\x1d\x7f\x01\xc1\xbc\x75\x42\xb3\x84\x00\xe8\x42\xe0\x42\x09\x35\x98\x69\xb8\x1f\xac\x45\x28\x07\x5a\x4a\x4c\x1c\xe0\x08\xcd\x65\x40\x73\xab\xcd\x80\xd0\x73\x69\x85\x8f\x6c\x0d\x7c\x75\x1e\x62\x97\xc8\x0d\x6c\x75\x37\x77\xe6\x50\xd5\xde\x71\x39\x77\x30\x46\x83\xe0\x88\x80\x29\xc4\x98\x69\x83\x9e\x7d\x85\x10\xac\x50\x89\x57\xba\xcb\x36\xb7\xd8\x56\xf7\x6b\x90\x2c\xcb\xac\x0e\x8e\x86\x4c\x48\x6c\xbb\x0b\x37\x4b\x99\x1a\x06\x55\x89\xe5\x23\xa4\x0a\x9a\x30\xad\xdc\x70\x62\x47\xc0\x98\xff\x7f\x97\x79\x6e\x81\x03\x71\x78\x81\xd5\x05\x02\x0b\x2e\x24\x30\x56\xe6\x5a\xf9\x82\xa1\x26\x38\x1f\x82\x42\x0c\x72\x07\x39\x61\x08\x3c\xaa\x2a\x62\x34\x16\xb4\x81\x20\xcc\xd3\xd4\xa0\xb5\x78\xcf\x14\xb5\xb0\x76\xa8\x15\x97\x29\xf4\x4d\x55\x94\x6b\xc0\xd8\x08\x8d\xc8\x04\xa6\xc0\xe0\x50\xd8\x52\xf2\xcb\x09\xb4\xf8\x12\xa6\x9b\x74\x9a\x1a\x6c\xbf\x4e\x15\x1e\xeb\xca\xc1\xbc\xba\xfb\x61\x1b\x3c\x59\xdb\xe9\xb5\x7b\xbd\x6e\x77\xa7\xb7\xb1\xd5\xde\xee\xed\xee\x6d\xef\x6d\x6c\x0e\x8b\xb5\xaf\x88\xa1\xaf\x67\x0e\x86\xa7\xa2\xf2\x77\xf5\xe6\xb0\x00\x6e\x74\xa5\x52\xe0\x50\x4a\x9e\x20\x08\x05\x6f\xb8\x11\x21\xe0\x78\x41\x2f\x0d\xba\xa4\x0a\xf8\x36\xd4\xfa\xbb\x24\x0b\x5a\x90\x3a\xe1\x32\xd7\xd6\xed\xef\x6d\x75\xa9\x6a\x5f\x57\xae\xac\x66\x45\xab\x17\x9b\xf6\xaa\x0b\xe5\xbd\xd5\x0a\x18\x0b\x1f\xff\x58\x2a\x9e\x65\xc5\xb5\x42\xdb\x31\x3d\x5a\x5c\xb8\x91\xd3\x98\x40\x90\xc9\xd9\xf1\x39\x9c\xfc\xf0\x52\x38\x84\x09\xf3\x0a\xed\x67\x5a\x4a\x3d\xa6\x64\x9f\x35\x36\x7a\x5a\x38\x87\x66\xd2\xce\xa6\x3c\x2b\xb7\x4b\x4d\x6a\x6a\x77\x9c\xeb\x25\xdb\xb5\xe5\x95\xda\xe5\x23\x6d\x84\x43\x3b\xd7\x1d\x96\xde\x12\x3c\xd8\xce\xb9\x85\x09\x77\xfa\x7d\x4e\x4e\x93\x99\x61\x19\x3d\xc5\x67\x68\xfc\xd2\x23\x10\x2a\xd3\xa6\xe0\x4e\x68\x45\x45\x8d\xc6\xe7\x5f\x70\xc9\xea\xf0\x94\x46\x53\x4e\x4f\x60\xbc\xb3\x94\x01\x56\xea\xf1\x06\xc4\x95\x03\xcc\x32\x4c\x9c\x18\x21\x14\xe8\x72\xed\x27\x8c\x01\x77\x39\x9a\xa5\xbb\xa8\x4e\x96\x5a\x1d\x34\x8f\x3c\x93\x85\x9f\xb6\xa9\xaa\x03\xef\xc6\xb7\xdd\x3d\xc7\x2a\x91\x55\x4a\x2e\x7b\x8b\xa1\x4e\x5a\x2b\x0c\x88\xa9\x75\x4e\x0f\xff\xa1\x12\xc9\xf0\xe6\x71\x29\x45\xe8\x22\x82\xbd\xe9\x79\xa0\xe9\x5b\x84\xf0\xf8\xd0\xc2\x44\x55\xeb\x76\xa7\xac\x14\xb4\xad\x0a\x84\xcd\xee\xde\x4e\x77\xbb\xb7\xb7\xdb\xdb\xee\xee\xf6\x80\xc1\xdb\x40\xe7\x50\x0f\x21\xfe\xf7\x04\xf2\xdc\xf4\x8d\x6a\x4b\x4c\x42\x93\x0b\xef\xc5\xe3\xc3\xf6\xec\xf9\xef\x87\xe0\x30\x5f\xfa\x39\x18\x06\xa8\xd0\xd0\x64\x17\x5f\x06\x1c\x61\xd6\x4c\x38\x65\x22\x75\x1b\x02\x22\x1d\x84\xcc\x4c\xc9\x4d\x7e\xa0\x88\x5e\xa2\xa3\x83\x53\x7f\x55\x7a\x0c\xfb\x2d\x3f\xd3\xd6\x13\x75\x14\x7d\xf9\xf4\xeb\x67\x58\x5f\xbf\xe8\x9a\x8b\xa1\x1e\xad\xaf\x47\xeb\x70\x24\x5c\x5e\xc5\xfb\x70\xfa\x9f\x9a\x7a\xd6\xcc\x9d\x2b\xed\x7e\xa7\x33\xf0\x5b\xed\x44\x17\x9d\x7a\xaf\x35\x55\x61\x31\xa6\xee\x80\x2a\xd7\xd5\x47\x74\x4b\xaa\x96\x76\x6f\x55\xb9\xc4\x13\x90\xde\x18\xf2\xa3\x68\xb6\xd2\xca\x6e\x80\xb0\xb6\xc2\xd0\x23\x32\xe4\xae\x32\x08\x06\x3f\x54\x68\xe9\x0e\x31\x08\x63\x94\x89\x2e\xf0\xc1\xe3\xd8\x40\xe7\xe9\x0b\x44\x09\x99\x41\xff\xea\x4b\x72\x4c\x86\x70\x5a\x6b\x28\xf9\x00\xef\x3a\xeb\x6c\xfa\xad\x7f\x2b\xea\x04\xa1\x56\x3b\x3a\x41\x84\xd3\xf3\x76\x27\xd5\x89\xed\x1c\xbc\x7e\xd5\x7f\x7b\xfc\xfc\x5d\xff\xf8\xd5\x51\xbb\x48\xcf\xbf\x5a\x9f\xed\xc4\x52\xc7\x9d\x82\x5b\x87\xe6\x56\x5d\x2d\xc8\x28\x1d\xd0\x71\x21\x6d\xdb\x3b\xe7\xc6\xcf\x1a\x51\x74\x44\x57\x04\x87\x3f\x7f\xff\xe5\xaf\x3f\x7e\x06\x91\x81\xcb\x85\x4f\xfc\xf7\x74\xa9\xd1\xa0\x88\x29\x89\x3c\xf8\x3b\x00\x00\xff\xff\xa9\x78\x10\xab\xfb\x12\x00\x00")

func DockerTemplatesReadme_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_alpineTmpl,
		".docker/templates/readme_alpine.tmpl",
	)
}

func DockerTemplatesReadme_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_alpine.tmpl", size: 4859, mode: os.FileMode(420), modTime: time.Unix(1576924123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesTravisTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcd\x6e\xdb\x3a\x10\x85\xf7\x7c\x8a\x81\x60\x20\x8b\x0b\x8a\x37\x5d\x74\x21\x20\x8b\xa0\x31\x8a\xa0\x4d\x5c\xd8\x68\xba\x29\x60\xd0\xd2\x58\x62\x43\x91\xca\x0c\xa9\x18\x51\xfd\xee\x45\x24\x25\x56\xf3\xd7\xec\x04\x9d\xef\x1c\x72\x86\x33\x7a\x1b\x90\xd6\x9c\x93\x69\x42\x26\x00\x24\x14\x3e\xbf\x46\x02\x53\xeb\x12\x59\x08\x8e\x85\xcf\x80\xf0\x26\x1a\xc2\x42\x88\x0d\x6e\x3d\xe1\xda\x38\x0e\xda\xda\xc1\x72\xcf\x00\xd5\x20\xb7\xa0\x22\x93\xb2\x3e\xd7\x56\x6d\x8c\x53\x43\x98\x64\x6b\xea\xf7\x93\x92\xd1\xb1\xa7\xde\x90\x47\xb2\x20\xbf\x42\x15\x42\xc3\x99\x52\xa5\x09\x55\xdc\xa4\xb9\xaf\xa7\x8e\xbf\xbe\x09\x2d\x6a\x46\x56\x85\xbf\x75\xd6\xeb\x42\x1d\xa7\x1f\x3e\xa6\xc7\xaa\x30\x1c\xd6\xd6\xb8\xb8\x4b\x83\xa6\xb4\xbc\x03\x29\x7d\x0c\x4d\x0c\x30\xf1\x8f\x5a\x7f\x7a\xd0\x04\xbb\x76\xfb\x9a\x9c\x57\xb5\x2f\xe0\xbf\x1d\x1c\x92\x9f\x55\xfc\x0f\x66\x5a\x6b\xdf\x9c\xba\x7d\x85\x7c\xd2\xb0\x77\x38\xc6\xec\x97\x8c\x98\x57\x1e\x8e\xba\x04\x77\x0d\x92\xa9\xd1\x05\x6d\x93\x2c\x50\xc4\xfd\x11\xfc\x1e\x72\x03\x22\x28\x0c\xf9\x18\xa9\x0a\x8d\xb5\x77\xe9\x2f\xf6\x93\xc3\x19\xa9\x35\x39\x3e\x4c\x0d\x21\x07\x4d\xe1\x71\x4c\xa6\x83\x95\x17\x23\xb5\x35\x16\x59\x25\xb3\xab\xf9\x72\x75\xbe\xb8\x4c\x7a\xf5\xfc\xe2\xf4\xf3\xfc\x24\xd9\xfd\x4f\x77\xd7\xbe\x55\xe1\xd6\xb8\x90\xcd\xba\x91\x51\x3f\x95\x92\xfb\x44\x08\x74\x6d\xd6\x75\xa4\x5d\x89\x30\x6b\xb5\x85\xec\x04\xd2\x2b\x24\x36\xde\xf1\x7e\xdf\x47\x8d\x9e\x93\xae\xeb\x91\xf4\xcc\x10\xbc\x29\x29\x6d\x1b\xe3\xf0\x2d\xe2\xbe\x9f\x5d\x87\xae\xd8\xef\x85\xb0\xda\x95\x51\x97\x98\xc1\x46\x73\x25\xc4\xf3\xf5\x19\x5e\xac\x1d\xee\x35\x5d\xab\x4d\x34\xb6\x00\x29\xf9\x26\x6a\xae\x40\x06\x48\x66\x7d\xe9\x09\xa4\x87\xae\x4e\x43\x06\xc7\x03\xf5\x94\x01\x8a\x0e\x64\x30\x87\x18\x59\xbd\xb0\xc6\x93\x3f\xd6\x97\xc6\x81\x8c\x30\x3b\x5b\x7c\xfa\x32\x5f\xae\xbf\xaf\xe6\xcb\xcb\xd3\x8b\x39\xc8\xe6\xf1\xdf\xb7\xd3\xd5\xea\xc7\x62\x79\x36\x35\x36\x91\xab\xc3\x3d\xc4\xf8\xf2\x9c\x8d\xfa\x9f\x00\x00\x00\xff\xff\x8c\x58\x8b\xbc\x4a\x04\x00\x00")

func DockerTemplatesTravisTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesTravisTmpl,
		".docker/templates/travis.tmpl",
	)
}

func DockerTemplatesTravisTmpl() (*asset, error) {
	bytes, err := DockerTemplatesTravisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/travis.tmpl", size: 1098, mode: os.FileMode(420), modTime: time.Unix(1576921076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".docker/templates/docker-compose.tmpl":         DockerTemplatesDockerComposeTmpl,
	".docker/templates/docker-entrypoint.tmpl":      DockerTemplatesDockerEntrypointTmpl,
	".docker/templates/docker-sync.tmpl":            DockerTemplatesDockerSyncTmpl,
	".docker/templates/dockerfile_alpine.tmpl":      DockerTemplatesDockerfile_alpineTmpl,
	".docker/templates/dockerfile_debian-slim.tmpl": DockerTemplatesDockerfile_debianSlimTmpl,
	".docker/templates/dockerfile_ubuntu.tmpl":      DockerTemplatesDockerfile_ubuntuTmpl,
	".docker/templates/dockerignore.tmpl":           DockerTemplatesDockerignoreTmpl,
	".docker/templates/env.tmpl":                    DockerTemplatesEnvTmpl,
	".docker/templates/makefile.tmpl":               DockerTemplatesMakefileTmpl,
	".docker/templates/readme.tmpl":                 DockerTemplatesReadmeTmpl,
	".docker/templates/readme_alpine.tmpl":          DockerTemplatesReadme_alpineTmpl,
	".docker/templates/travis.tmpl":                 DockerTemplatesTravisTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".docker": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"docker-compose.tmpl":         &bintree{DockerTemplatesDockerComposeTmpl, map[string]*bintree{}},
			"docker-entrypoint.tmpl":      &bintree{DockerTemplatesDockerEntrypointTmpl, map[string]*bintree{}},
			"docker-sync.tmpl":            &bintree{DockerTemplatesDockerSyncTmpl, map[string]*bintree{}},
			"dockerfile_alpine.tmpl":      &bintree{DockerTemplatesDockerfile_alpineTmpl, map[string]*bintree{}},
			"dockerfile_debian-slim.tmpl": &bintree{DockerTemplatesDockerfile_debianSlimTmpl, map[string]*bintree{}},
			"dockerfile_ubuntu.tmpl":      &bintree{DockerTemplatesDockerfile_ubuntuTmpl, map[string]*bintree{}},
			"dockerignore.tmpl":           &bintree{DockerTemplatesDockerignoreTmpl, map[string]*bintree{}},
			"env.tmpl":                    &bintree{DockerTemplatesEnvTmpl, map[string]*bintree{}},
			"makefile.tmpl":               &bintree{DockerTemplatesMakefileTmpl, map[string]*bintree{}},
			"readme.tmpl":                 &bintree{DockerTemplatesReadmeTmpl, map[string]*bintree{}},
			"readme_alpine.tmpl":          &bintree{DockerTemplatesReadme_alpineTmpl, map[string]*bintree{}},
			"travis.tmpl":                 &bintree{DockerTemplatesTravisTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
