// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// .docker/templates/docker-compose.tmpl
// .docker/templates/docker-entrypoint.tmpl
// .docker/templates/docker-sync.tmpl
// .docker/templates/dockerfile_alpine.tmpl
// .docker/templates/dockerfile_debian-slim.tmpl
// .docker/templates/dockerfile_ubuntu.tmpl
// .docker/templates/dockerignore.tmpl
// .docker/templates/env.tmpl
// .docker/templates/makefile.tmpl
// .docker/templates/readme.tmpl
// .docker/templates/readme_alpine.tmpl
// .docker/templates/travis.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DockerTemplatesDockerComposeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x41\x4f\xe3\x3c\x10\xbd\xe7\x57\x8c\xf8\x90\x38\x39\x4d\x84\x3e\x2d\x6b\xa9\x87\xb2\xf4\xc0\xee\xaa\x45\xb4\xe2\x1a\x99\x64\x0a\x56\x1d\xbb\x1a\x3b\xa1\x6c\x94\xff\xbe\x72\x9c\x84\x96\x85\xee\x5e\x9c\xcc\xcc\x9b\xe7\x37\xf3\xcc\x18\x8b\x6a\x24\x2b\x8d\xe6\x70\x71\x19\x7f\xb9\x88\x2c\x52\x2d\x73\xb4\x3c\x8a\x00\xdc\x8b\xd4\x8e\x47\x00\x00\xb2\x14\x4f\xc8\x61\x9f\xd0\xaf\xad\xa9\x27\xa1\xd2\x34\x10\xdf\x48\x82\xb6\x6d\x1a\xb9\x81\xf8\x5a\x58\x6c\x5b\xd6\x34\xa8\x0b\x9f\x0b\x19\x68\xdb\x8e\xe2\xb1\x92\xaa\x08\x6c\x00\xb9\xd1\x0e\xf7\x8e\x43\xdc\x27\x0a\x93\x6f\x91\x36\x52\x21\x87\x9b\xf1\x3f\x1a\xb0\x42\x6a\xa4\x4c\x8b\x12\x79\x90\xc5\x72\x25\x47\x8d\xcc\xa2\xa0\xfc\xf9\x73\xa9\x03\x40\x09\x87\xd6\x9d\x60\x0d\xb8\x0e\xb0\x33\xe4\x6c\xa0\x64\x70\x99\x24\x09\xf7\x47\x17\xa3\xae\x25\x19\x5d\xe2\xb0\x1e\x06\x8b\xe5\xcd\x3c\x9b\x2f\x1e\xa6\x3b\x32\x45\x95\x3b\x69\x74\x27\xcf\x10\xdb\x91\xac\xcd\xfe\x95\x9f\xb8\xd6\x19\xea\x51\x87\x23\xf8\x9d\x88\x27\x9c\x1c\x92\x1c\x4c\x70\x24\xf0\xec\x6b\xf2\x7f\xc2\xfd\x71\x06\xff\xc1\xda\x10\xec\x68\xa0\x0b\xd5\xd4\x57\xd3\xa1\xea\x75\x90\x51\x1d\xc9\x00\xba\x4a\xd3\x2b\xee\x0f\x0f\xba\x0b\x17\x02\xf8\x31\x50\x09\xeb\x64\xfe\xc1\x9a\x83\x6f\x71\x0f\x88\x73\x33\x39\xc2\x1e\x47\xfc\xbc\x99\xff\x9c\xad\xd6\xb7\xdf\xb2\x87\xf9\xfd\xea\x76\xb9\x68\x4f\x2c\xa5\x6f\xfd\x6c\xe3\xda\x14\x18\x7b\xfc\xf4\xe8\x8e\xbe\x9a\xab\xca\x3a\xa4\x58\x6a\xe9\xa4\x50\x59\x29\x7c\x98\xf9\x26\x7b\xb2\xa1\x63\x0c\x53\xb1\x3e\xd7\x23\x1e\x8d\x71\xd6\x91\xd8\xc5\x25\x96\x86\x5e\x33\x65\xf2\xed\xd4\x51\x85\xc3\x02\xe7\xab\xec\xfb\xec\x61\x96\x2d\xef\xd6\xab\xe9\xdb\xac\x63\xae\x3d\xeb\x90\x95\x92\xa5\x1c\xac\x03\x28\xb1\xf4\x4c\x43\x08\x60\xcd\xc6\x71\x60\xe9\x98\x78\x16\x54\x8c\x89\xda\xa8\xaa\xc4\xd1\x78\xb4\x85\x70\x22\x49\xf9\xa4\xb2\x34\xb1\xcf\x82\xf0\x9d\x05\xbe\xfe\xe7\x83\x79\x93\x77\xb7\xbc\x5f\xb7\xfc\x5d\xec\x5d\xdf\xca\x47\xa1\xc5\x5f\xec\x0e\xa0\xfe\xc3\xcf\x9b\x1f\xb7\xd7\xb3\xc5\xec\x5f\xfc\x0d\x2d\x1f\x29\xeb\x39\x06\x61\x87\x61\x14\x1d\xcc\x3f\xce\xde\x75\x16\x24\x6b\x24\x0e\xca\xe4\x42\x45\x91\x46\xf7\x62\x68\xdb\x01\x0b\xdc\x88\x4a\xf5\x4f\x07\xf7\x0e\x49\x0b\x35\x2c\x3c\x68\xd2\x2f\xac\x93\xf5\x3b\x00\x00\xff\xff\x93\x51\xb3\x35\x15\x05\x00\x00")

func DockerTemplatesDockerComposeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerComposeTmpl,
		".docker/templates/docker-compose.tmpl",
	)
}

func DockerTemplatesDockerComposeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerComposeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-compose.tmpl", size: 1301, mode: os.FileMode(420), modTime: time.Unix(1576920052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerEntrypointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\x52\x71\xe0\x02\x04\x00\x00\xff\xff\xc2\x78\x36\x2c\x0f\x00\x00\x00")

func DockerTemplatesDockerEntrypointTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerEntrypointTmpl,
		".docker/templates/docker-entrypoint.tmpl",
	)
}

func DockerTemplatesDockerEntrypointTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerEntrypointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-entrypoint.tmpl", size: 15, mode: os.FileMode(420), modTime: time.Unix(1576745907, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerSyncTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x6a\xc3\x40\x0c\xc6\xf1\xdd\x4f\x21\x8e\xc2\x4d\x6e\xdd\x8e\x07\x5d\x4a\x1f\xc0\x5b\x47\x73\xb5\x95\xcb\x41\x90\x0e\x49\xb6\x63\x42\xde\x3d\x24\x86\x38\xe0\x4d\xfc\xfe\x82\x6f\x42\xd1\xcc\x14\xc0\x7d\xb9\x8a\x8b\x65\x26\x0d\x15\xc0\x84\xf2\xcf\x8a\x01\x4c\x46\xac\x74\xa1\xfe\xc1\xb1\x94\x6e\x88\x16\xef\x37\x80\x4a\x1f\xe0\xed\xd2\xfe\xfd\x5e\x3f\x6c\xce\x64\xab\x2e\xd4\x77\x6a\x12\x0d\xd3\x12\xc0\x53\xb4\x3c\x61\xc7\x7a\xf6\x5b\x1f\x15\x25\x0f\x01\x3e\x9b\xa6\xd9\x34\x09\x8f\x65\xcf\x51\x92\xae\x8b\x35\xb8\xba\x08\x1e\x50\x80\x70\x46\x71\x4f\xcd\x89\x58\xf0\xdb\xb7\xd1\x8e\xf0\x9e\xb2\xf9\x7d\xfb\xc1\x13\xcf\x2f\x0f\xb7\x00\x00\x00\xff\xff\x22\x21\x4b\x7c\xfd\x00\x00\x00")

func DockerTemplatesDockerSyncTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerSyncTmpl,
		".docker/templates/docker-sync.tmpl",
	)
}

func DockerTemplatesDockerSyncTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerSyncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-sync.tmpl", size: 253, mode: os.FileMode(420), modTime: time.Unix(1576854421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xd1\x4e\x1b\x3b\x10\x7d\xbe\xfe\x8a\x51\xb8\x82\x07\xae\x13\x50\xde\xb8\x97\xab\x46\x21\x6d\xa3\x96\x24\x5a\x42\x2a\x54\xaa\xca\xb1\x27\xd9\x29\xbb\xb6\x65\xcf\x2e\x89\x10\xff\x5e\xed\x6e\x02\x01\x05\xf1\xd0\xa7\xb5\x67\x8e\xec\x73\x8e\xe7\xec\xc7\x64\x7c\x09\x2a\xf3\x64\xf1\xac\xdb\x3e\x3d\x81\xde\x15\xcc\x0b\xca\x8c\x10\xdf\xc6\xc9\x97\x8b\x61\x02\x1d\xe7\xb9\xa3\xbc\x17\xe2\x00\x86\x36\xb2\xca\x32\x98\xac\x39\x75\x16\x94\x35\x80\x2b\xc6\x60\x55\x06\x06\x3d\x5a\x83\x56\x13\xc6\x7f\x80\xac\xce\x0a\x43\x76\x09\x29\x2a\x83\x21\xd6\xe0\x4f\xfd\xbe\x48\xae\x47\xa0\xfc\x1d\x28\x63\x40\x4a\xeb\xa4\x56\x3a\x45\xf0\xf5\x91\xdd\xed\x57\x1a\x2c\xc1\xaf\xbb\xd2\x93\x87\x8c\xe6\x8b\x05\x6d\x3e\x75\x27\x2f\x62\x56\x2f\x96\x5a\xc3\x92\x18\xb4\x92\x1a\x03\xd3\x82\xb4\x62\x8c\xe0\x3c\xda\x79\xa6\xe2\x2b\xf4\xf1\xf1\x0b\x19\xe4\xd1\x96\x35\x23\x4f\xbe\x0b\xb4\xa9\xfb\xa6\x2e\x0e\xa0\x1f\x50\x31\x82\x82\x92\x02\x17\x2a\x03\xb4\x25\x05\x67\x73\xb4\x5c\x2b\x52\x9a\xa9\xac\x20\xc4\xcd\x39\x1b\x19\x32\x87\x12\x6d\xd9\xb8\x57\xad\xc4\x60\x34\x83\x49\x6f\xfa\xf9\xbc\xf5\x54\xeb\xcc\xc9\x9e\xfd\x5d\x15\x5b\x70\x2b\xfe\x9a\x0d\x93\xe9\x75\xef\xeb\xcf\xc1\x68\xb6\x03\x6a\xed\x32\xde\x35\x19\xc8\xb2\x03\x4e\x71\x2f\xb9\x7b\xe2\x74\x57\x60\x6d\x52\xe6\x2c\x82\x94\x06\x3d\xa7\xe7\xa7\x20\xe7\xf0\xf0\xd0\x9e\x61\x88\xe4\xec\xe3\x23\xa4\xcc\x3e\x9e\x75\x3a\x4b\xe2\xb4\x98\xb7\xb5\xcb\x3b\x7c\x4f\x96\x7d\x70\xbf\x50\x73\xb3\x79\x1a\x88\x8a\xf2\xe1\x21\x68\xf3\xba\xf2\xc2\x4b\x29\x0b\xbf\x0c\xca\x60\x55\xde\x07\xd0\xcd\x2c\xed\xe9\xd8\x22\xf7\xeb\x7d\x8d\xb6\x10\xaf\x07\x57\x5c\xf6\x86\xa3\x69\x6f\x38\x1a\x24\xb0\x3a\x09\xab\x3b\x57\xc2\x7f\x9b\xc5\x07\x1f\x1c\x3b\x9b\x2b\xca\x2a\x4d\xff\xef\x3c\x6c\x28\x2c\x53\x8e\x50\x44\x0c\xb5\x4d\xf9\x9d\xa1\x00\xd2\xd7\x9a\x36\x77\x2b\x63\xaa\x3e\xc8\x0b\x68\x1c\x90\xe9\xb3\x64\x19\xa1\x7a\xc6\x4e\x4c\xe1\x56\x40\x05\x8f\xc5\x16\xa6\xe1\x68\xc7\x9d\x7f\x9f\x0f\x37\x8a\xd5\xd1\x7b\x81\xda\x72\x7b\xf1\xe6\xce\x66\xeb\xf7\x22\xb4\x89\xcb\x36\x02\xd5\x3e\xb2\xd1\xcd\xec\x5f\xdd\x13\xeb\x14\xd8\xd5\x9a\x41\x3b\xcb\xb8\x62\x71\x7d\x35\x48\x1a\xda\x7b\x83\xdf\x77\x7e\xfd\xe6\xa8\x2d\x82\xcb\xeb\xa6\x0f\x58\x92\x2b\x22\x50\xae\x96\x28\xfa\xe3\xc9\x0d\x48\x59\xb5\xcf\xeb\x9f\xca\x73\x1a\x76\x72\x21\x0e\xa0\xb7\x0d\xd1\x1b\x37\xfc\x49\x76\x06\xa3\x69\x72\x33\x19\x0f\x47\x53\xf8\xde\xaa\x05\xb6\x7e\xfc\x0e\x00\x00\xff\xff\x16\xea\xa4\x28\xf6\x04\x00\x00")

func DockerTemplatesDockerfile_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_alpineTmpl,
		".docker/templates/dockerfile_alpine.tmpl",
	)
}

func DockerTemplatesDockerfile_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_alpine.tmpl", size: 1270, mode: os.FileMode(420), modTime: time.Unix(1576830973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_debianSlimTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x51\xeb\xda\x30\x14\xc5\xdf\xf3\x29\x2e\x0e\x7c\x98\xa4\x19\xf8\x30\x90\x39\x94\xad\x1b\x65\xb3\x95\xac\x2a\x32\xc7\x88\x6d\x96\x66\xb6\x49\x48\x6e\x9d\x22\x7e\xf7\x61\xf5\xcf\x5f\x7d\xca\x39\xe7\x47\xe0\x9c\xfb\x85\x67\x33\x70\x47\xac\xac\x19\x0d\xa3\xf7\x34\xd4\xba\xa1\x01\xbd\xc4\xa2\x22\x64\x36\x4d\xd2\x7c\x9a\xa4\x31\x87\xc3\x3b\x7f\xd8\xd9\x3d\x7c\xb8\x89\x89\xf3\x16\xad\x69\x84\xae\xa3\xc2\x36\x1f\x09\x99\xf2\xaf\x90\xaf\x92\x34\xff\xbd\x8c\xf9\x8f\x24\x4b\xc7\xa7\x53\xb4\x94\x3e\x68\x6b\xce\x67\x42\x3e\x65\xf3\x35\x94\xb6\xd8\x49\x4f\xa5\x41\x7f\x74\x56\x1b\x8c\x42\x05\xec\xc1\x12\xbe\x48\xa1\xa8\x1a\x5b\xc2\xe0\xf0\xcc\x3a\xb8\x21\xc2\x21\x55\x12\xa1\x75\xa5\x40\x09\xfd\xfe\x5d\xa6\x4d\x40\x51\xd7\x40\x8f\xb0\x21\x4a\xe3\xcb\x1f\xa7\xdd\xf0\x15\xd2\xd6\x29\x2f\x4a\x09\x54\x82\xd2\x38\xa8\x10\x5d\x18\x31\xa6\x34\x56\xed\xf6\x32\x89\xe1\x3f\x6d\xd0\x79\xfb\x57\x16\x78\x35\x91\xd2\x38\xb9\x5f\xf5\x46\x2a\x35\xee\xd0\x73\xb3\xa2\x96\xc2\x80\x68\xd1\x5e\x55\x57\xd1\x37\x40\xfd\x1f\x60\x7b\xe1\x59\xad\xb7\x4c\x38\x64\xb5\x0e\x18\xd8\x5b\x60\xd8\xb8\xcb\x73\x61\x9d\x24\x24\x4e\x73\xbe\x9e\x67\x49\x9a\xc3\xcf\xde\xe3\x21\x7a\xbf\xc8\x32\xfb\xbe\x98\xc5\x70\x6d\x46\x56\x19\xff\xf6\x39\xe1\xc0\x82\xdf\xdf\xa2\xff\x01\x00\x00\xff\xff\x15\xde\x8c\x62\xdc\x01\x00\x00")

func DockerTemplatesDockerfile_debianSlimTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_debianSlimTmpl,
		".docker/templates/dockerfile_debian-slim.tmpl",
	)
}

func DockerTemplatesDockerfile_debianSlimTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_debianSlimTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_debian-slim.tmpl", size: 476, mode: os.FileMode(420), modTime: time.Unix(1576745957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_ubuntuTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xdf\x6e\xd3\x30\x18\xc5\xef\xfd\x14\x9f\x86\x34\x01\x53\x62\xa6\x5d\x31\x31\xb4\x0a\x02\x44\xd0\x64\xf2\xd2\x56\x15\x45\xc8\x49\x8c\x63\x48\x6c\xcb\xfe\x5c\x48\xab\x3e\x10\xcf\xc1\x8b\xa1\xa6\x9d\xfa\xe7\xca\xe7\x9c\x9f\x65\x9d\xe3\x0f\x2c\x1f\x43\x28\x83\xc6\x70\x7b\xfd\x3a\xbe\x7e\x45\xc8\x78\x94\x66\xc5\x28\xcd\x12\x06\x8f\xff\xfe\x96\xdc\xa3\x12\x1a\x3e\x99\xb0\x12\x08\xcf\x7b\x63\x56\xca\xc4\x95\xe9\x5e\xc0\x1b\x2f\xf6\xf8\xfe\x10\xbf\x25\x64\xc4\x3e\x42\x31\x4b\xb3\xe2\xfb\x34\x61\x8f\x69\x9e\xdd\xad\xd7\xf1\x54\x38\xaf\x8c\xde\x6c\x08\x79\x97\x3f\xcc\xa1\x36\xd5\x2f\xe1\x22\xa1\xd1\xf5\xd6\x28\x8d\xb1\x6f\x80\x9e\x58\xc2\x26\x19\x54\x4d\x67\x6a\xb8\xfa\x73\xce\x06\xb8\x20\xdc\x62\x24\x05\x42\xb0\x35\x47\x01\x97\x97\x47\x99\xd2\x1e\x79\xdb\x42\xd4\xc3\x82\x48\x85\xb0\x20\xb6\xc7\xc6\xe8\x9b\xc8\x2a\xfb\xf4\x82\x55\xf6\xe6\x70\x35\x0a\x56\x3a\x5e\x0b\x88\x04\x48\x85\x57\x0d\xa2\xf5\xb7\x94\x4a\x85\x4d\x28\xb7\x03\x29\xfe\x56\x1a\xad\x33\x3f\x45\x85\x3b\x13\x4b\x85\xf7\xc7\x1b\x9f\x09\x29\xef\x06\x74\xde\xb3\x6a\x05\xd7\xc0\x03\x9a\x9d\x1a\x0a\xbb\x0e\x22\xf7\x03\xe8\x92\x3b\xda\xaa\x92\x72\x8b\xb4\x55\x1e\x3d\x7d\x09\x14\x3b\xbb\x3d\xb6\x6c\x90\x84\x24\x59\xc1\xe6\x0f\x79\x9a\x15\xf0\xf5\xe2\xf4\x5b\x2e\xbe\x91\x69\xfe\x65\x32\x4e\x60\xd7\x8c\xcc\x72\xf6\xf9\x7d\xca\x80\x7a\xb7\xdc\x47\xff\x03\x00\x00\xff\xff\x4f\xe2\x8d\x91\xf4\x01\x00\x00")

func DockerTemplatesDockerfile_ubuntuTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_ubuntuTmpl,
		".docker/templates/dockerfile_ubuntu.tmpl",
	)
}

func DockerTemplatesDockerfile_ubuntuTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_ubuntuTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_ubuntu.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1576745927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xce\xc9\xcc\xe5\x4a\xcc\x29\xc8\xcc\x4b\xe5\xf2\x4d\xcc\x4e\x4d\xcb\xcc\x49\xe5\x4a\xc9\x4f\xce\x4e\x2d\xd2\x4d\xce\xcf\x2d\xc8\x2f\x4e\xd5\xab\xcc\xcd\x41\x17\xd2\x02\x0b\xea\xa5\x67\x96\x80\x09\x7d\x08\xa9\x05\xa5\xb4\xb8\x00\x01\x00\x00\xff\xff\x78\xa9\x74\xfb\x57\x00\x00\x00")

func DockerTemplatesDockerignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerignoreTmpl,
		".docker/templates/dockerignore.tmpl",
	)
}

func DockerTemplatesDockerignoreTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerignore.tmpl", size: 87, mode: os.FileMode(420), modTime: time.Unix(1576745854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesEnvTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\x83\x30\x18\x86\xef\xfe\x8a\xd0\xee\xaa\xd3\x42\x27\x1d\xe4\xf0\x69\x83\x64\xb5\x2a\x26\xba\xde\xc4\x39\xc7\x02\xd3\x43\x23\x74\x10\xf2\xdf\x87\x2e\x5a\xe9\xed\x7b\x9f\x97\xf7\xe1\xdb\x22\x7e\x13\xfd\x60\xf1\x77\x9a\xf0\xaa\x0c\x59\x55\xe4\x31\x56\x0a\x39\x65\x23\x8b\x3c\x46\x5a\x9b\x8e\x43\x34\xf1\xa3\xb8\x22\xad\x95\x12\x5f\xc8\x09\x6a\xd9\x6a\x6d\x2b\xd5\xf6\x9f\x23\xfb\x27\xf7\x4d\x49\x72\x46\xd3\x64\xb5\x33\x45\x02\x67\xc2\x32\x08\xc9\x54\xa5\xb7\xbe\x5d\x95\x01\x30\x82\x87\xd5\x5b\xf4\x0c\x11\xc1\x4f\xea\x61\xab\x9f\x67\x34\x2e\xf4\xeb\x9c\x38\x44\xb3\x2a\xa2\x47\x7c\xf0\x7d\x93\x0a\x93\xac\x2d\x22\x3f\xb5\x1c\x44\x23\xdb\xfa\xda\x7c\x5b\x24\x06\xc6\x69\xb8\xfc\xeb\x3b\xae\xe3\x2d\x34\x4b\x73\x8e\x0f\x3b\xd7\x5d\xc8\x1b\x94\x50\xa5\x19\x67\x78\x63\x5f\x3a\xb9\xf7\x76\x1d\xb2\x2f\xdd\xef\x78\x6c\x46\xfd\x49\x7c\xd4\x7d\x6d\x9d\x68\x00\x09\x3c\x68\x0d\x9c\xac\xfb\x17\xd7\xfb\x0b\x00\x00\xff\xff\xd4\x69\x13\x70\x83\x01\x00\x00")

func DockerTemplatesEnvTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesEnvTmpl,
		".docker/templates/env.tmpl",
	)
}

func DockerTemplatesEnvTmpl() (*asset, error) {
	bytes, err := DockerTemplatesEnvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/env.tmpl", size: 387, mode: os.FileMode(420), modTime: time.Unix(1576920292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xdf\x0f\xd2\x30\x10\x7e\xee\xfd\x15\x97\x6c\x66\xf8\xb0\x15\x66\x82\xd0\x48\x82\x89\x44\x79\xe0\x47\x94\x68\x7c\xd1\xd4\xad\xb0\x65\xdd\xba\xac\x1d\xa8\xc0\xff\x6e\xda\x4d\xc7\x03\xbe\x5c\x7b\xdf\x7d\xfd\xee\xbb\xde\x7a\xf3\xf6\xfd\x0a\xd9\x02\x7f\x8e\x9b\xdf\x85\x3a\x53\x73\xc9\x2b\x13\xa6\x2a\x29\x44\x03\x9f\x57\x1f\x3f\xad\x77\x5b\xb6\x40\x7f\xa4\x33\x21\x25\x9e\x1a\x51\xe3\xe1\xcb\x7a\x7b\xf8\xde\x17\xf1\x9d\xe3\x1e\x73\x29\xf0\x86\xfc\x52\x60\x70\xad\x9b\xbc\x32\xe8\xc7\xf7\x00\x6f\x98\xb4\x06\xc3\x14\x83\x45\x80\xe1\x11\xe3\x97\x00\x9e\x87\x46\x68\x43\x08\x23\xf6\x8c\xc0\x46\x06\xc4\x34\xad\x70\xd5\xb3\x68\x74\xae\x2a\xc2\x48\x9a\xeb\x5a\xf2\x5f\x7f\x91\x08\xfa\x0b\x03\xb2\x14\x49\xa6\xd0\x1f\xf5\x3e\x3a\xdd\xbc\xe4\x27\x61\x85\x7f\xb4\xb9\x4c\xbb\x14\x79\x95\xa2\xe1\x27\x34\x99\x28\x23\x88\xf6\x1f\x76\xdb\xaf\xac\xab\x81\x8b\x56\xad\x1b\x19\xbb\x77\xa1\x41\xff\xea\xfe\xe6\xce\xfc\x6b\xdf\xe1\x8e\xd1\xc0\xb3\x7a\xcf\x28\xff\x30\xc9\xed\x54\xce\x54\xdd\xea\x2c\xec\x9c\x31\x62\x13\xec\x45\x1c\x36\x38\x1a\x78\x30\x5c\x1f\xbc\xb9\xa7\x4f\x9a\xfe\x8f\xf1\x60\x21\x13\xb2\xb6\xdf\xb2\x77\x9b\x49\x54\x59\xf2\x2a\xd5\x0e\x1e\xfa\xdb\x0c\x6c\x40\x86\x1b\x5e\x08\xbb\x53\x20\x4b\x2d\x52\x0c\x2b\x0c\x34\xfd\xe6\x79\x94\xd6\x01\xfa\x6f\x00\x3c\xcc\x8c\xa9\x35\xa3\x54\x1b\x9e\x14\xea\x2c\x9a\xa3\x54\x97\x28\x51\x25\xe5\x74\x1a\xbf\x7e\x35\x1b\xcf\xe9\x64\x16\x4f\x27\xe3\x39\xbc\xb0\x63\x30\xf8\x13\x00\x00\xff\xff\xa4\xdc\xfd\x9f\x6f\x02\x00\x00")

func DockerTemplatesMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesMakefileTmpl,
		".docker/templates/makefile.tmpl",
	)
}

func DockerTemplatesMakefileTmpl() (*asset, error) {
	bytes, err := DockerTemplatesMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/makefile.tmpl", size: 623, mode: os.FileMode(420), modTime: time.Unix(1576745814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdd\x6e\x1b\xb7\x12\xbe\xdf\xa7\x98\x63\x05\x88\x04\x98\xb2\xfc\x07\xc8\xc6\xc9\x01\x72\xac\xa6\x0d\x1a\xa0\x69\xac\xa2\x17\x81\x81\x8c\x76\x67\xb5\xac\xb8\xe4\x96\xe4\x4a\x56\x0d\xf7\x4d\x8a\xde\xf4\x01\xfb\x08\xc5\x90\x2b\xad\xe4\xc4\x6d\x10\x6f\x7d\x21\x89\xc3\xe1\x7c\x1f\x3f\xce\xf0\xc7\x3d\xf0\x2b\xa9\xbd\xc8\x4c\xba\x20\x9b\x24\xff\xfd\x8f\x10\x30\x35\x57\xe0\x3c\x5a\x0f\x42\xfc\x2f\xe9\xf5\x60\x8a\x33\x45\x60\x72\xb8\x32\xda\x93\xf6\x2e\x39\x1e\xc2\xfb\x6f\xcc\x0a\xbc\x81\xda\xd1\x4d\xbf\x57\x98\x95\xf0\x46\xd4\x8e\x06\x09\x00\x00\x3b\xbc\x92\xd6\xf9\xa6\x3f\xe7\xdf\x6d\xf7\xc6\xe5\xca\x12\x7a\x02\xd4\x80\x4a\xa2\xbb\xe9\xf7\xd2\x60\x11\xa8\x45\xb0\x0c\x92\x93\x21\xbc\x9f\x04\x7a\xe2\xca\x94\x95\x09\xe1\x22\x5f\x91\x46\xc3\x7e\xcc\xaf\x14\x3a\x2f\x53\x47\x68\xd3\x02\x50\x67\xf0\xad\x9c\xa1\xc6\x9b\x7e\x8f\x76\xbb\x04\xea\x4c\x2c\x42\x57\x1b\x80\xd1\xa6\xc6\x42\x65\xcd\xed\xfa\xa6\xdf\xf3\xc6\x8a\xf0\xbb\x75\x39\x65\x8c\x5b\x4a\x6b\x4f\x30\x65\xf5\x20\x35\x65\x89\x3a\x63\x80\x68\x17\x51\xd5\xc6\xde\x0e\x3d\x0b\x43\xb1\xac\x14\x39\xd6\x73\x77\x60\xb4\x0a\x93\xef\x0f\xe3\x19\x4d\xd0\x07\x6d\x32\xfe\x1e\x24\x4c\xe0\x65\xed\x0b\x63\xd9\x88\xf1\xd7\x20\xe1\xe0\x7f\xfe\xfe\xc7\x6f\x61\x95\xac\x9c\xd5\x5e\xea\x39\x2b\xba\xd3\x1c\x24\xe7\x43\x78\x7f\x5d\x98\x15\xac\x4d\x6d\xc1\xd5\x55\x65\xac\xbf\xe9\xf7\x1c\xaf\x20\xdb\x44\x63\x1b\xb4\xc9\x40\x3a\x0b\xa9\xc0\xb9\xd0\xae\x3a\x37\x7b\xb0\x5d\xe4\x24\x79\x65\x2c\xe4\x4d\x13\xe7\x74\xc8\x10\xa0\x89\x32\x1e\x30\xab\xa5\xca\x40\x96\x38\x27\x88\xab\x37\x4c\x92\x0f\x1f\x3e\xb8\x82\x94\x4a\xa2\x05\xaa\x5a\x29\xb8\x1d\xd9\x5f\x16\x66\x79\x14\x34\xbc\xbc\xbb\x83\xe1\x44\x5a\xb8\xbf\x67\xef\x24\x31\x16\x3e\x1a\xb7\xc9\x83\x08\x12\xfd\x7a\x4c\xee\x41\x7a\xb5\xe3\x42\x33\xe6\xfe\x8b\x83\x06\xdc\xd6\x1a\x84\x97\x20\x84\x2d\x41\x2c\xe1\x59\xbf\x5a\x65\x83\x23\x16\xfd\xf2\xc8\x54\xfe\x08\xab\x2a\xb4\x1e\x65\x78\x77\x27\x73\x18\xfe\x1f\x1d\xdd\xdf\x8b\xbb\x3b\xd2\x19\xdb\xa2\x05\xee\xef\x0f\x18\x1f\xf6\xff\xa2\x88\x8f\xa5\x6c\x92\x5c\x87\x3a\x64\xc1\x2b\x20\x85\xfb\x4e\x8b\xc6\xe9\x31\x39\xea\x0a\x44\x06\x7b\x49\xbf\x19\xb3\xd1\x08\xb6\xc9\xbe\x8f\xe5\x8d\xfd\xa7\xb8\xec\xb2\x0d\xf3\xc9\x82\x78\x3c\x42\xd0\x7a\x09\xcf\xde\xfe\x38\x69\x54\x3c\x72\xb6\x11\x34\x2e\xcb\x6e\xe8\x8f\x0a\x26\x49\x5e\x42\x4e\x2b\x70\x92\x7b\x60\x53\x3c\xcc\xbd\x20\x55\x85\xc4\xab\x75\x46\xd6\x79\xd6\xc9\x17\x04\x33\x74\x32\x75\x97\x4f\xa1\xd4\x7c\x8a\x9a\xd3\xdd\x6a\x2c\x09\x04\x5c\xa7\x16\x2b\x02\x54\x2a\xc0\x4c\x57\x44\xde\x41\x6e\x4d\x19\xbc\x9e\x3b\xf0\xb2\x24\x25\x35\x0d\xbb\x41\x74\x50\x49\x4d\x58\xf1\xc4\xf7\xe0\x77\xa1\x99\xca\x03\x78\xe0\x7d\x00\xa5\x96\x7a\xde\x46\x78\x02\xa7\x7d\x1e\x57\x46\x29\x4a\x3d\xd0\x92\xec\x3a\x52\xf9\x24\x60\xa4\x17\xbc\x8c\xa6\xe7\xae\x61\xdd\x91\x36\x62\x4d\x68\xe1\x64\x74\x7c\xb6\x43\xa9\xd1\xc5\x17\xe8\x61\x45\x96\xc0\xb3\x81\x32\x98\x51\x6e\x2c\x05\xf7\xae\xf0\x9d\xd4\x69\x88\x78\x2e\x8e\x4f\xc4\xc9\xe8\x73\x68\x3c\x1c\xd3\x11\x17\x03\xb9\x54\x34\xf4\xb7\xbe\x4d\x93\x86\x03\xd7\x84\xc3\x25\x71\xbd\x6c\x9c\xba\x45\x4d\xdd\x12\x84\x08\x9f\x8f\x61\xa3\x03\x04\xf6\x08\x03\x3a\xd2\x9f\x4a\x94\x0a\x84\xa8\x0a\xa3\x43\x79\xf0\x49\xb7\xab\x7c\x29\xe7\x85\x87\x82\x09\x44\x1f\x5d\x97\x33\xb2\x0e\x8c\x85\x38\x18\xb3\xcc\x92\x73\xf4\x94\x9c\x74\x70\x30\x31\x1a\x55\x06\x53\x5b\x97\xd5\x01\x08\xb1\x24\x2b\x73\x49\x19\x08\x98\x48\x57\x29\x5c\x6f\x78\xcd\xd6\xb0\xed\xe4\xa9\x34\x4c\xa7\x4d\x7a\xe0\xcc\xd4\x1e\x76\xc3\x3d\x81\xd8\xfc\xc5\xc1\xd9\x78\x38\x1e\x8f\x46\x67\xe3\xc3\x93\xe1\xe9\xf8\xfc\xe2\xf4\xe2\xf0\x78\x51\x1e\x7c\xc6\xd2\x85\xd2\x45\xb0\x98\xc9\x3a\xec\xc6\xc7\x8b\x12\xd0\x9a\x5a\x67\x80\x50\x29\x4c\x09\xa4\x86\xb7\x68\x65\x5c\x67\xba\xe5\x8b\x04\x6f\x46\x25\x7c\x01\x65\xd3\x7d\x82\x90\x03\x65\x52\x54\x85\x71\xfe\xf2\xe2\x64\xc4\x05\xfa\x5d\xed\xab\xba\xad\x4f\xb3\x7f\x1a\x77\x5a\x16\x3f\x39\xa3\x41\x88\xf8\xf5\xb7\x85\x11\x5c\xba\xac\x0c\xbe\xb8\xcc\xf8\x1e\xe2\xe3\x86\x9b\xcd\x98\x01\xe3\xb5\x13\x47\xb8\xfe\xfe\x8d\xf4\x04\x1b\xe7\xae\xc0\x73\xa3\x94\x59\x71\x6a\xb7\x27\x16\x5f\x15\xbc\x27\xbb\x39\xa7\xb6\x3e\xdd\x82\xf2\xe9\xb3\x05\x5d\x15\xe6\x01\x70\x03\xdb\x1d\x28\x2e\x8d\x95\x9e\xdc\xce\xce\xff\xe0\x6e\x80\x11\xb8\x40\x07\x1b\xef\xec\x5f\x98\x33\x3f\xb6\xac\xc8\xf9\x46\xdd\x52\x09\xcd\x00\x2f\x75\x6e\x6c\x89\x5e\x1a\xcd\xc5\x4b\x36\x24\x5c\x14\xa3\x23\x32\x95\x35\x9c\xc1\x1b\x0e\x3f\x38\x5e\x75\xa7\xcc\xea\x10\x66\xb5\x07\xca\x73\x4a\xbd\x5c\x12\x94\xe4\x0b\x13\x5e\x09\x73\xf4\x05\xd9\x07\x1b\x4e\x93\x20\x4d\x38\xe8\x7f\x1d\x9c\x1c\xfc\x7a\xca\x05\x1c\x7d\x0f\xbf\x60\x83\x79\xad\x53\x55\x67\x2c\xd6\x3b\x8a\x55\x31\xe8\x6a\x1d\x6c\x13\x70\x3b\xed\x9f\x6b\x99\x2e\x3e\x9e\x28\xa7\x05\xef\x36\x70\xb1\x9d\x09\xf4\xc3\xf6\x2f\x03\x39\x72\xb0\x09\x35\xf8\xb4\x1c\xdd\x31\x76\x75\x49\x70\x3c\xba\x38\x1b\x9d\x8e\x2f\xce\xc7\xa7\xa3\xf3\x31\x08\x78\x17\xed\x08\xcd\xfb\x21\xfc\x63\x80\x35\xdb\xde\x33\x5d\x45\x69\x3c\xbd\xe2\xb5\xef\xf5\x64\xd8\x5e\xde\xc3\xd3\x35\x3e\x0d\xc3\xeb\x15\xe6\xa4\xc9\xf2\xa3\x6c\xb6\x8e\x3c\xe2\x33\x31\x45\xce\x3e\x3e\x49\x98\x88\xf2\x10\xb3\x31\x63\x8d\xc2\x73\x20\x79\x43\x9e\x67\xcd\x07\xa7\x36\x2b\xb8\x1c\xfc\x15\x00\x00\xff\xff\x61\xf7\x6e\x23\xbc\x10\x00\x00")

func DockerTemplatesReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadmeTmpl,
		".docker/templates/readme.tmpl",
	)
}

func DockerTemplatesReadmeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme.tmpl", size: 4284, mode: os.FileMode(420), modTime: time.Unix(1576921566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdd\x6e\x1b\xb7\x12\xbe\xdf\xa7\x98\x63\x05\x88\x04\x98\xb2\xfc\x07\xc8\xc6\xc9\x01\x72\xac\x93\xd3\xa0\x01\x9a\xc6\x2a\x7a\x11\x18\xc8\x68\x77\x56\xcb\x8a\x4b\x6e\x49\xae\x64\xd5\x70\xdf\xa4\xe8\x4d\x1f\xb0\x8f\x50\x0c\xb9\xd2\x4a\x4e\xdc\x06\xf1\xc6\x17\x92\x38\x1c\xce\x7c\xfc\xf8\x0d\x7f\xdc\x03\xbf\x92\xda\x8b\xcc\xa4\x0b\xb2\x49\xf2\xef\x7f\x09\x01\x53\x73\x05\xce\xa3\xf5\x20\xc4\x7f\x92\x5e\x0f\xa6\x38\x53\x04\x26\x87\x2b\xa3\x3d\x69\xef\x92\xe3\x21\xbc\xff\xc6\xac\xc0\x1b\xa8\x1d\xdd\xf4\x7b\x85\x59\x09\x6f\x44\xed\x68\x90\x00\x00\xb0\xc3\x2b\x69\x9d\x6f\xfa\x73\xfe\xdd\x76\x6f\x5c\xae\x2c\xa1\x27\x40\x0d\xa8\x24\xba\x9b\x7e\x2f\x0d\x16\x81\x5a\x04\xcb\x20\x39\x19\xc2\xfb\x49\x80\x27\xae\x4c\x59\x99\x10\x2e\xe2\x15\x69\x34\xec\xc7\xfc\x9f\x42\xe7\x65\xea\x08\x6d\x5a\x00\xea\x0c\xbe\x95\x33\xd4\x78\xd3\xef\xd1\x6e\x97\x40\x9d\x89\x45\xe8\x6a\x03\x70\xb6\xa9\xb1\x50\x59\x73\xbb\xbe\xe9\xf7\xbc\xb1\x22\xfc\x6e\x5d\x4e\x39\xc7\x2d\xa5\xb5\x27\x98\x32\x7b\x90\x9a\xb2\x44\x9d\x71\x82\x68\x17\x91\xd5\xc6\xde\x0e\x3d\x0b\x43\xb1\xac\x14\x39\xe6\x73\x77\x60\xb4\x0a\x93\xef\x0f\xe3\x19\x4d\xd0\x07\x6e\x32\xfe\x1e\x24\x0c\xe0\x65\xed\x0b\x63\xd9\x88\xf1\xd7\x20\xe1\xe0\x7f\xfe\xfe\xc7\x6f\x61\x95\xac\x9c\xd5\x5e\xea\x39\x33\xba\xd3\x1c\x24\xe7\x43\x78\x7f\x5d\x98\x15\xac\x4d\x6d\xc1\xd5\x55\x65\xac\xbf\xe9\xf7\x1c\xaf\x20\xdb\x44\x63\x1b\xb4\x62\x20\x9d\x05\x29\xb0\x16\xda\x55\xe7\x66\x0f\xb6\x8b\x9c\x24\xaf\x8c\x85\xbc\x69\xe2\x9c\x0e\x39\x05\x68\xa2\x8c\x07\xcc\x6a\xa9\x32\x90\x25\xce\x09\xe2\xea\x0d\x93\xe4\xc3\x87\x0f\xae\x20\xa5\x92\x68\x81\xaa\x56\x0a\x6e\x47\xf6\x97\x85\x59\x1e\x05\x0e\x2f\xef\xee\x60\x38\x91\x16\xee\xef\xd9\x3b\x49\x8c\x85\x8f\xc6\x6d\x74\x10\x93\x44\xbf\x1e\x83\x7b\x20\xaf\x76\x5c\x68\x46\xed\xbf\x38\x68\x92\xdb\x5a\x83\xf0\x12\x84\xb0\x25\x88\x25\x3c\xeb\x57\xab\x6c\x70\xc4\xa4\x5f\x1e\x99\xca\x1f\x61\x55\x85\xd6\xa3\x08\xef\xee\x64\x0e\xc3\xff\xa2\xa3\xfb\x7b\x71\x77\x47\x3a\x63\x5b\xb4\xc0\xfd\xfd\x01\xe7\x87\xfd\xbf\x48\xe2\x63\x92\x4d\x92\xeb\x50\x87\x4c\x78\x05\xa4\x70\xdf\x69\xd1\x38\x3d\x46\x47\x5d\x81\xc8\x60\x4f\xf4\x9b\x31\x1b\x8e\x60\x2b\xf6\xfd\x5c\xde\xd8\x7f\x8a\xcb\x2e\xdb\x30\x9f\x2c\x88\xc7\x23\x04\xae\x97\xf0\xec\xed\x8f\x93\x86\xc5\x7d\x86\x83\x6d\x37\xfa\x47\x35\x93\x24\x2f\x21\xa7\x15\x38\xc9\x3d\xb0\xa9\x1f\x86\x5f\x90\xaa\x82\xf6\x6a\x9d\x91\x75\x9e\xa9\xf2\x05\xc1\x0c\x9d\x4c\xdd\xe5\x13\x51\x35\x9f\xa2\x66\xd1\x5b\x8d\x25\x81\x80\xeb\xd4\x62\x45\x80\x4a\x85\x4c\xd3\x15\x91\x77\x90\x5b\x53\x06\xaf\xe7\x0e\xbc\x2c\x49\x49\x4d\xc3\xce\x92\x3a\xa8\xa4\x26\xac\x78\xfa\x7b\x08\x76\xb3\x33\x9a\x07\x08\x80\x37\x04\x94\x5a\xea\x79\x1b\xe1\x69\xb0\xf6\xa1\x5c\x19\xa5\x28\xf5\x40\x4b\xb2\xeb\x88\xe6\x93\x39\x23\xc2\xe0\x65\x34\x3d\x77\x0d\xf0\xee\x18\x12\x6b\x42\x0b\x27\xa3\xe3\xb3\x1d\x54\x0d\x3b\xbe\x40\x0f\x2b\xb2\x04\x9e\x0d\x94\xc1\x8c\x72\x63\x29\xb8\x77\x08\xc1\x49\x9d\x86\xa0\xe7\xe2\xf8\x44\x9c\x8c\x3e\x07\xc9\xc3\x31\xdd\xc1\x31\x90\x4b\x45\x43\x7f\xeb\x5b\xc9\x34\x30\xb8\x4a\x1c\x2e\x89\x2b\x68\xe3\xd4\x79\xe2\xd4\x2d\x41\x88\xf0\xf9\x58\x7a\x74\x80\xc0\x1e\x61\x40\x77\x0b\x41\x25\x4a\x05\x42\x54\x85\xd1\xa1\x60\xf8\x10\xdc\x5d\x82\x52\xce\x0b\x0f\x05\x63\x88\x3e\xba\x2e\x67\x64\x1d\x18\x0b\x71\x30\x66\x99\x25\xe7\xe8\x89\x12\x75\x70\x30\x31\x1a\x55\x06\x53\x5b\x97\xd5\x01\x08\xb1\x24\x2b\x73\x49\x19\x08\x98\x48\x57\x29\x5c\x6f\xa0\xcd\xd6\xb0\xed\xe4\xd9\x34\x60\xa7\x8d\x54\x70\x66\x6a\x0f\xbb\xe1\x9e\x86\x6d\xfe\xe2\xe0\x6c\x3c\x1c\x8f\x47\xa3\xb3\xf1\xe1\xc9\xf0\x74\x7c\x7e\x71\x7a\x71\x78\xbc\x28\x0f\x3e\x63\x0d\x43\x3d\x23\x58\xcc\x64\x1d\xf6\xea\xe3\x45\x09\x68\x4d\xad\x33\x40\xa8\x14\xa6\x04\x52\xc3\x5b\xb4\x32\x2e\x38\xdd\xf2\x4d\x83\x37\xa9\x12\xbe\x0c\xb5\xf9\x2a\x62\x21\x07\xca\xa4\xa8\x0a\xe3\xfc\xe5\xc5\xc9\x88\xab\xf6\xbb\xda\x57\x75\x5b\xb4\x66\xff\xd0\xee\xba\x50\x7e\x72\x46\x83\x10\xf1\xeb\x6f\x4b\x25\xb8\x74\x5c\x2b\xdc\x3d\xe3\x4b\x8b\x8f\x3b\x72\x36\x63\x10\x9c\xb2\x9d\x3e\xc2\xf5\xf7\x6f\xa4\x27\xd8\x38\x77\x98\x3f\x37\x4a\x99\x15\x8b\xbd\x3d\xd8\xf8\x6a\xe1\x3d\xd9\xcd\x71\xb6\xf5\xe9\x3c\x2f\x1f\x52\xdb\xbc\xab\xc2\x3c\xc8\xdd\x64\xee\x34\x2f\x2e\x8d\x95\x9e\xdc\xce\xe9\xf0\xe0\x2e\x81\x31\x77\x81\x0e\x36\xde\xd9\xd7\x99\x39\xbf\xd2\xac\xc8\xf9\x2a\xde\xa2\x09\xcd\x80\x40\xea\xdc\xd8\x12\xbd\x34\x9a\x8b\x9a\x6c\xd0\x5f\xa4\xa4\x3b\x3c\x95\x35\xac\xe9\x0d\x8c\x1f\x1c\x2b\xc0\x29\xb3\x3a\x84\x59\xed\x81\xf2\x9c\x52\x2f\x97\x04\x25\xf9\xc2\x84\x17\xc6\x1c\x7d\x41\xf6\xc1\x5e\xd4\x88\xa5\x09\x07\xfd\xff\x07\x27\x07\xbf\x9e\x72\x55\x47\xdf\xc3\x2f\xdb\x7b\x5e\xeb\x54\xd5\x19\x53\xf6\x8e\x62\x9d\x0c\x3a\x5c\x10\xdb\xc4\xdc\x4e\xfe\xe7\x5a\xa6\x8b\x8f\xa7\xcb\x12\xe1\x8d\x08\x2e\xb6\xf3\x81\x7e\x38\x22\x64\xc0\x47\x0e\x36\xa1\x06\x9f\x26\xa5\x53\xd0\xae\x2e\x09\x8e\x47\x17\x67\xa3\xd3\xf1\xc5\xf9\xf8\x74\x74\x3e\x06\x01\xef\xa2\x1d\xa1\x79\x84\x84\xff\x2e\x30\x73\xdb\x3b\xaa\xab\x28\x8d\x87\x5c\xbc\x2f\xbe\x9e\x0c\xdb\xeb\x7f\x78\xff\xc6\xf7\x65\x78\x02\xc3\x9c\x34\x59\x7e\xd9\xcd\xd6\x11\x47\x7c\x6b\xa6\xc8\x4a\xe4\xd3\x86\x81\x28\x0f\x51\x99\x19\xd3\x14\x1e\x14\xc9\x1b\xf2\x3c\x71\x3e\x5f\xb5\x59\xc1\xe5\xe0\xaf\x00\x00\x00\xff\xff\x6e\xef\xc2\x50\x01\x11\x00\x00")

func DockerTemplatesReadme_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_alpineTmpl,
		".docker/templates/readme_alpine.tmpl",
	)
}

func DockerTemplatesReadme_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_alpine.tmpl", size: 4353, mode: os.FileMode(420), modTime: time.Unix(1576921471, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesTravisTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcd\x6e\xdb\x3a\x10\x85\xf7\x7c\x8a\x81\x60\x20\x8b\x0b\x8a\x37\x5d\x74\x21\x20\x8b\xa0\x31\x8a\xa0\x4d\x5c\xd8\x68\xba\x29\x60\xd0\xd2\x58\x62\x43\x91\xca\x0c\xa9\x18\x51\xfd\xee\x45\x24\x25\x56\xf3\xd7\xec\x04\x9d\xef\x1c\x72\x86\x33\x7a\x1b\x90\xd6\x9c\x93\x69\x42\x26\x00\x24\x14\x3e\xbf\x46\x02\x53\xeb\x12\x59\x08\x8e\x85\xcf\x80\xf0\x26\x1a\xc2\x42\x88\x0d\x6e\x3d\xe1\xda\x38\x0e\xda\xda\xc1\x72\xcf\x00\xd5\x20\xb7\xa0\x22\x93\xb2\x3e\xd7\x56\x6d\x8c\x53\x43\x98\x64\x6b\xea\xf7\x93\x92\xd1\xb1\xa7\xde\x90\x47\xb2\x20\xbf\x42\x15\x42\xc3\x99\x52\xa5\x09\x55\xdc\xa4\xb9\xaf\xa7\x8e\xbf\xbe\x09\x2d\x6a\x46\x56\x85\xbf\x75\xd6\xeb\x42\x1d\xa7\x1f\x3e\xa6\xc7\xaa\x30\x1c\xd6\xd6\xb8\xb8\x4b\x83\xa6\xb4\xbc\x03\x29\x7d\x0c\x4d\x0c\x30\xf1\x8f\x5a\x7f\x7a\xd0\x04\xbb\x76\xfb\x9a\x9c\x57\xb5\x2f\xe0\xbf\x1d\x1c\x92\x9f\x55\xfc\x0f\x66\x5a\x6b\xdf\x9c\xba\x7d\x85\x7c\xd2\xb0\x77\x38\xc6\xec\x97\x8c\x98\x57\x1e\x8e\xba\x04\x77\x0d\x92\xa9\xd1\x05\x6d\x93\x2c\x50\xc4\xfd\x11\xfc\x1e\x72\x03\x22\x28\x0c\xf9\x18\xa9\x0a\x8d\xb5\x77\xe9\x2f\xf6\x93\xc3\x19\xa9\x35\x39\x3e\x4c\x0d\x21\x07\x4d\xe1\x71\x4c\xa6\x83\x95\x17\x23\xb5\x35\x16\x59\x25\xb3\xab\xf9\x72\x75\xbe\xb8\x4c\x7a\xf5\xfc\xe2\xf4\xf3\xfc\x24\xd9\xfd\x4f\x77\xd7\xbe\x55\xe1\xd6\xb8\x90\xcd\xba\x91\x51\x3f\x95\x92\xfb\x44\x08\x74\x6d\xd6\x75\xa4\x5d\x89\x30\x6b\xb5\x85\xec\x04\xd2\x2b\x24\x36\xde\xf1\x7e\xdf\x47\x8d\x9e\x93\xae\xeb\x91\xf4\xcc\x10\xbc\x29\x29\x6d\x1b\xe3\xf0\x2d\xe2\xbe\x9f\x5d\x87\xae\xd8\xef\x85\xb0\xda\x95\x51\x97\x98\xc1\x46\x73\x25\xc4\xf3\xf5\x19\x5e\xac\x1d\xee\x35\x5d\xab\x4d\x34\xb6\x00\x29\xf9\x26\x6a\xae\x40\x06\x48\x66\x7d\xe9\x09\xa4\x87\xae\x4e\x43\x06\xc7\x03\xf5\x94\x01\x8a\x0e\x64\x30\x87\x18\x59\xbd\xb0\xc6\x93\x3f\xd6\x97\xc6\x81\x8c\x30\x3b\x5b\x7c\xfa\x32\x5f\xae\xbf\xaf\xe6\xcb\xcb\xd3\x8b\x39\xc8\xe6\xf1\xdf\xb7\xd3\xd5\xea\xc7\x62\x79\x36\x35\x36\x91\xab\xc3\x3d\xc4\xf8\xf2\x9c\x8d\xfa\x9f\x00\x00\x00\xff\xff\x8c\x58\x8b\xbc\x4a\x04\x00\x00")

func DockerTemplatesTravisTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesTravisTmpl,
		".docker/templates/travis.tmpl",
	)
}

func DockerTemplatesTravisTmpl() (*asset, error) {
	bytes, err := DockerTemplatesTravisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/travis.tmpl", size: 1098, mode: os.FileMode(420), modTime: time.Unix(1576921076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".docker/templates/docker-compose.tmpl":         DockerTemplatesDockerComposeTmpl,
	".docker/templates/docker-entrypoint.tmpl":      DockerTemplatesDockerEntrypointTmpl,
	".docker/templates/docker-sync.tmpl":            DockerTemplatesDockerSyncTmpl,
	".docker/templates/dockerfile_alpine.tmpl":      DockerTemplatesDockerfile_alpineTmpl,
	".docker/templates/dockerfile_debian-slim.tmpl": DockerTemplatesDockerfile_debianSlimTmpl,
	".docker/templates/dockerfile_ubuntu.tmpl":      DockerTemplatesDockerfile_ubuntuTmpl,
	".docker/templates/dockerignore.tmpl":           DockerTemplatesDockerignoreTmpl,
	".docker/templates/env.tmpl":                    DockerTemplatesEnvTmpl,
	".docker/templates/makefile.tmpl":               DockerTemplatesMakefileTmpl,
	".docker/templates/readme.tmpl":                 DockerTemplatesReadmeTmpl,
	".docker/templates/readme_alpine.tmpl":          DockerTemplatesReadme_alpineTmpl,
	".docker/templates/travis.tmpl":                 DockerTemplatesTravisTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".docker": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"docker-compose.tmpl":         &bintree{DockerTemplatesDockerComposeTmpl, map[string]*bintree{}},
			"docker-entrypoint.tmpl":      &bintree{DockerTemplatesDockerEntrypointTmpl, map[string]*bintree{}},
			"docker-sync.tmpl":            &bintree{DockerTemplatesDockerSyncTmpl, map[string]*bintree{}},
			"dockerfile_alpine.tmpl":      &bintree{DockerTemplatesDockerfile_alpineTmpl, map[string]*bintree{}},
			"dockerfile_debian-slim.tmpl": &bintree{DockerTemplatesDockerfile_debianSlimTmpl, map[string]*bintree{}},
			"dockerfile_ubuntu.tmpl":      &bintree{DockerTemplatesDockerfile_ubuntuTmpl, map[string]*bintree{}},
			"dockerignore.tmpl":           &bintree{DockerTemplatesDockerignoreTmpl, map[string]*bintree{}},
			"env.tmpl":                    &bintree{DockerTemplatesEnvTmpl, map[string]*bintree{}},
			"makefile.tmpl":               &bintree{DockerTemplatesMakefileTmpl, map[string]*bintree{}},
			"readme.tmpl":                 &bintree{DockerTemplatesReadmeTmpl, map[string]*bintree{}},
			"readme_alpine.tmpl":          &bintree{DockerTemplatesReadme_alpineTmpl, map[string]*bintree{}},
			"travis.tmpl":                 &bintree{DockerTemplatesTravisTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
