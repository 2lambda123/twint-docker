// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// .docker/templates/docker-compose.tmpl
// .docker/templates/docker-entrypoint.tmpl
// .docker/templates/docker-sync.tmpl
// .docker/templates/dockerfile_alpine.tmpl
// .docker/templates/dockerfile_debian-slim.tmpl
// .docker/templates/dockerfile_ubuntu.tmpl
// .docker/templates/dockerignore.tmpl
// .docker/templates/env.tmpl
// .docker/templates/makefile.tmpl
// .docker/templates/readme.tmpl
// .docker/templates/readme_alpine.tmpl
// .docker/templates/readme_root.tmpl
// .docker/templates/travis.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DockerTemplatesDockerComposeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x10\x5d\x81\x9e\xfc\x11\x14\xc3\x3a\x01\x39\xa4\x4b\x0e\xdd\x86\x24\x68\x82\xee\x68\xa8\x36\xd3\x0a\x91\xa5\x80\x92\x9d\x74\x86\xff\xfb\x20\xcb\x76\x93\xae\xcd\x76\x51\x42\xf2\xf1\xe9\x3d\xd2\x0a\xc3\x30\xa8\x90\x8c\xd0\x8a\xc1\xd5\x75\xf4\xe5\x2a\x30\x48\x95\xc8\xd0\xb0\x20\x00\xb0\x7b\xa1\x2c\x0b\x00\x00\x44\xc1\x9f\x90\xc1\x21\xa1\xdf\x5b\x5d\xc5\xbe\x52\xd7\x10\x4d\x05\x41\xd3\xd4\xb5\xd8\x40\x74\xcb\x0d\x36\x4d\x58\xd7\xa8\x72\x97\xf3\x19\x68\x9a\x96\xe2\xb1\x14\x32\xf7\x6c\x00\x99\x56\x16\x0f\x96\x41\xd4\x25\x72\x9d\x6d\x91\x36\x42\x22\x83\xe9\xf0\x3f\xe8\xb1\x5c\x28\xa4\x54\xf1\x02\x99\x97\x15\x66\x52\xb4\xd5\x4a\xcb\xb2\x40\xcf\x1b\xc2\xe5\xf2\xd7\xb4\x53\x17\xeb\x9d\xf5\x7f\xe3\x9c\x5b\x3e\x18\x0a\x0d\x72\xca\x9e\x3f\xf6\xd5\x03\x24\xb7\x68\xec\x19\x09\x1e\xd7\x02\x76\x9a\xac\xe9\x45\x5c\x27\x49\xc2\xdc\xd1\xc6\xa8\x2a\x41\x5a\x15\xd8\xcf\x32\x84\xf9\x62\x3a\x4b\x67\xf3\x87\xf1\x8e\x74\x5e\x66\x56\x68\xd5\xca\xd3\x14\xee\x48\x54\xfa\xf0\xc2\xce\x5c\x6b\x35\x75\xa8\x63\x0b\x6e\x80\xfc\x09\xe3\x63\x92\x23\x07\x27\x02\x2f\xbe\x26\x9f\x13\xe6\x8e\x0b\xf8\x04\x6b\x4d\xb0\xa3\x9e\xce\x57\x47\xae\x3a\xea\xab\x4e\x07\x69\xd9\x92\xf4\xa0\x9b\xd1\xe8\x86\xb9\xc3\x81\x96\xfe\x42\x00\x67\x03\x25\x37\x56\x64\xef\x8c\xd9\x2f\x39\xea\x00\x51\xa6\xe3\x13\xec\x69\xc4\x2e\xeb\xd9\xcf\xc9\x6a\x7d\xf7\x2d\x7d\x98\xdd\xaf\xee\x16\xf3\xe6\xcc\x50\xba\xd6\x8f\x26\xae\x74\x8e\x91\xc3\x8f\x4f\xee\xe8\xaa\x99\x2c\x8d\x45\x8a\x84\x12\x56\x70\x99\x16\xdc\x85\xa9\x6b\x32\x67\x1b\x5a\x46\xef\x2a\xec\x72\x1d\xe2\x51\x6b\x6b\x2c\xf1\x5d\x54\x60\xa1\xe9\x25\x95\x3a\xdb\x8e\x2d\x95\xd8\x0f\x70\xb6\x4a\xbf\x4f\x1e\x26\xe9\x62\xb9\x5e\x8d\x5f\xbd\x0e\xb9\xe6\xa2\x45\x96\x52\x14\xa2\x5f\x1d\x40\x81\x85\x63\xea\x43\x00\xa3\x37\x96\x41\x38\x1a\x12\xcf\x9c\xf2\x21\xe1\x5f\xc7\xb0\x78\x34\xee\x29\x24\x23\x16\x97\x86\x62\xf3\xcc\x09\xdf\xac\xa0\x7d\x2a\x7f\x7d\x30\xaf\xf2\x96\x8b\xfb\x75\xc3\xde\xc4\x6e\xeb\x5b\xf1\xc8\x15\xff\xc7\xba\x3d\xa8\xfb\x61\x97\xf5\x8f\xbb\xdb\xc9\x7c\xf2\x3f\xfb\xf5\x2d\xef\x29\xeb\x38\x7a\x61\xc7\x61\x10\x1c\xf9\x1f\xbc\xb7\x9d\x39\x89\x0a\x89\x81\xd4\x19\x97\x41\xa0\xd0\xee\x35\x6d\x5b\x60\x8e\x1b\x5e\xca\xee\xd3\xc1\x83\x45\x52\x5c\xf6\x03\xf7\x9a\xd4\x3e\x6c\x65\xfd\x09\x00\x00\xff\xff\xe2\xa2\xa0\xbb\x42\x05\x00\x00")

func DockerTemplatesDockerComposeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerComposeTmpl,
		".docker/templates/docker-compose.tmpl",
	)
}

func DockerTemplatesDockerComposeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerComposeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-compose.tmpl", size: 1346, mode: os.FileMode(420), modTime: time.Unix(1576946164, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerEntrypointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\x2a\x29\xcf\xcc\x2b\x51\x50\x71\xe0\x02\x04\x00\x00\xff\xff\xbd\x2f\x25\x36\x15\x00\x00\x00")

func DockerTemplatesDockerEntrypointTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerEntrypointTmpl,
		".docker/templates/docker-entrypoint.tmpl",
	)
}

func DockerTemplatesDockerEntrypointTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerEntrypointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-entrypoint.tmpl", size: 21, mode: os.FileMode(420), modTime: time.Unix(1576934386, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerSyncTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x6a\xc3\x40\x0c\xc6\xf1\xfd\x9e\x42\x1c\x85\x9b\xdc\xba\x1d\x0f\xba\x94\x3e\x80\xb7\x8e\xe6\xea\x28\x97\x83\x20\x19\x49\xb6\x63\x42\xde\x3d\xc4\x86\x38\xe0\x4d\xfc\xfe\x82\x6f\x44\xd1\xc2\x14\xc1\x7f\x79\xc7\xbd\x15\x26\x8d\x0e\x60\x44\xf9\x67\xc5\x08\x26\x03\x3a\xa7\x33\x75\x8b\xdb\x54\xc8\x1e\x07\x80\x4a\x17\xe1\xed\xda\xfc\xfd\xde\x3e\x16\x5e\x75\xa6\xae\x55\x93\x64\x98\xe7\x08\x81\x92\x95\x11\x5b\xd6\x4b\xd8\xfa\xa0\x28\xe5\x10\xe1\xb3\xae\xeb\x4d\xb3\xf0\xd0\xef\x39\x49\xd6\x75\xb1\x02\x5f\xf5\x82\x47\x14\x20\x9c\x50\xfc\x53\x4b\x26\x16\xfc\x0e\x4d\xb2\x13\xbc\xe7\x62\x61\xdf\x7e\xf0\xcc\xd3\xcb\xc3\x3d\x00\x00\xff\xff\x84\x17\x8f\xff\xfb\x00\x00\x00")

func DockerTemplatesDockerSyncTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerSyncTmpl,
		".docker/templates/docker-sync.tmpl",
	)
}

func DockerTemplatesDockerSyncTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerSyncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-sync.tmpl", size: 251, mode: os.FileMode(420), modTime: time.Unix(1576945687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xd1\x4e\x1b\x3b\x10\x7d\xbe\xfe\x8a\x51\xb8\x82\x07\xae\x13\x50\xde\xb8\x97\xab\x46\x21\x6d\xa3\x96\x24\x5a\x42\x2a\x54\xaa\xca\xb1\x27\xd9\x29\xbb\xb6\x65\xcf\x2e\x89\x10\xff\x5e\xed\x6e\x02\x01\x05\xf1\xd0\xa7\xb5\x67\x8e\xec\x73\x8e\xe7\xec\xc7\x64\x7c\x09\x2a\xf3\x64\xf1\xac\xdb\x3e\x3d\x81\xde\x15\xcc\x0b\xca\x8c\x10\xdf\xc6\xc9\x97\x8b\x61\x02\x1d\xe7\xb9\xa3\xbc\x17\xe2\x00\x86\x36\xb2\xca\x32\x98\xac\x39\x75\x16\x94\x35\x80\x2b\xc6\x60\x55\x06\x06\x3d\x5a\x83\x56\x13\xc6\x7f\x80\xac\xce\x0a\x43\x76\x09\x29\x2a\x83\x21\xd6\xe0\x4f\xfd\xbe\x48\xae\x47\xa0\xfc\x1d\x28\x63\x40\x4a\xeb\xa4\x56\x3a\x45\xf0\xf5\x91\xdd\xed\x57\x1a\x2c\xc1\xaf\xbb\xd2\x93\x87\x8c\xe6\x8b\x05\x6d\x3e\x75\x27\x2f\x62\x56\x2f\x96\x5a\xc3\x92\x18\xb4\x92\x1a\x03\xd3\x82\xb4\x62\x8c\xe0\x3c\xda\x79\xa6\xe2\x2b\xf4\xf1\xf1\x0b\x19\xe4\xd1\x96\x35\x23\x4f\xbe\x0b\xb4\xa9\xfb\xa6\x2e\x0e\xa0\x1f\x50\x31\x82\x82\x92\x02\x17\x2a\x03\xb4\x25\x05\x67\x73\xb4\x5c\x2b\x52\x9a\xa9\xac\x20\xc4\xcd\x39\x1b\x19\x32\x87\x12\x6d\xd9\xb8\x57\xad\xc4\x60\x34\x83\x49\x6f\xfa\xf9\xbc\xf5\x54\xeb\xcc\xc9\x9e\xfd\x5d\x15\x5b\x70\x2b\xfe\x9a\x0d\x93\xe9\x75\xef\xeb\xcf\xc1\x68\xb6\x03\x6a\xed\x32\xde\x35\x19\xc8\xb2\x03\x4e\x71\x2f\xb9\x7b\xe2\x74\x57\x60\x6d\x52\xe6\x2c\x82\x94\x06\x3d\xa7\xe7\xa7\x20\xe7\xf0\xf0\xd0\x9e\x61\x88\xe4\xec\xe3\x23\xa4\xcc\x3e\x9e\x75\x3a\x4b\xe2\xb4\x98\xb7\xb5\xcb\x3b\x7c\x4f\x96\x7d\x70\xbf\x50\x73\xb3\x79\x1a\x88\x8a\xf2\xe1\x21\x68\xf3\xba\xf2\xc2\x4b\x29\x0b\xbf\x0c\xca\x60\x55\xde\x07\xd0\xcd\x2c\xed\xe9\xd8\x22\xf7\xeb\x7d\x8d\xb6\x10\xaf\x07\x57\x5c\xf6\x86\xa3\x69\x6f\x38\x1a\x24\xb0\x3a\x09\xab\x3b\x57\xc2\x7f\x9b\xc5\x07\x1f\x1c\x3b\x9b\x2b\xca\x2a\x4d\xff\xef\x3c\x6c\x28\x2c\x53\x8e\x50\x44\x0c\xb5\x4d\xf9\x9d\xa1\x00\xd2\xd7\x9a\x36\x77\x2b\x63\xaa\x3e\xc8\x0b\x68\x1c\x90\xe9\xb3\x64\x19\xa1\x7a\xc6\x4e\x4c\xe1\x56\x40\x05\x8f\xc5\x16\xa6\xe1\x68\xc7\x9d\x7f\x9f\x0f\x37\x8a\xd5\xd1\x7b\x81\xda\x72\x7b\xf1\xe6\xce\x66\xeb\xf7\x22\xb4\x89\xcb\x36\x02\xd5\x3e\xb2\xd1\xcd\xec\x5f\xdd\x13\xeb\x14\xd8\xd5\x9a\x41\x3b\xcb\xb8\x62\x71\x7d\x35\x48\x1a\xda\x7b\x83\xdf\x77\x7e\xfd\xe6\xa8\x2d\x82\xcb\xeb\xa6\x0f\x58\x92\x2b\x22\x50\xae\x96\x28\xfa\xe3\xc9\x0d\x48\x59\xb5\xcf\xeb\x9f\xca\x73\x1a\x76\x72\x21\x0e\xa0\xb7\x0d\xd1\x1b\x37\xfc\x49\x76\x06\xa3\x69\x72\x33\x19\x0f\x47\x53\xf8\xde\xaa\x05\xb6\x7e\xfc\x0e\x00\x00\xff\xff\x16\xea\xa4\x28\xf6\x04\x00\x00")

func DockerTemplatesDockerfile_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_alpineTmpl,
		".docker/templates/dockerfile_alpine.tmpl",
	)
}

func DockerTemplatesDockerfile_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_alpine.tmpl", size: 1270, mode: os.FileMode(420), modTime: time.Unix(1576830973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_debianSlimTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x51\xeb\xda\x30\x14\xc5\xdf\xf3\x29\x2e\x0e\x7c\x98\xa4\x19\xf8\x30\x90\x39\x94\xad\x1b\x65\xb3\x95\xac\x2a\x32\xc7\x88\x6d\x96\x66\xb6\x49\x48\x6e\x9d\x22\x7e\xf7\x61\xf5\xcf\x5f\x7d\xca\x39\xe7\x47\xe0\x9c\xfb\x85\x67\x33\x70\x47\xac\xac\x19\x0d\xa3\xf7\x34\xd4\xba\xa1\x01\xbd\xc4\xa2\x22\x64\x36\x4d\xd2\x7c\x9a\xa4\x31\x87\xc3\x3b\x7f\xd8\xd9\x3d\x7c\xb8\x89\x89\xf3\x16\xad\x69\x84\xae\xa3\xc2\x36\x1f\x09\x99\xf2\xaf\x90\xaf\x92\x34\xff\xbd\x8c\xf9\x8f\x24\x4b\xc7\xa7\x53\xb4\x94\x3e\x68\x6b\xce\x67\x42\x3e\x65\xf3\x35\x94\xb6\xd8\x49\x4f\xa5\x41\x7f\x74\x56\x1b\x8c\x42\x05\xec\xc1\x12\xbe\x48\xa1\xa8\x1a\x5b\xc2\xe0\xf0\xcc\x3a\xb8\x21\xc2\x21\x55\x12\xa1\x75\xa5\x40\x09\xfd\xfe\x5d\xa6\x4d\x40\x51\xd7\x40\x8f\xb0\x21\x4a\xe3\xcb\x1f\xa7\xdd\xf0\x15\xd2\xd6\x29\x2f\x4a\x09\x54\x82\xd2\x38\xa8\x10\x5d\x18\x31\xa6\x34\x56\xed\xf6\x32\x89\xe1\x3f\x6d\xd0\x79\xfb\x57\x16\x78\x35\x91\xd2\x38\xb9\x5f\xf5\x46\x2a\x35\xee\xd0\x73\xb3\xa2\x96\xc2\x80\x68\xd1\x5e\x55\x57\xd1\x37\x40\xfd\x1f\x60\x7b\xe1\x59\xad\xb7\x4c\x38\x64\xb5\x0e\x18\xd8\x5b\x60\xd8\xb8\xcb\x73\x61\x9d\x24\x24\x4e\x73\xbe\x9e\x67\x49\x9a\xc3\xcf\xde\xe3\x21\x7a\xbf\xc8\x32\xfb\xbe\x98\xc5\x70\x6d\x46\x56\x19\xff\xf6\x39\xe1\xc0\x82\xdf\xdf\xa2\xff\x01\x00\x00\xff\xff\x15\xde\x8c\x62\xdc\x01\x00\x00")

func DockerTemplatesDockerfile_debianSlimTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_debianSlimTmpl,
		".docker/templates/dockerfile_debian-slim.tmpl",
	)
}

func DockerTemplatesDockerfile_debianSlimTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_debianSlimTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_debian-slim.tmpl", size: 476, mode: os.FileMode(420), modTime: time.Unix(1576745957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_ubuntuTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xdf\x6e\xd3\x30\x18\xc5\xef\xfd\x14\x9f\x86\x34\x01\x53\x62\xa6\x5d\x31\x31\xb4\x0a\x02\x44\xd0\x64\xf2\xd2\x56\x15\x45\xc8\x49\x8c\x63\x48\x6c\xcb\xfe\x5c\x48\xab\x3e\x10\xcf\xc1\x8b\xa1\xa6\x9d\xfa\xe7\xca\xe7\x9c\x9f\x65\x9d\xe3\x0f\x2c\x1f\x43\x28\x83\xc6\x70\x7b\xfd\x3a\xbe\x7e\x45\xc8\x78\x94\x66\xc5\x28\xcd\x12\x06\x8f\xff\xfe\x96\xdc\xa3\x12\x1a\x3e\x99\xb0\x12\x08\xcf\x7b\x63\x56\xca\xc4\x95\xe9\x5e\xc0\x1b\x2f\xf6\xf8\xfe\x10\xbf\x25\x64\xc4\x3e\x42\x31\x4b\xb3\xe2\xfb\x34\x61\x8f\x69\x9e\xdd\xad\xd7\xf1\x54\x38\xaf\x8c\xde\x6c\x08\x79\x97\x3f\xcc\xa1\x36\xd5\x2f\xe1\x22\xa1\xd1\xf5\xd6\x28\x8d\xb1\x6f\x80\x9e\x58\xc2\x26\x19\x54\x4d\x67\x6a\xb8\xfa\x73\xce\x06\xb8\x20\xdc\x62\x24\x05\x42\xb0\x35\x47\x01\x97\x97\x47\x99\xd2\x1e\x79\xdb\x42\xd4\xc3\x82\x48\x85\xb0\x20\xb6\xc7\xc6\xe8\x9b\xc8\x2a\xfb\xf4\x82\x55\xf6\xe6\x70\x35\x0a\x56\x3a\x5e\x0b\x88\x04\x48\x85\x57\x0d\xa2\xf5\xb7\x94\x4a\x85\x4d\x28\xb7\x03\x29\xfe\x56\x1a\xad\x33\x3f\x45\x85\x3b\x13\x4b\x85\xf7\xc7\x1b\x9f\x09\x29\xef\x06\x74\xde\xb3\x6a\x05\xd7\xc0\x03\x9a\x9d\x1a\x0a\xbb\x0e\x22\xf7\x03\xe8\x92\x3b\xda\xaa\x92\x72\x8b\xb4\x55\x1e\x3d\x7d\x09\x14\x3b\xbb\x3d\xb6\x6c\x90\x84\x24\x59\xc1\xe6\x0f\x79\x9a\x15\xf0\xf5\xe2\xf4\x5b\x2e\xbe\x91\x69\xfe\x65\x32\x4e\x60\xd7\x8c\xcc\x72\xf6\xf9\x7d\xca\x80\x7a\xb7\xdc\x47\xff\x03\x00\x00\xff\xff\x4f\xe2\x8d\x91\xf4\x01\x00\x00")

func DockerTemplatesDockerfile_ubuntuTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_ubuntuTmpl,
		".docker/templates/dockerfile_ubuntu.tmpl",
	)
}

func DockerTemplatesDockerfile_ubuntuTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_ubuntuTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_ubuntu.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1576745927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xce\xc9\xcc\xe5\x4a\xcc\x29\xc8\xcc\x4b\xe5\xf2\x4d\xcc\x4e\x4d\xcb\xcc\x49\xe5\x4a\xc9\x4f\xce\x4e\x2d\xd2\x4d\xce\xcf\x2d\xc8\x2f\x4e\xd5\xab\xcc\xcd\x41\x17\xd2\x02\x0b\xea\xa5\x67\x96\x80\x09\x7d\x08\xa9\x05\xa5\xb4\xb8\x00\x01\x00\x00\xff\xff\x78\xa9\x74\xfb\x57\x00\x00\x00")

func DockerTemplatesDockerignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerignoreTmpl,
		".docker/templates/dockerignore.tmpl",
	)
}

func DockerTemplatesDockerignoreTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerignore.tmpl", size: 87, mode: os.FileMode(420), modTime: time.Unix(1576745854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesEnvTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\x83\x30\x18\x86\xef\xfe\x8a\xd0\xee\xaa\xd3\x42\x27\x1d\xe4\xf0\x69\x83\x64\xb5\x2a\x26\xba\xde\xc4\x39\xc7\x02\xd3\x43\x23\x74\x10\xf2\xdf\x87\x2e\x5a\xe9\xed\x7b\x9f\x97\xf7\xe1\xdb\x22\x7e\x13\xfd\x60\xf1\x77\x9a\xf0\xaa\x0c\x59\x55\xe4\x31\x56\x0a\x39\x65\x23\x8b\x3c\x46\x5a\x9b\x8e\x43\x34\xf1\xa3\xb8\x22\xad\x95\x12\x5f\xc8\x09\x6a\xd9\x6a\x6d\x2b\xd5\xf6\x9f\x23\xfb\x27\xf7\x4d\x49\x72\x46\xd3\x64\xb5\x33\x45\x02\x67\xc2\x32\x08\xc9\x54\xa5\xb7\xbe\x5d\x95\x01\x30\x82\x87\xd5\x5b\xf4\x0c\x11\xc1\x4f\xea\x61\xab\x9f\x67\x34\x2e\xf4\xeb\x9c\x38\x44\xb3\x2a\xa2\x47\x7c\xf0\x7d\x93\x0a\x93\xac\x2d\x22\x3f\xb5\x1c\x44\x23\xdb\xfa\xda\x7c\x5b\x24\x06\xc6\x69\xb8\xfc\xeb\x3b\xae\xe3\x2d\x34\x4b\x73\x8e\x0f\x3b\xd7\x5d\xc8\x1b\x94\x50\xa5\x19\x67\x78\x63\x5f\x3a\xb9\xf7\x76\x1d\xb2\x2f\xdd\xef\x78\x6c\x46\xfd\x49\x7c\xd4\x7d\x6d\x9d\x68\x00\x09\x3c\x68\x0d\x9c\xac\xfb\x17\xd7\xfb\x0b\x00\x00\xff\xff\xd4\x69\x13\x70\x83\x01\x00\x00")

func DockerTemplatesEnvTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesEnvTmpl,
		".docker/templates/env.tmpl",
	)
}

func DockerTemplatesEnvTmpl() (*asset, error) {
	bytes, err := DockerTemplatesEnvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/env.tmpl", size: 387, mode: os.FileMode(420), modTime: time.Unix(1576920292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xdf\x0f\xd2\x30\x10\x7e\xee\xfd\x15\x97\x6c\x66\xf8\xb0\x15\x66\x82\xd0\x48\x82\x89\x44\x79\xe0\x47\x94\x68\x7c\xd1\xd4\xad\xb0\x65\xdd\xba\xac\x1d\xa8\xc0\xff\x6e\xda\x4d\xc7\x03\xbe\x5c\x7b\xdf\x7d\xfd\xee\xbb\xde\x7a\xf3\xf6\xfd\x0a\xd9\x02\x7f\x8e\x9b\xdf\x85\x3a\x53\x73\xc9\x2b\x13\xa6\x2a\x29\x44\x03\x9f\x57\x1f\x3f\xad\x77\x5b\xb6\x40\x7f\xa4\x33\x21\x25\x9e\x1a\x51\xe3\xe1\xcb\x7a\x7b\xf8\xde\x17\xf1\x9d\xe3\x1e\x73\x29\xf0\x86\xfc\x52\x60\x70\xad\x9b\xbc\x32\xe8\xc7\xf7\x00\x6f\x98\xb4\x06\xc3\x14\x83\x45\x80\xe1\x11\xe3\x97\x00\x9e\x87\x46\x68\x43\x08\x23\xf6\x8c\xc0\x46\x06\xc4\x34\xad\x70\xd5\xb3\x68\x74\xae\x2a\xc2\x48\x9a\xeb\x5a\xf2\x5f\x7f\x91\x08\xfa\x0b\x03\xb2\x14\x49\xa6\xd0\x1f\xf5\x3e\x3a\xdd\xbc\xe4\x27\x61\x85\x7f\xb4\xb9\x4c\xbb\x14\x79\x95\xa2\xe1\x27\x34\x99\x28\x23\x88\xf6\x1f\x76\xdb\xaf\xac\xab\x81\x8b\x56\xad\x1b\x19\xbb\x77\xa1\x41\xff\xea\xfe\xe6\xce\xfc\x6b\xdf\xe1\x8e\xd1\xc0\xb3\x7a\xcf\x28\xff\x30\xc9\xed\x54\xce\x54\xdd\xea\x2c\xec\x9c\x31\x62\x13\xec\x45\x1c\x36\x38\x1a\x78\x30\x5c\x1f\xbc\xb9\xa7\x4f\x9a\xfe\x8f\xf1\x60\x21\x13\xb2\xb6\xdf\xb2\x77\x9b\x49\x54\x59\xf2\x2a\xd5\x0e\x1e\xfa\xdb\x0c\x6c\x40\x86\x1b\x5e\x08\xbb\x53\x20\x4b\x2d\x52\x0c\x2b\x0c\x34\xfd\xe6\x79\x94\xd6\x01\xfa\x6f\x00\x3c\xcc\x8c\xa9\x35\xa3\x54\x1b\x9e\x14\xea\x2c\x9a\xa3\x54\x97\x28\x51\x25\xe5\x74\x1a\xbf\x7e\x35\x1b\xcf\xe9\x64\x16\x4f\x27\xe3\x39\xbc\xb0\x63\x30\xf8\x13\x00\x00\xff\xff\xa4\xdc\xfd\x9f\x6f\x02\x00\x00")

func DockerTemplatesMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesMakefileTmpl,
		".docker/templates/makefile.tmpl",
	)
}

func DockerTemplatesMakefileTmpl() (*asset, error) {
	bytes, err := DockerTemplatesMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/makefile.tmpl", size: 623, mode: os.FileMode(420), modTime: time.Unix(1576745814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6e\x23\xb7\x15\xbe\x9f\xa7\x38\x6b\x05\x88\x64\x98\x1a\xf9\x0f\x90\x85\x24\x68\x62\x77\x5d\xa3\x41\x92\xae\x15\xf4\xc2\x30\x60\xce\xcc\x19\x0d\x23\x0e\x39\x4b\x72\x24\x7b\x0d\xf7\x15\xda\x3e\x40\xb1\x37\x7b\xdb\xfb\x3e\x4f\x5f\xa0\xfb\x08\xc5\x21\x47\xbf\xb6\x77\x37\x96\x7c\x61\x89\x87\x87\xe7\xfb\x78\xf8\xf1\x90\x54\x0b\xdc\x54\x28\xc7\x32\x9d\x8e\xd1\x44\xd1\x37\xaf\x18\x83\xa1\x3e\x05\xeb\xb8\x71\xc0\xd8\x77\x51\xab\x05\x43\x9e\x48\x04\x9d\xc3\xa9\x56\x0e\x95\xb3\xd1\x7e\x17\xae\xfe\xa4\xa7\xe0\x34\xd4\x16\xaf\xdb\xad\x42\x4f\x99\xd3\xac\xb6\xd8\x89\x00\xa8\xfb\xb5\x30\xd6\x35\xbd\x39\x7d\x9f\x75\x42\xe8\x3f\x35\xc8\x1d\x02\x57\xc0\xa5\xe0\xf6\xba\xdd\x4a\xbd\x85\x71\xc5\xbc\xa5\xe3\x51\xce\x3c\x33\x76\xaa\xcb\x4a\xfb\x58\x81\x2a\x4b\x83\x61\x29\xe0\x1f\x25\xb7\x4e\xa4\x16\xb9\x49\x0b\xe0\x2a\x83\x3f\x8b\x84\x2b\x7e\xdd\x6e\xe1\x72\x17\xe3\x2a\x63\x63\xdf\xb5\x34\x7a\xa8\x0d\x54\x46\xdf\xde\x5d\xb7\x5b\x4e\x1b\xe6\xbf\x2f\x47\xbf\xc5\xb4\x76\x08\x43\xca\x17\xa4\xba\x2c\xb9\xca\x28\x74\xb0\xb3\x90\xc7\xc6\xbe\x32\x8e\x97\x95\x44\x4b\xe9\x5b\x1e\x15\xac\x4c\xe7\xcb\x63\xfc\x84\xb9\xf3\xd9\xc8\xe8\x33\xe4\xe0\xfb\xda\x15\xda\x90\x91\x87\x6f\xc1\xfc\xf1\xfd\x87\x7f\xf9\x25\x31\x22\xa9\x9d\x50\xa3\xeb\x76\x8b\xa5\x4b\xed\xe0\x76\x59\xe8\x29\xdc\xe9\xda\x80\xad\xab\x4a\x1b\x77\xdd\x6e\x59\x5a\x2f\xb2\xb1\xc6\xd6\x59\x2c\x3d\xaa\xcc\x2f\x3c\xad\xfc\x62\x8d\xa9\xd9\x82\xf9\xa2\x46\xd1\x6b\x6d\x20\x6f\x9a\x7c\x84\x7b\x04\x01\x0a\x31\xa3\x01\x49\x2d\x64\x06\xa2\xe4\x23\x84\xb0\x60\xdd\x28\xba\xb9\xb9\xb1\x05\x4a\x19\x05\x0b\x54\xb5\x94\x70\xdb\x33\xef\xc6\x7a\x12\xfb\xfc\x0d\xee\xef\xa1\x7b\x26\x0c\x3c\x3c\x90\x77\x14\x69\x03\x8f\xc6\xcd\x96\x3e\x80\x04\xbf\x16\x91\x5b\x53\xd4\x62\x9c\x6f\x06\xa5\x7f\xbb\xd3\x80\x9b\x5a\x01\x73\x02\x18\x33\x25\xb0\x09\x7c\xd5\xae\xa6\x59\x27\xa6\xac\x0f\x62\x5d\xb9\x98\x57\x95\x6f\x3d\xcb\xf0\xfe\x5e\xe4\xd0\xfd\x81\x5b\x7c\x78\x60\xf7\xf7\xa8\x32\xb2\x05\x0b\x3c\x3c\xec\x10\x3e\xac\xfe\x85\x24\x3e\x27\xd4\x28\xba\xf4\xbb\x8e\x12\x5e\x01\x4a\xbe\xea\x34\x6e\x9c\x9e\x4b\x47\x5d\x01\xcb\x60\x45\xea\xb3\x31\xb3\x1c\xc1\x5c\xe5\xab\x58\x4e\x9b\xcf\xc5\x25\x97\x45\x18\xbf\x09\x2e\x03\x86\x50\x0e\x4d\xce\x53\x7c\xc4\x7f\x6d\x96\x61\x8b\x04\xc3\x67\xe1\x96\x7c\x57\x43\x05\x16\xc3\x02\x15\xe8\x0a\x15\x08\x15\xc4\x9d\x18\x3d\xb5\x68\xe0\xaa\x70\xae\x1a\xc4\xb1\xd4\x29\x97\x85\xb6\x6e\x70\xd8\xeb\xf5\xae\xdb\x4f\x9a\x3b\xcd\x8a\x3c\xb5\xb9\x9f\xa7\xe8\xb5\x33\x81\xaf\x7e\xf9\xeb\x59\xa3\x8a\xd8\x9a\x46\x20\x81\xf9\x22\x55\x4f\xec\xff\x28\xfa\x1e\x72\x9c\x82\x15\xd4\x03\xb3\x5a\x40\x79\x2b\x50\x56\x7e\x23\xd5\x2a\x43\x63\x9d\x4f\x5b\x81\x90\x70\x2b\x52\x3b\xd8\x84\x12\xb0\x9a\x36\xae\x51\xbc\x44\x60\x70\x99\x1a\x5e\x21\x70\x29\x3d\xc0\x70\x8a\xe8\x2c\xe4\x46\x97\xde\xeb\x6b\x0b\x4e\x94\x28\x85\xc2\xee\xa6\x58\x16\x2a\xa1\x90\x57\x34\xd9\x15\xe0\x65\x50\x22\xb1\x06\x0c\x54\xcb\xb8\x50\x42\x8d\x16\x11\x5e\xc4\x66\x95\xc1\xa9\x96\x12\x53\x07\x38\x41\x73\x17\x48\x3c\x09\x15\x88\x79\x2f\xad\xf0\x6b\xdb\xf0\xdd\x38\x1f\xec\x0e\xb9\x81\x83\xde\xfe\xd1\x12\x99\x26\x17\xae\xe0\x0e\xa6\x68\x10\x1c\x19\x30\x83\x04\x73\x6d\xd0\xbb\x6f\x8e\x6c\x85\x4a\x7d\xac\x63\xb6\x7f\xc0\x0e\x7a\x5f\x42\x60\x7d\xcc\xc6\x2c\x34\xe4\x42\x62\xd7\xdd\xba\x85\x1c\x1a\x74\xd2\xbb\xe5\x13\xa4\xbd\x30\x73\xda\x16\x5e\x6a\x27\xc0\x98\xff\xff\x1c\x2a\xb7\xc0\x81\x3c\xfc\x80\x8d\xb3\x8d\x25\x17\x12\x18\xab\x0a\xad\xbc\xf4\xe9\x24\x5e\xce\x73\x29\x46\x85\x83\x82\xa0\x83\x8f\xaa\xcb\x04\x8d\x05\x6d\x20\x0c\xe6\x59\x66\xd0\x5a\x7c\x99\xea\x2c\xec\x9c\x69\xc5\x65\x06\x43\x53\x97\xd5\x0e\x30\x36\x41\x23\x72\x81\x19\x30\x38\x13\xb6\x92\xfc\x6e\xc6\x28\xb9\x83\x79\x27\x4d\xa2\xe1\x38\x6c\x64\xc0\x13\x5d\x3b\x58\x0e\xf7\x22\x4a\xa3\x6f\x77\x8e\xfa\xdd\x7e\xbf\xd7\x3b\xea\xef\x1d\x74\x0f\xfb\xc7\x27\x87\x27\x7b\xfb\xe3\x72\xe7\x0b\x16\xca\x6f\x48\x0e\x86\x67\xa2\xf6\x15\x75\x7f\x5c\x02\x37\xba\x56\x19\x70\xa8\x24\x4f\x91\xce\x83\x5f\xb8\x11\x61\x55\xf1\x96\x2e\x37\x54\x5c\x4a\xf8\xfd\x64\x9d\xde\xa6\x1c\xd0\xc2\xe2\xf0\x39\x39\xe8\xd1\xe6\xfb\xb9\x76\x55\xbd\xd8\x7b\x7a\xf5\x6e\xb0\x25\xe1\xff\x66\xb5\x02\xc6\xc2\xc7\x27\xa5\xef\x5d\xb6\xa3\x7d\xba\x3a\x25\x74\x13\x72\xa1\x68\x66\x09\x61\x13\xd2\x62\xb2\x1c\x2e\xff\xf2\xa3\x70\x08\x33\xe7\xcd\x61\x73\x2d\xa5\x9e\x92\x78\x17\x27\x0d\x1d\xeb\xce\xa1\x99\x9d\x2f\x73\x9f\x6d\xc1\xd1\xa9\x31\x87\x9b\x16\x7a\x0d\xb2\x01\xdc\x06\x1c\x9f\x68\x23\x1c\xda\xa5\xba\xbd\x76\x82\xf3\x00\x59\x70\x0b\x33\xef\x6c\xab\xf3\xa4\x67\x9c\x61\x39\xdd\xdd\x17\x24\x7c\xd3\x03\x0b\x95\x6b\x53\x72\x27\xb4\xa2\x2d\x89\xc6\x4b\x2a\x24\x60\x63\x1a\x95\xd1\xa4\xce\x19\xfa\xaf\x96\x56\xd7\x4a\x3d\xdd\x83\xa4\x76\x80\x79\x8e\xa9\x13\x13\x84\x12\x5d\xa1\xfd\x4b\x64\xc4\x5d\x81\x66\xad\x80\x34\x42\x68\xc2\x41\xfb\xdc\x3b\x59\xf8\xdb\x21\x6d\xcb\xe0\xbb\xf7\x82\x82\x71\xa1\x52\x59\x67\x94\xa6\x37\x18\x74\xdf\xd9\x3c\xf7\xa6\x09\x35\x9f\xf0\xdb\x5a\xa4\xe3\xc7\x53\x24\x11\x50\xf5\x80\x93\xf9\x1c\xa0\xed\x4b\xb8\xf0\xb4\xd0\xc2\x2c\x54\xe7\xe9\x44\x6c\x83\xab\xad\x4b\x84\xfd\xde\xc9\x51\xef\xb0\x7f\x72\xdc\x3f\xec\x1d\xf7\x81\xc1\x9b\x60\xe7\xd0\xdc\xe8\xfd\xcf\x0b\x94\xa7\xf9\xdd\xcf\x56\x98\x86\xb3\x27\x5c\xc8\x2e\xce\xba\x8b\x4b\xb4\x7f\x13\x87\x27\xa7\x7f\x16\xc3\x08\x15\x1a\x7a\xec\x25\x77\x81\x47\x78\x7e\xa6\x9c\xb4\x46\xa7\x01\x11\x91\x0e\x82\xf6\x32\xca\x8e\xbf\x96\x47\x3f\xa2\xa3\xf9\xd2\xb1\xa7\xf4\x14\x06\xfe\x01\x00\xcd\x03\x3b\x8a\x3e\xbe\xff\xe7\x07\xd8\xdd\x6d\x9e\x7c\xbb\xbb\xd1\x2e\x9c\x0b\x57\xd4\xc9\x00\xae\xfe\xd0\x58\xc3\x53\xc2\x0e\xe2\x78\xe4\xbb\xba\xa9\x2e\xe3\xa6\xaf\x33\x0f\x61\x31\xa1\x4a\x8e\xaa\xd0\xf5\x3b\x74\x6b\xa1\xd6\x7a\x9f\x0c\xb9\xe6\x13\x98\x3e\x7a\xf3\x47\xd1\xa2\xa5\x95\xdd\x03\x61\x6d\x8d\xa1\xb0\xe7\xc8\x5d\x6d\x10\x0c\xbe\xad\xd1\x52\x71\x30\x08\x53\x94\xa9\x2e\xf1\xd5\x37\x89\x81\xf8\xbb\xd7\x88\x12\x72\x83\xfe\xc6\x95\x16\x98\x8e\xe1\xaa\x89\x50\xf1\x11\x7e\x6a\xae\xf1\xf2\x4f\x47\x71\x18\xd4\xe9\x46\x97\x88\x70\x75\xd3\x8d\x33\x9d\xda\xf8\xf4\xe7\x9f\x86\x6f\x2e\x7e\xf8\x75\x78\xf1\xd3\x79\xb7\xcc\x6e\xbe\x38\x9e\x8d\x13\xa9\x93\xb8\xe4\xd6\xa1\x79\x32\x56\x07\x72\x92\x03\x3a\x2e\xa4\xed\xfa\xe4\x3c\xfa\xa5\x23\x8a\xce\xa9\x1a\x70\xf8\xef\xbf\xff\xf1\xbf\xff\xfc\x1d\x44\x0e\xae\x10\x5e\xef\xbf\x51\xd9\xa2\xe7\x16\x66\x34\xe4\xd5\xff\x03\x00\x00\xff\xff\x0c\x16\xf9\xca\x0a\x13\x00\x00")

func DockerTemplatesReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadmeTmpl,
		".docker/templates/readme.tmpl",
	)
}

func DockerTemplatesReadmeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme.tmpl", size: 4874, mode: os.FileMode(420), modTime: time.Unix(1576946357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6e\x23\xb7\x15\xbe\x9f\xa7\x38\x6b\x05\x88\x64\x98\x1a\xc9\x5e\x03\xb2\x90\x04\x4d\xec\xae\x6b\x34\x48\xd2\xb5\x82\x5e\x18\x06\xcc\x99\x39\xa3\x61\xc4\x21\x27\x24\x47\xb2\x63\xb8\xaf\xd0\xf6\x01\x8a\xdc\xe4\xb6\xf7\x7d\x9e\xbe\x40\xf3\x08\xc5\x21\x47\xbf\x96\xb3\x0b\x67\xf6\x62\x2d\x1e\x1e\x9e\xef\xe3\xf9\x23\x39\x1d\x70\x0b\xa1\x1c\xcb\x74\x3a\x43\x03\x0c\xb8\xac\x84\xc2\x28\xfa\xec\x0d\x63\x30\xd1\xe7\x60\x1d\x37\x0e\x18\xfb\x22\xea\x74\x60\xc2\x13\x89\xa0\x73\x38\xd7\xca\xa1\x72\x36\x1a\xf6\xe1\xe6\x4f\x7a\x01\x4e\x43\x6d\xf1\xb6\xdb\x29\xf4\x82\x39\xcd\x6a\x8b\xbd\x08\x80\xa6\xdf\x09\x63\x5d\x33\x9b\xd3\xef\xe5\x24\x84\xf9\x73\x83\xdc\x21\x70\x05\x5c\x0a\x6e\x6f\xbb\x9d\xd4\x4b\x18\x57\xcc\x4b\x7a\x1e\xe5\xc2\x53\x64\xe7\xba\xac\xb4\xb7\x15\x38\xb3\x34\x08\x36\x0c\xfe\x51\x72\xeb\x44\x6a\x91\x9b\xb4\x00\xae\x32\xf8\xb3\x48\xb8\xe2\xb7\xdd\x0e\x6e\x4e\x31\xae\x32\x36\xf3\x53\x1b\xab\x27\xda\x40\x65\xf4\xfd\xc3\x6d\xb7\xe3\xb4\x61\xfe\xf7\xa6\xf5\x7b\x4c\x6b\x87\x30\x21\xc7\x41\xaa\xcb\x92\xab\x8c\x4c\x07\x39\x0b\x0e\x6d\xe4\x5b\xeb\x78\x59\x49\xb4\xe4\xbe\xcd\x55\x41\xca\x74\xbe\xb9\xc6\x6f\x98\x3b\xef\x8d\x8c\xfe\x06\x1f\x7c\x59\xbb\x42\x1b\x12\xf2\xf0\x2b\x88\x7f\xfd\xf9\x97\x7f\xf9\x90\x18\x91\xd4\x4e\xa8\xe9\x6d\xb7\xc3\xd2\x8d\x71\x50\xbb\x2e\xf4\x02\x1e\x74\x6d\xc0\xd6\x55\xa5\x8d\xbb\xed\x76\x2c\xc5\x8b\x64\xac\x91\xf5\xd6\xa1\x47\x95\xf9\xc0\x53\xe4\xd7\x31\xa6\x61\x07\x56\x41\x8d\xa2\x77\xda\x40\xde\x0c\xf9\x14\x8f\x08\x02\x14\x62\x46\x0b\x92\x5a\xc8\x0c\x44\xc9\xa7\x08\x21\x60\xfd\x28\xba\xbb\xbb\xb3\x05\x4a\x19\x35\x69\x57\xd5\x52\xc2\xfd\xc0\xfc\x34\xd3\xf3\xd8\xfb\x6f\xfc\xf8\x08\xfd\x0b\x61\xe0\xe9\x89\xb4\xa3\x48\x1b\x78\xb6\x6e\x19\xfa\x00\x12\xf4\x3a\x44\x6e\x27\xa3\xd6\xeb\xfc\x30\xa4\xfc\xe7\x07\x0d\xb8\xa9\x15\x30\x27\x80\x31\x53\x02\x9b\xc3\x27\xdd\x6a\x91\xf5\x62\xf2\xfa\x38\xd6\x95\x8b\x79\x55\xf9\xd1\x8b\x0c\x1f\x1f\x45\x0e\xfd\xaf\xb8\xc5\xa7\x27\xf6\xf8\x88\x2a\x23\x59\x90\xc0\xd3\xd3\x01\xe1\xc3\xf6\xbf\xe0\xc4\x97\x12\x35\x8a\xae\x7d\xd5\x91\xc3\x2b\x40\xc9\xb7\x95\x66\x8d\xd2\x4b\xee\xa8\x2b\x60\x19\x6c\xa5\xfa\x72\xcd\xd2\x47\xb0\xca\xf2\x6d\x2c\xa7\xcd\x87\xec\x92\xca\xda\x8c\x2f\x82\xeb\x80\x21\x94\x43\x93\xf3\x14\x9f\xf1\xdf\xd9\x65\x28\x91\x20\xf8\x20\xdc\x86\xee\xb6\xa9\xc0\x62\x52\xa0\x02\x5d\xa1\x02\xa1\x42\x72\x27\x46\x2f\x2c\x1a\xb8\x29\x9c\xab\xc6\x71\x2c\x75\xca\x65\xa1\xad\x1b\x9f\x0c\x06\x83\xdb\xee\x5e\x71\xaf\x89\xc8\xbe\xe2\x7e\x99\xa2\xcf\x9d\x39\x7c\xf2\xdd\x5f\x2f\x9a\xac\xd8\xce\x18\x2f\x5b\x7b\x6b\x4f\x0b\x88\xa2\x2f\x21\xc7\x05\x58\x41\x33\xb0\x6c\x07\xe4\xba\x02\x65\xe5\x6b\xa9\x56\x19\x1a\xeb\xbc\xe7\x0a\x84\x84\x5b\x91\xda\xf1\xef\x64\x05\xac\xa6\xf2\x35\x8a\x97\x08\x0c\xae\x53\xc3\x2b\x04\x2e\xa5\xc7\x98\x2c\x10\x9d\x85\xdc\xe8\xd2\x6b\x7d\x6a\xc1\x89\x12\xa5\x50\xd8\x6f\x01\xce\x02\x9d\x32\xbc\xa2\x2d\x6f\x61\x6f\xe2\x12\x8f\x1d\x6c\xa0\xa6\xc6\x85\x12\x6a\xba\xb6\xf0\x5a\x42\xdb\x24\xce\xb5\x94\x98\x3a\xc0\x39\x9a\x87\xc0\x63\x2f\x5a\xe0\xe6\xb5\xb4\xc2\x4f\x6d\x43\xb9\x0d\xaf\xb0\x07\xe4\x06\x8e\x07\xc3\xb7\x1b\x7c\x1a\x8f\xb8\x82\x3b\x58\xa0\x41\x70\x24\xc0\x0c\x12\xcc\xb5\x41\xaf\xde\x0a\xb8\x15\x2a\xf5\xe6\x4e\xd9\xf0\x98\x1d\x0f\x3e\x86\xc3\xee\x9a\x36\x88\x68\xc8\x85\xc4\xbe\xbb\x77\xeb\xd4\x68\x08\x50\x05\x58\x3e\x47\xaa\x8e\xa5\x52\x8b\x90\xa9\x9d\x03\x63\xfe\xff\x97\x80\xb9\x05\x0e\xa4\xe1\x17\xb4\xe1\x76\x2c\xb9\x90\xc0\x58\x55\x68\xe5\x8b\x81\x0e\xe9\x4d\x87\x97\x62\x5a\x38\x28\x08\x3d\xe8\xa8\xba\x4c\xd0\x58\xd0\x06\xc2\x62\x9e\x65\x06\xad\xc5\x57\x27\xa1\x85\x83\x0b\xad\xb8\xcc\x60\x62\xea\xb2\x3a\x00\xc6\xe6\x68\x44\x2e\x30\x03\x06\x17\xc2\x56\x92\x3f\x2c\x49\x25\x0f\xb0\x9a\xa4\x7d\x34\x34\x27\x4d\x4a\xf0\x44\xd7\x0e\x36\xcd\xbd\x96\xd5\xf4\xf3\x83\xb7\xa3\xfe\x68\x34\x18\xbc\x1d\x1d\x1d\xf7\x4f\x46\xa7\x67\x27\x67\x47\xc3\x59\x79\xf0\x11\x11\xf3\x55\xca\xc1\xf0\x4c\xd4\xbe\xdf\x0e\x67\x25\x70\xa3\x6b\x95\x01\x87\x4a\xf2\x14\xe9\xc0\xf8\x8e\x1b\x11\xc2\x8b\xf7\x74\xfb\xa1\xa6\x53\xc2\xab\xf8\x3a\xdd\x72\x6a\xa0\x85\xf5\x19\x75\x76\x3c\xa0\x8a\xfc\xb6\x76\x55\xbd\x2e\x48\xbd\x7d\x85\x68\xaf\x14\x7e\xb0\x5a\x01\x63\xe1\xcf\x6f\x16\x83\x57\x69\xad\x1a\x68\x22\xa1\x6b\x93\x0b\x5d\x35\x4b\x08\x9e\xc0\xd6\x5b\xe6\x70\xfd\x97\xaf\x85\x43\x58\x2a\xb7\x82\x9c\x6b\x29\xf5\x82\xd2\x79\x7d\x20\xd1\x35\xc0\x39\x34\xcb\x63\x68\xa5\xd3\x22\x22\x1d\x2e\x2b\xc4\x45\xa1\x77\x50\x1b\xcc\x96\x10\xf9\x5c\x1b\xe1\xd0\x6e\xf4\xf6\x9d\x13\x9f\x07\xd4\x82\x5b\x58\x6a\x67\x6d\xef\x96\xde\x7f\x86\xe5\x74\xe9\x5f\xf3\xf0\x43\x8f\x2d\x54\xae\x4d\xc9\x9d\xd0\x8a\x4a\x15\x8d\xcf\xb0\xe0\x86\x36\x98\x54\x46\x53\xbe\x2e\x09\x7c\x6f\x29\xd2\x56\xea\xc5\x11\x24\xb5\x03\xcc\x73\x4c\x9d\x98\x23\x94\xe8\x0a\xed\x5f\x31\x53\xee\x0a\x34\x3b\xbd\xa5\x49\x8a\xc6\x1c\x74\x2f\xbd\x92\x85\xbf\x9d\x50\xad\x06\xdd\xa3\xd7\xf5\x92\x2b\x95\xca\x3a\x23\x67\xbd\xc7\x50\x09\xbd\x56\x82\x60\x1a\x6b\xab\x6d\xff\x58\x8b\x74\xf6\x7c\xa3\x94\x10\xd4\x58\xe0\x6c\xb5\x13\xe8\xfa\x36\x2f\x3c\x33\xb4\xb0\x34\xd5\xdb\xef\x8e\x96\xe8\xda\xba\x44\x18\x0e\xce\xde\x0e\x4e\x46\x67\xa7\xa3\x93\xc1\xe9\x08\x18\xbc\x0f\x72\x0e\xcd\xb3\xc0\x7f\xa3\x20\x6f\xad\xee\x8d\xb6\xc2\x34\x1c\x51\xe1\x26\x77\x75\xd1\x5f\x5f\xc3\xfd\xc3\x3a\xbc\x5b\xfd\xdb\x1a\xa6\xa8\xd0\xd0\x8b\x31\x79\x08\x3c\xc2\x1b\x36\xe5\x94\x77\x74\x62\x10\x11\xe9\x20\xe4\x61\x46\x0e\xf2\x17\xfb\xe8\x6b\x74\xb4\x65\x3a\x1d\x95\x5e\xc0\xd8\xbf\x22\xa0\x79\xa5\x47\xd1\xaf\x3f\xff\xf3\x17\x38\x3c\x6c\xde\x8d\x87\x87\xd1\x21\x5c\x0a\x57\xd4\xc9\x18\x6e\xfe\xd0\x48\xc3\x7b\xc4\x8e\xe3\x78\xea\xa7\xfa\xa9\x2e\xe3\x66\xae\xb7\x32\x61\x31\xa1\x3e\x8f\xaa\xd0\xf5\x4f\xe8\x76\x4c\xed\xcc\xee\x35\xb9\xa3\xb3\x36\x5d\x09\x94\xa9\x1e\x0e\x77\x6c\x2e\xc5\x7b\x8d\x2d\x27\xc3\x7e\x9f\x7d\x7e\x88\xa2\xf5\x48\x2b\x7b\x04\xc2\xda\x1a\xc3\xc9\x91\x23\x77\xb5\x41\x30\xf8\x63\x8d\x96\x3a\x8e\x41\x58\x90\xb9\x12\xdf\x7c\x96\x18\x88\xbf\x78\x87\x28\x21\x37\xe8\xef\x79\x69\x81\xe9\x0c\x6e\x1a\x0b\x15\x9f\xe2\x6f\x79\x2c\xde\xfc\x9c\x15\x87\x45\xbd\x7e\x74\x8d\x08\x37\x77\xfd\x38\xd3\xa9\x8d\xcf\xbf\xfd\x66\xf2\xfe\xea\xab\xef\x27\x57\xdf\x5c\xf6\xcb\xec\xee\xa3\xed\xd9\x38\x91\x3a\x89\x4b\x6e\x1d\x9a\xbd\xb6\x7a\x90\x53\x52\xa1\xe3\x42\xda\xbe\x77\xce\xb3\x8f\x2e\x51\x74\x49\xcd\x85\xc3\x7f\xff\xfd\x8f\xff\xfd\xe7\xef\x20\x72\x70\x85\xf0\x85\xf3\x03\x35\x42\x7a\xf6\x61\x46\x4b\xde\xfc\x3f\x00\x00\xff\xff\xad\x51\x32\x88\x9e\x13\x00\x00")

func DockerTemplatesReadme_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_alpineTmpl,
		".docker/templates/readme_alpine.tmpl",
	)
}

func DockerTemplatesReadme_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_alpine.tmpl", size: 5022, mode: os.FileMode(420), modTime: time.Unix(1576946393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_rootTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x97\xcf\x6e\xe3\x36\x10\xc6\xef\x7c\x8a\x89\x03\x2c\x6a\x23\x16\x9b\xeb\xc2\x4e\x9a\x6e\xfe\x34\x87\x26\x40\x9c\x6d\x0f\x46\x80\x50\xd4\x58\x62\x43\x93\x2a\x39\xb2\x9b\x5d\xec\x33\xb4\x7d\x80\x62\x2f\x7b\xed\xbd\xcf\xd3\x17\xe8\x3e\x42\x41\x49\xde\x78\x5d\x67\x23\x05\xae\x6f\xb6\x38\xdf\xf0\xf7\x8d\x38\x24\xb5\x0b\x34\x57\x86\xfa\x89\x95\x77\xe8\x20\x16\x1e\x13\xb0\x06\x8e\x74\xae\x0c\xee\xc1\xeb\xb8\x30\x54\x80\x30\x09\x1c\x63\xac\x84\x81\x91\x56\x53\xc6\x06\x39\x08\xad\x52\x33\xec\x48\x34\x84\xae\x73\xc0\x00\x00\x06\x02\x32\x87\x93\x61\x27\x23\xca\xfd\x4b\xce\xc9\x89\x99\xf2\x7d\xa9\x22\x69\xa7\xfc\x97\xaf\xdd\x9b\x3b\x3b\xe3\xcb\x73\x76\x0e\x06\x6a\x9a\x82\x77\xf2\x41\xa5\xa6\x69\xe4\x33\x85\x3a\xf1\x91\xb2\x75\x92\xb5\xea\xc8\xcf\xd2\x0e\xf0\x83\x01\x17\x8f\x10\x48\x6d\x8b\x24\x4a\x9c\x35\x18\x72\x35\x45\x58\x91\x89\x5c\xf1\x58\x24\x29\xae\xc7\xe0\x9e\x04\x15\x3e\xd0\x1c\x86\xd9\x1d\x4e\x3c\xcf\x50\x24\x9e\x8b\xb2\x92\x9f\x18\x07\x3c\x3f\x68\x5e\xbe\x54\x51\x56\xc4\x8f\xd7\x0e\x84\xa6\x61\xa7\x8a\x02\xa1\x35\x38\xd4\x28\x3c\xfa\x06\x55\xad\x54\x3c\xb1\x73\xa3\x6d\x20\x5d\x6b\x8c\x2c\x09\xfd\x74\x95\x5b\x81\x6a\x41\xe8\x69\xc1\xba\x31\xd4\x2a\xed\xff\x42\x4c\x22\x6d\x8e\x49\x22\x7d\xe6\x5a\x6d\xc5\xd4\xba\x7c\xb5\x60\x1b\x6c\xb9\xc3\xcd\xf2\x71\xa1\x37\xfd\x4e\x27\xd6\xdd\x35\x87\x0b\xd1\x8f\x6f\x41\x87\x9e\xee\x35\x0e\xbd\x95\x4a\xe8\x17\x5a\xc4\xa8\x87\xa7\x21\xff\xe6\x70\x3d\x09\xd7\xa2\xad\xcb\xf0\x56\xbc\x23\x12\x6e\x83\xbc\x73\x41\x32\xc3\x36\xc8\x0b\x45\x2b\xea\x1f\x83\x68\x83\xd8\x36\x47\x03\xca\xfb\xa2\xcd\x1e\x5a\xc5\x6f\xa3\xb1\xa4\xb6\xe1\x84\x7e\x1e\x60\xbf\x52\x6f\x83\xb3\x2c\x63\xde\xe4\x70\xff\x9c\x30\x77\x5b\xac\xe2\xb3\xf8\xb6\x58\x44\x69\x0d\x39\x15\x17\x64\xdb\xb4\xd1\xb2\x6a\x1b\x94\x5a\x49\x34\x6d\xf6\xf9\x5a\xf0\x7c\x36\x42\x17\xa9\xa7\xd0\x08\x1d\xc8\x4c\x10\x38\x6b\xa7\xeb\xe0\xaa\xeb\x5c\xf4\xe5\x7c\x4f\xf3\x34\xb8\xe1\x56\x4c\x55\x20\x94\xd3\x6e\xf0\xd2\x5b\x5d\x28\x77\x77\xe1\x3b\x3b\x07\xb2\x50\x78\x64\xec\xd4\x3a\x98\x28\xe7\x09\x0a\x2f\x52\xdc\x83\x7b\x5b\x80\x41\x4c\x42\x44\x5c\x28\x9d\x80\x9a\x8a\x14\xa1\x4e\xc8\xd8\xed\xed\xad\xcf\x50\x6b\x96\x2a\x0a\xfd\x61\x10\xfa\xfd\x04\x73\xca\x86\xfb\xd0\x70\x5d\x30\x99\x40\xc4\xab\xdf\x13\xa5\xd1\xf3\xf1\xf8\x87\x93\xab\xd1\xf9\xe5\xc5\xcd\x0d\x1f\x8f\x2f\x47\x37\x37\xac\x1a\xee\x4b\x3b\xcd\xad\x47\x28\x72\xe8\x27\x61\x76\xc6\xae\x33\x34\x20\x33\x94\x77\x40\x19\xc2\xd5\xc9\xd1\xf1\xf7\x27\xd1\x34\x09\x27\x35\xa0\x90\x19\xcc\xd0\x79\x65\x8d\x8f\x82\xe1\x5d\x38\x9a\x09\xa5\x45\xac\xb1\x32\xe3\xd9\xdb\xb7\x10\x1d\x97\xf9\xcf\xcb\x07\xd7\x61\xf0\xdd\xbb\xb2\x3c\x47\x05\x65\xd6\x79\xc6\x3e\xbe\xff\xfd\x03\xf4\x7a\xb9\x42\x2d\xed\xfe\x7e\xaf\xc7\x7a\x70\x56\x1a\x7b\x09\xe3\x6f\x16\x8f\x6f\xbe\x5a\x63\x7a\x31\xd8\x65\x3d\xb8\x9e\x97\x0b\x27\x68\x8c\x35\x98\x3b\x35\x13\xf2\xfe\x41\x46\xd5\x78\xa9\x5b\x0a\xe8\xc2\xce\xb8\x96\xc2\xa9\xd5\xda\xce\x1f\x24\xab\x2b\xa0\x0a\xe3\x93\x32\x6c\x39\xc9\xe1\xe2\x86\x11\x06\x5e\x2c\x9f\x8a\xdd\x4f\xfe\xea\x17\xb4\x62\xaf\x7e\xba\xd6\x5d\x3d\xb6\x62\xee\x3f\x8a\x65\x63\x0b\xc9\xb3\x4d\xd5\x09\x9a\x18\xf2\x18\x0b\x4f\x0a\x4d\x66\x8b\x37\x48\x2b\xc6\x56\x46\xd7\x1a\x5c\x89\xe9\xb2\x72\x61\x7c\x7c\xff\xe1\x0f\x78\xb5\xd8\x34\x95\x49\x19\x7b\xf8\x67\x8d\xdf\xab\x4f\xdb\xf2\x23\x78\x82\x82\x8a\xf2\x72\xfb\x73\x81\x9e\x3c\x08\x87\x30\x0f\xab\x62\x8a\x3b\x83\xd8\x01\x3f\x38\x45\xd4\x30\x71\x88\xa1\xd7\xaa\xe5\x3c\xae\x33\xe4\x22\xc5\x2f\x95\xfe\xf3\x2b\x6f\x25\xea\x46\x6c\x84\x08\xe3\xdb\xb2\xb3\x3c\x7f\x75\x79\x71\x7d\x75\xfe\xed\xeb\xeb\xf3\x8b\xb3\x68\x9a\xdc\x36\xce\xe7\x39\x39\xc4\xfa\x7b\x74\x6d\xae\x6e\xd9\x69\x09\x92\x50\xba\xea\x31\x18\x65\x76\x1e\x36\x0f\x07\xbe\xc8\x73\xeb\x88\xb1\x33\x35\x43\x10\xf0\xf7\x9f\xbf\xfd\xf3\xd7\xaf\xa0\x26\x40\x99\xf2\x90\x3b\xfb\x13\x4a\x82\x0c\x75\x8e\x49\x90\xec\x30\xf6\x6f\x00\x00\x00\xff\xff\x26\x25\x3a\x78\x5e\x10\x00\x00")

func DockerTemplatesReadme_rootTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_rootTmpl,
		".docker/templates/readme_root.tmpl",
	)
}

func DockerTemplatesReadme_rootTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_rootTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_root.tmpl", size: 4190, mode: os.FileMode(420), modTime: time.Unix(1576936306, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesTravisTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcd\x6e\xdb\x3a\x10\x85\xf7\x7c\x8a\x81\x60\x20\x8b\x0b\x8a\x37\x5d\x74\x21\x20\x8b\xa0\x31\x8a\xa0\x4d\x5c\xd8\x68\xba\x29\x60\xd0\xd2\x58\x62\x43\x91\xca\x0c\xa9\x18\x51\xfd\xee\x45\x24\x25\x56\xf3\xd7\xec\x04\x9d\xef\x1c\x72\x86\x33\x7a\x1b\x90\xd6\x9c\x93\x69\x42\x26\x00\x24\x14\x3e\xbf\x46\x02\x53\xeb\x12\x59\x08\x8e\x85\xcf\x80\xf0\x26\x1a\xc2\x42\x88\x0d\x6e\x3d\xe1\xda\x38\x0e\xda\xda\xc1\x72\xcf\x00\xd5\x20\xb7\xa0\x22\x93\xb2\x3e\xd7\x56\x6d\x8c\x53\x43\x98\x64\x6b\xea\xf7\x93\x92\xd1\xb1\xa7\xde\x90\x47\xb2\x20\xbf\x42\x15\x42\xc3\x99\x52\xa5\x09\x55\xdc\xa4\xb9\xaf\xa7\x8e\xbf\xbe\x09\x2d\x6a\x46\x56\x85\xbf\x75\xd6\xeb\x42\x1d\xa7\x1f\x3e\xa6\xc7\xaa\x30\x1c\xd6\xd6\xb8\xb8\x4b\x83\xa6\xb4\xbc\x03\x29\x7d\x0c\x4d\x0c\x30\xf1\x8f\x5a\x7f\x7a\xd0\x04\xbb\x76\xfb\x9a\x9c\x57\xb5\x2f\xe0\xbf\x1d\x1c\x92\x9f\x55\xfc\x0f\x66\x5a\x6b\xdf\x9c\xba\x7d\x85\x7c\xd2\xb0\x77\x38\xc6\xec\x97\x8c\x98\x57\x1e\x8e\xba\x04\x77\x0d\x92\xa9\xd1\x05\x6d\x93\x2c\x50\xc4\xfd\x11\xfc\x1e\x72\x03\x22\x28\x0c\xf9\x18\xa9\x0a\x8d\xb5\x77\xe9\x2f\xf6\x93\xc3\x19\xa9\x35\x39\x3e\x4c\x0d\x21\x07\x4d\xe1\x71\x4c\xa6\x83\x95\x17\x23\xb5\x35\x16\x59\x25\xb3\xab\xf9\x72\x75\xbe\xb8\x4c\x7a\xf5\xfc\xe2\xf4\xf3\xfc\x24\xd9\xfd\x4f\x77\xd7\xbe\x55\xe1\xd6\xb8\x90\xcd\xba\x91\x51\x3f\x95\x92\xfb\x44\x08\x74\x6d\xd6\x75\xa4\x5d\x89\x30\x6b\xb5\x85\xec\x04\xd2\x2b\x24\x36\xde\xf1\x7e\xdf\x47\x8d\x9e\x93\xae\xeb\x91\xf4\xcc\x10\xbc\x29\x29\x6d\x1b\xe3\xf0\x2d\xe2\xbe\x9f\x5d\x87\xae\xd8\xef\x85\xb0\xda\x95\x51\x97\x98\xc1\x46\x73\x25\xc4\xf3\xf5\x19\x5e\xac\x1d\xee\x35\x5d\xab\x4d\x34\xb6\x00\x29\xf9\x26\x6a\xae\x40\x06\x48\x66\x7d\xe9\x09\xa4\x87\xae\x4e\x43\x06\xc7\x03\xf5\x94\x01\x8a\x0e\x64\x30\x87\x18\x59\xbd\xb0\xc6\x93\x3f\xd6\x97\xc6\x81\x8c\x30\x3b\x5b\x7c\xfa\x32\x5f\xae\xbf\xaf\xe6\xcb\xcb\xd3\x8b\x39\xc8\xe6\xf1\xdf\xb7\xd3\xd5\xea\xc7\x62\x79\x36\x35\x36\x91\xab\xc3\x3d\xc4\xf8\xf2\x9c\x8d\xfa\x9f\x00\x00\x00\xff\xff\x8c\x58\x8b\xbc\x4a\x04\x00\x00")

func DockerTemplatesTravisTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesTravisTmpl,
		".docker/templates/travis.tmpl",
	)
}

func DockerTemplatesTravisTmpl() (*asset, error) {
	bytes, err := DockerTemplatesTravisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/travis.tmpl", size: 1098, mode: os.FileMode(420), modTime: time.Unix(1576921076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".docker/templates/docker-compose.tmpl":         DockerTemplatesDockerComposeTmpl,
	".docker/templates/docker-entrypoint.tmpl":      DockerTemplatesDockerEntrypointTmpl,
	".docker/templates/docker-sync.tmpl":            DockerTemplatesDockerSyncTmpl,
	".docker/templates/dockerfile_alpine.tmpl":      DockerTemplatesDockerfile_alpineTmpl,
	".docker/templates/dockerfile_debian-slim.tmpl": DockerTemplatesDockerfile_debianSlimTmpl,
	".docker/templates/dockerfile_ubuntu.tmpl":      DockerTemplatesDockerfile_ubuntuTmpl,
	".docker/templates/dockerignore.tmpl":           DockerTemplatesDockerignoreTmpl,
	".docker/templates/env.tmpl":                    DockerTemplatesEnvTmpl,
	".docker/templates/makefile.tmpl":               DockerTemplatesMakefileTmpl,
	".docker/templates/readme.tmpl":                 DockerTemplatesReadmeTmpl,
	".docker/templates/readme_alpine.tmpl":          DockerTemplatesReadme_alpineTmpl,
	".docker/templates/readme_root.tmpl":            DockerTemplatesReadme_rootTmpl,
	".docker/templates/travis.tmpl":                 DockerTemplatesTravisTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".docker": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"docker-compose.tmpl":         &bintree{DockerTemplatesDockerComposeTmpl, map[string]*bintree{}},
			"docker-entrypoint.tmpl":      &bintree{DockerTemplatesDockerEntrypointTmpl, map[string]*bintree{}},
			"docker-sync.tmpl":            &bintree{DockerTemplatesDockerSyncTmpl, map[string]*bintree{}},
			"dockerfile_alpine.tmpl":      &bintree{DockerTemplatesDockerfile_alpineTmpl, map[string]*bintree{}},
			"dockerfile_debian-slim.tmpl": &bintree{DockerTemplatesDockerfile_debianSlimTmpl, map[string]*bintree{}},
			"dockerfile_ubuntu.tmpl":      &bintree{DockerTemplatesDockerfile_ubuntuTmpl, map[string]*bintree{}},
			"dockerignore.tmpl":           &bintree{DockerTemplatesDockerignoreTmpl, map[string]*bintree{}},
			"env.tmpl":                    &bintree{DockerTemplatesEnvTmpl, map[string]*bintree{}},
			"makefile.tmpl":               &bintree{DockerTemplatesMakefileTmpl, map[string]*bintree{}},
			"readme.tmpl":                 &bintree{DockerTemplatesReadmeTmpl, map[string]*bintree{}},
			"readme_alpine.tmpl":          &bintree{DockerTemplatesReadme_alpineTmpl, map[string]*bintree{}},
			"readme_root.tmpl":            &bintree{DockerTemplatesReadme_rootTmpl, map[string]*bintree{}},
			"travis.tmpl":                 &bintree{DockerTemplatesTravisTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
