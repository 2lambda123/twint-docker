// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// .docker/templates/docker-compose.tmpl
// .docker/templates/docker-entrypoint.tmpl
// .docker/templates/docker-sync.tmpl
// .docker/templates/dockerfile_alpine.tmpl
// .docker/templates/dockerfile_debian-slim.tmpl
// .docker/templates/dockerfile_ubuntu.tmpl
// .docker/templates/dockerignore.tmpl
// .docker/templates/env.tmpl
// .docker/templates/makefile.tmpl
// .docker/templates/readme.tmpl
// .docker/templates/readme_alpine.tmpl
// .docker/templates/readme_root.tmpl
// .docker/templates/travis.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DockerTemplatesDockerComposeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x41\x4f\xe3\x3c\x10\xbd\xe7\x57\x8c\xf8\x90\x38\x39\x4d\x84\x3e\x2d\x6b\xa9\x87\xb2\xf4\xc0\xee\xaa\x45\xb4\xe2\x1a\x99\x64\x0a\x56\x1d\xbb\x1a\x3b\xa1\x6c\x94\xff\xbe\x72\x9c\x84\x96\x85\xee\x5e\x9c\xcc\xcc\x9b\xe7\x37\xf3\xcc\x18\x8b\x6a\x24\x2b\x8d\xe6\x70\x71\x19\x7f\xb9\x88\x2c\x52\x2d\x73\xb4\x3c\x8a\x00\xdc\x8b\xd4\x8e\x47\x00\x00\xb2\x14\x4f\xc8\x61\x9f\xd0\xaf\xad\xa9\x27\xa1\xd2\x34\x10\xdf\x48\x82\xb6\x6d\x1a\xb9\x81\xf8\x5a\x58\x6c\x5b\xd6\x34\xa8\x0b\x9f\x0b\x19\x68\xdb\x8e\xe2\xb1\x92\xaa\x08\x6c\x00\xb9\xd1\x0e\xf7\x8e\x43\xdc\x27\x0a\x93\x6f\x91\x36\x52\x21\x87\x9b\xf1\x3f\x1a\xb0\x42\x6a\xa4\x4c\x8b\x12\x79\x90\xc5\x72\x25\x47\x8d\xcc\xa2\xa0\xfc\xf9\x73\xa9\x03\x40\x09\x87\xd6\x9d\x60\x0d\xb8\x0e\xb0\x33\xe4\x6c\xa0\x64\x70\x99\x24\x09\xf7\x47\x17\xa3\xae\x25\x19\x5d\xe2\xb0\x1e\x06\x8b\xe5\xcd\x3c\x9b\x2f\x1e\xa6\x3b\x32\x45\x95\x3b\x69\x74\x27\xcf\x10\xdb\x91\xac\xcd\xfe\x95\x9f\xb8\xd6\x19\xea\x51\x87\x23\xf8\x9d\x88\x27\x9c\x1c\x92\x1c\x4c\x70\x24\xf0\xec\x6b\xf2\x7f\xc2\xfd\x71\x06\xff\xc1\xda\x10\xec\x68\xa0\x0b\xd5\xd4\x57\xd3\xa1\xea\x75\x90\x51\x1d\xc9\x00\xba\x4a\xd3\x2b\xee\x0f\x0f\xba\x0b\x17\x02\xf8\x31\x50\x09\xeb\x64\xfe\xc1\x9a\x83\x6f\x71\x0f\x88\x73\x33\x39\xc2\x1e\x47\xfc\xbc\x99\xff\x9c\xad\xd6\xb7\xdf\xb2\x87\xf9\xfd\xea\x76\xb9\x68\x4f\x2c\xa5\x6f\xfd\x6c\xe3\xda\x14\x18\x7b\xfc\xf4\xe8\x8e\xbe\x9a\xab\xca\x3a\xa4\x58\x6a\xe9\xa4\x50\x59\x29\x7c\x98\xf9\x26\x7b\xb2\xa1\x63\x0c\x53\xb1\x3e\xd7\x23\x1e\x8d\x71\xd6\x91\xd8\xc5\x25\x96\x86\x5e\x33\x65\xf2\xed\xd4\x51\x85\xc3\x02\xe7\xab\xec\xfb\xec\x61\x96\x2d\xef\xd6\xab\xe9\xdb\xac\x63\xae\x3d\xeb\x90\x95\x92\xa5\x1c\xac\x03\x28\xb1\xf4\x4c\x43\x08\x60\xcd\xc6\x71\x60\xe9\x98\x78\x16\x54\x8c\x89\xda\xa8\xaa\xc4\xd1\x78\xb4\x85\x70\x22\x49\xf9\xa4\xb2\x34\xb1\xcf\x82\xf0\x9d\x05\xbe\xfe\xe7\x83\x79\x93\x77\xb7\xbc\x5f\xb7\xfc\x5d\xec\x5d\xdf\xca\x47\xa1\xc5\x5f\xec\x0e\xa0\xfe\xc3\xcf\x9b\x1f\xb7\xd7\xb3\xc5\xec\x5f\xfc\x0d\x2d\x1f\x29\xeb\x39\x06\x61\x87\x61\x14\x1d\xcc\x3f\xce\xde\x75\x16\x24\x6b\x24\x0e\xca\xe4\x42\x45\x91\x46\xf7\x62\x68\xdb\x01\x0b\xdc\x88\x4a\xf5\x4f\x07\xf7\x0e\x49\x0b\x35\x2c\x3c\x68\xd2\x2f\xac\x93\xf5\x3b\x00\x00\xff\xff\x93\x51\xb3\x35\x15\x05\x00\x00")

func DockerTemplatesDockerComposeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerComposeTmpl,
		".docker/templates/docker-compose.tmpl",
	)
}

func DockerTemplatesDockerComposeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerComposeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-compose.tmpl", size: 1301, mode: os.FileMode(420), modTime: time.Unix(1576920052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerEntrypointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\x2a\x29\xcf\xcc\x2b\x51\x50\x71\xe0\x02\x04\x00\x00\xff\xff\xbd\x2f\x25\x36\x15\x00\x00\x00")

func DockerTemplatesDockerEntrypointTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerEntrypointTmpl,
		".docker/templates/docker-entrypoint.tmpl",
	)
}

func DockerTemplatesDockerEntrypointTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerEntrypointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-entrypoint.tmpl", size: 21, mode: os.FileMode(420), modTime: time.Unix(1576934386, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerSyncTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x6a\xc3\x40\x0c\xc6\xf1\xdd\x4f\x21\x8e\xc2\x4d\x6e\xdd\x8e\x07\x5d\x4a\x1f\xc0\x5b\x47\x73\xb5\x95\xcb\x41\x90\x0e\x49\xb6\x63\x42\xde\x3d\x24\x86\x38\xe0\x4d\xfc\xfe\x82\x6f\x42\xd1\xcc\x14\xc0\x7d\xb9\x8a\x8b\x65\x26\x0d\x15\xc0\x84\xf2\xcf\x8a\x01\x4c\x46\xac\x74\xa1\xfe\xc1\xb1\x94\x6e\x88\x16\xef\x37\x80\x4a\x1f\xe0\xed\xd2\xfe\xfd\x5e\x3f\x6c\xce\x64\xab\x2e\xd4\x77\x6a\x12\x0d\xd3\x12\xc0\x53\xb4\x3c\x61\xc7\x7a\xf6\x5b\x1f\x15\x25\x0f\x01\x3e\x9b\xa6\xd9\x34\x09\x8f\x65\xcf\x51\x92\xae\x8b\x35\xb8\xba\x08\x1e\x50\x80\x70\x46\x71\x4f\xcd\x89\x58\xf0\xdb\xb7\xd1\x8e\xf0\x9e\xb2\xf9\x7d\xfb\xc1\x13\xcf\x2f\x0f\xb7\x00\x00\x00\xff\xff\x22\x21\x4b\x7c\xfd\x00\x00\x00")

func DockerTemplatesDockerSyncTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerSyncTmpl,
		".docker/templates/docker-sync.tmpl",
	)
}

func DockerTemplatesDockerSyncTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerSyncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-sync.tmpl", size: 253, mode: os.FileMode(420), modTime: time.Unix(1576854421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xd1\x4e\x1b\x3b\x10\x7d\xbe\xfe\x8a\x51\xb8\x82\x07\xae\x13\x50\xde\xb8\x97\xab\x46\x21\x6d\xa3\x96\x24\x5a\x42\x2a\x54\xaa\xca\xb1\x27\xd9\x29\xbb\xb6\x65\xcf\x2e\x89\x10\xff\x5e\xed\x6e\x02\x01\x05\xf1\xd0\xa7\xb5\x67\x8e\xec\x73\x8e\xe7\xec\xc7\x64\x7c\x09\x2a\xf3\x64\xf1\xac\xdb\x3e\x3d\x81\xde\x15\xcc\x0b\xca\x8c\x10\xdf\xc6\xc9\x97\x8b\x61\x02\x1d\xe7\xb9\xa3\xbc\x17\xe2\x00\x86\x36\xb2\xca\x32\x98\xac\x39\x75\x16\x94\x35\x80\x2b\xc6\x60\x55\x06\x06\x3d\x5a\x83\x56\x13\xc6\x7f\x80\xac\xce\x0a\x43\x76\x09\x29\x2a\x83\x21\xd6\xe0\x4f\xfd\xbe\x48\xae\x47\xa0\xfc\x1d\x28\x63\x40\x4a\xeb\xa4\x56\x3a\x45\xf0\xf5\x91\xdd\xed\x57\x1a\x2c\xc1\xaf\xbb\xd2\x93\x87\x8c\xe6\x8b\x05\x6d\x3e\x75\x27\x2f\x62\x56\x2f\x96\x5a\xc3\x92\x18\xb4\x92\x1a\x03\xd3\x82\xb4\x62\x8c\xe0\x3c\xda\x79\xa6\xe2\x2b\xf4\xf1\xf1\x0b\x19\xe4\xd1\x96\x35\x23\x4f\xbe\x0b\xb4\xa9\xfb\xa6\x2e\x0e\xa0\x1f\x50\x31\x82\x82\x92\x02\x17\x2a\x03\xb4\x25\x05\x67\x73\xb4\x5c\x2b\x52\x9a\xa9\xac\x20\xc4\xcd\x39\x1b\x19\x32\x87\x12\x6d\xd9\xb8\x57\xad\xc4\x60\x34\x83\x49\x6f\xfa\xf9\xbc\xf5\x54\xeb\xcc\xc9\x9e\xfd\x5d\x15\x5b\x70\x2b\xfe\x9a\x0d\x93\xe9\x75\xef\xeb\xcf\xc1\x68\xb6\x03\x6a\xed\x32\xde\x35\x19\xc8\xb2\x03\x4e\x71\x2f\xb9\x7b\xe2\x74\x57\x60\x6d\x52\xe6\x2c\x82\x94\x06\x3d\xa7\xe7\xa7\x20\xe7\xf0\xf0\xd0\x9e\x61\x88\xe4\xec\xe3\x23\xa4\xcc\x3e\x9e\x75\x3a\x4b\xe2\xb4\x98\xb7\xb5\xcb\x3b\x7c\x4f\x96\x7d\x70\xbf\x50\x73\xb3\x79\x1a\x88\x8a\xf2\xe1\x21\x68\xf3\xba\xf2\xc2\x4b\x29\x0b\xbf\x0c\xca\x60\x55\xde\x07\xd0\xcd\x2c\xed\xe9\xd8\x22\xf7\xeb\x7d\x8d\xb6\x10\xaf\x07\x57\x5c\xf6\x86\xa3\x69\x6f\x38\x1a\x24\xb0\x3a\x09\xab\x3b\x57\xc2\x7f\x9b\xc5\x07\x1f\x1c\x3b\x9b\x2b\xca\x2a\x4d\xff\xef\x3c\x6c\x28\x2c\x53\x8e\x50\x44\x0c\xb5\x4d\xf9\x9d\xa1\x00\xd2\xd7\x9a\x36\x77\x2b\x63\xaa\x3e\xc8\x0b\x68\x1c\x90\xe9\xb3\x64\x19\xa1\x7a\xc6\x4e\x4c\xe1\x56\x40\x05\x8f\xc5\x16\xa6\xe1\x68\xc7\x9d\x7f\x9f\x0f\x37\x8a\xd5\xd1\x7b\x81\xda\x72\x7b\xf1\xe6\xce\x66\xeb\xf7\x22\xb4\x89\xcb\x36\x02\xd5\x3e\xb2\xd1\xcd\xec\x5f\xdd\x13\xeb\x14\xd8\xd5\x9a\x41\x3b\xcb\xb8\x62\x71\x7d\x35\x48\x1a\xda\x7b\x83\xdf\x77\x7e\xfd\xe6\xa8\x2d\x82\xcb\xeb\xa6\x0f\x58\x92\x2b\x22\x50\xae\x96\x28\xfa\xe3\xc9\x0d\x48\x59\xb5\xcf\xeb\x9f\xca\x73\x1a\x76\x72\x21\x0e\xa0\xb7\x0d\xd1\x1b\x37\xfc\x49\x76\x06\xa3\x69\x72\x33\x19\x0f\x47\x53\xf8\xde\xaa\x05\xb6\x7e\xfc\x0e\x00\x00\xff\xff\x16\xea\xa4\x28\xf6\x04\x00\x00")

func DockerTemplatesDockerfile_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_alpineTmpl,
		".docker/templates/dockerfile_alpine.tmpl",
	)
}

func DockerTemplatesDockerfile_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_alpine.tmpl", size: 1270, mode: os.FileMode(420), modTime: time.Unix(1576830973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_debianSlimTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x51\xeb\xda\x30\x14\xc5\xdf\xf3\x29\x2e\x0e\x7c\x98\xa4\x19\xf8\x30\x90\x39\x94\xad\x1b\x65\xb3\x95\xac\x2a\x32\xc7\x88\x6d\x96\x66\xb6\x49\x48\x6e\x9d\x22\x7e\xf7\x61\xf5\xcf\x5f\x7d\xca\x39\xe7\x47\xe0\x9c\xfb\x85\x67\x33\x70\x47\xac\xac\x19\x0d\xa3\xf7\x34\xd4\xba\xa1\x01\xbd\xc4\xa2\x22\x64\x36\x4d\xd2\x7c\x9a\xa4\x31\x87\xc3\x3b\x7f\xd8\xd9\x3d\x7c\xb8\x89\x89\xf3\x16\xad\x69\x84\xae\xa3\xc2\x36\x1f\x09\x99\xf2\xaf\x90\xaf\x92\x34\xff\xbd\x8c\xf9\x8f\x24\x4b\xc7\xa7\x53\xb4\x94\x3e\x68\x6b\xce\x67\x42\x3e\x65\xf3\x35\x94\xb6\xd8\x49\x4f\xa5\x41\x7f\x74\x56\x1b\x8c\x42\x05\xec\xc1\x12\xbe\x48\xa1\xa8\x1a\x5b\xc2\xe0\xf0\xcc\x3a\xb8\x21\xc2\x21\x55\x12\xa1\x75\xa5\x40\x09\xfd\xfe\x5d\xa6\x4d\x40\x51\xd7\x40\x8f\xb0\x21\x4a\xe3\xcb\x1f\xa7\xdd\xf0\x15\xd2\xd6\x29\x2f\x4a\x09\x54\x82\xd2\x38\xa8\x10\x5d\x18\x31\xa6\x34\x56\xed\xf6\x32\x89\xe1\x3f\x6d\xd0\x79\xfb\x57\x16\x78\x35\x91\xd2\x38\xb9\x5f\xf5\x46\x2a\x35\xee\xd0\x73\xb3\xa2\x96\xc2\x80\x68\xd1\x5e\x55\x57\xd1\x37\x40\xfd\x1f\x60\x7b\xe1\x59\xad\xb7\x4c\x38\x64\xb5\x0e\x18\xd8\x5b\x60\xd8\xb8\xcb\x73\x61\x9d\x24\x24\x4e\x73\xbe\x9e\x67\x49\x9a\xc3\xcf\xde\xe3\x21\x7a\xbf\xc8\x32\xfb\xbe\x98\xc5\x70\x6d\x46\x56\x19\xff\xf6\x39\xe1\xc0\x82\xdf\xdf\xa2\xff\x01\x00\x00\xff\xff\x15\xde\x8c\x62\xdc\x01\x00\x00")

func DockerTemplatesDockerfile_debianSlimTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_debianSlimTmpl,
		".docker/templates/dockerfile_debian-slim.tmpl",
	)
}

func DockerTemplatesDockerfile_debianSlimTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_debianSlimTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_debian-slim.tmpl", size: 476, mode: os.FileMode(420), modTime: time.Unix(1576745957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_ubuntuTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xdf\x6e\xd3\x30\x18\xc5\xef\xfd\x14\x9f\x86\x34\x01\x53\x62\xa6\x5d\x31\x31\xb4\x0a\x02\x44\xd0\x64\xf2\xd2\x56\x15\x45\xc8\x49\x8c\x63\x48\x6c\xcb\xfe\x5c\x48\xab\x3e\x10\xcf\xc1\x8b\xa1\xa6\x9d\xfa\xe7\xca\xe7\x9c\x9f\x65\x9d\xe3\x0f\x2c\x1f\x43\x28\x83\xc6\x70\x7b\xfd\x3a\xbe\x7e\x45\xc8\x78\x94\x66\xc5\x28\xcd\x12\x06\x8f\xff\xfe\x96\xdc\xa3\x12\x1a\x3e\x99\xb0\x12\x08\xcf\x7b\x63\x56\xca\xc4\x95\xe9\x5e\xc0\x1b\x2f\xf6\xf8\xfe\x10\xbf\x25\x64\xc4\x3e\x42\x31\x4b\xb3\xe2\xfb\x34\x61\x8f\x69\x9e\xdd\xad\xd7\xf1\x54\x38\xaf\x8c\xde\x6c\x08\x79\x97\x3f\xcc\xa1\x36\xd5\x2f\xe1\x22\xa1\xd1\xf5\xd6\x28\x8d\xb1\x6f\x80\x9e\x58\xc2\x26\x19\x54\x4d\x67\x6a\xb8\xfa\x73\xce\x06\xb8\x20\xdc\x62\x24\x05\x42\xb0\x35\x47\x01\x97\x97\x47\x99\xd2\x1e\x79\xdb\x42\xd4\xc3\x82\x48\x85\xb0\x20\xb6\xc7\xc6\xe8\x9b\xc8\x2a\xfb\xf4\x82\x55\xf6\xe6\x70\x35\x0a\x56\x3a\x5e\x0b\x88\x04\x48\x85\x57\x0d\xa2\xf5\xb7\x94\x4a\x85\x4d\x28\xb7\x03\x29\xfe\x56\x1a\xad\x33\x3f\x45\x85\x3b\x13\x4b\x85\xf7\xc7\x1b\x9f\x09\x29\xef\x06\x74\xde\xb3\x6a\x05\xd7\xc0\x03\x9a\x9d\x1a\x0a\xbb\x0e\x22\xf7\x03\xe8\x92\x3b\xda\xaa\x92\x72\x8b\xb4\x55\x1e\x3d\x7d\x09\x14\x3b\xbb\x3d\xb6\x6c\x90\x84\x24\x59\xc1\xe6\x0f\x79\x9a\x15\xf0\xf5\xe2\xf4\x5b\x2e\xbe\x91\x69\xfe\x65\x32\x4e\x60\xd7\x8c\xcc\x72\xf6\xf9\x7d\xca\x80\x7a\xb7\xdc\x47\xff\x03\x00\x00\xff\xff\x4f\xe2\x8d\x91\xf4\x01\x00\x00")

func DockerTemplatesDockerfile_ubuntuTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_ubuntuTmpl,
		".docker/templates/dockerfile_ubuntu.tmpl",
	)
}

func DockerTemplatesDockerfile_ubuntuTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_ubuntuTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_ubuntu.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1576745927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xce\xc9\xcc\xe5\x4a\xcc\x29\xc8\xcc\x4b\xe5\xf2\x4d\xcc\x4e\x4d\xcb\xcc\x49\xe5\x4a\xc9\x4f\xce\x4e\x2d\xd2\x4d\xce\xcf\x2d\xc8\x2f\x4e\xd5\xab\xcc\xcd\x41\x17\xd2\x02\x0b\xea\xa5\x67\x96\x80\x09\x7d\x08\xa9\x05\xa5\xb4\xb8\x00\x01\x00\x00\xff\xff\x78\xa9\x74\xfb\x57\x00\x00\x00")

func DockerTemplatesDockerignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerignoreTmpl,
		".docker/templates/dockerignore.tmpl",
	)
}

func DockerTemplatesDockerignoreTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerignore.tmpl", size: 87, mode: os.FileMode(420), modTime: time.Unix(1576745854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesEnvTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\x83\x30\x18\x86\xef\xfe\x8a\xd0\xee\xaa\xd3\x42\x27\x1d\xe4\xf0\x69\x83\x64\xb5\x2a\x26\xba\xde\xc4\x39\xc7\x02\xd3\x43\x23\x74\x10\xf2\xdf\x87\x2e\x5a\xe9\xed\x7b\x9f\x97\xf7\xe1\xdb\x22\x7e\x13\xfd\x60\xf1\x77\x9a\xf0\xaa\x0c\x59\x55\xe4\x31\x56\x0a\x39\x65\x23\x8b\x3c\x46\x5a\x9b\x8e\x43\x34\xf1\xa3\xb8\x22\xad\x95\x12\x5f\xc8\x09\x6a\xd9\x6a\x6d\x2b\xd5\xf6\x9f\x23\xfb\x27\xf7\x4d\x49\x72\x46\xd3\x64\xb5\x33\x45\x02\x67\xc2\x32\x08\xc9\x54\xa5\xb7\xbe\x5d\x95\x01\x30\x82\x87\xd5\x5b\xf4\x0c\x11\xc1\x4f\xea\x61\xab\x9f\x67\x34\x2e\xf4\xeb\x9c\x38\x44\xb3\x2a\xa2\x47\x7c\xf0\x7d\x93\x0a\x93\xac\x2d\x22\x3f\xb5\x1c\x44\x23\xdb\xfa\xda\x7c\x5b\x24\x06\xc6\x69\xb8\xfc\xeb\x3b\xae\xe3\x2d\x34\x4b\x73\x8e\x0f\x3b\xd7\x5d\xc8\x1b\x94\x50\xa5\x19\x67\x78\x63\x5f\x3a\xb9\xf7\x76\x1d\xb2\x2f\xdd\xef\x78\x6c\x46\xfd\x49\x7c\xd4\x7d\x6d\x9d\x68\x00\x09\x3c\x68\x0d\x9c\xac\xfb\x17\xd7\xfb\x0b\x00\x00\xff\xff\xd4\x69\x13\x70\x83\x01\x00\x00")

func DockerTemplatesEnvTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesEnvTmpl,
		".docker/templates/env.tmpl",
	)
}

func DockerTemplatesEnvTmpl() (*asset, error) {
	bytes, err := DockerTemplatesEnvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/env.tmpl", size: 387, mode: os.FileMode(420), modTime: time.Unix(1576920292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xdf\x0f\xd2\x30\x10\x7e\xee\xfd\x15\x97\x6c\x66\xf8\xb0\x15\x66\x82\xd0\x48\x82\x89\x44\x79\xe0\x47\x94\x68\x7c\xd1\xd4\xad\xb0\x65\xdd\xba\xac\x1d\xa8\xc0\xff\x6e\xda\x4d\xc7\x03\xbe\x5c\x7b\xdf\x7d\xfd\xee\xbb\xde\x7a\xf3\xf6\xfd\x0a\xd9\x02\x7f\x8e\x9b\xdf\x85\x3a\x53\x73\xc9\x2b\x13\xa6\x2a\x29\x44\x03\x9f\x57\x1f\x3f\xad\x77\x5b\xb6\x40\x7f\xa4\x33\x21\x25\x9e\x1a\x51\xe3\xe1\xcb\x7a\x7b\xf8\xde\x17\xf1\x9d\xe3\x1e\x73\x29\xf0\x86\xfc\x52\x60\x70\xad\x9b\xbc\x32\xe8\xc7\xf7\x00\x6f\x98\xb4\x06\xc3\x14\x83\x45\x80\xe1\x11\xe3\x97\x00\x9e\x87\x46\x68\x43\x08\x23\xf6\x8c\xc0\x46\x06\xc4\x34\xad\x70\xd5\xb3\x68\x74\xae\x2a\xc2\x48\x9a\xeb\x5a\xf2\x5f\x7f\x91\x08\xfa\x0b\x03\xb2\x14\x49\xa6\xd0\x1f\xf5\x3e\x3a\xdd\xbc\xe4\x27\x61\x85\x7f\xb4\xb9\x4c\xbb\x14\x79\x95\xa2\xe1\x27\x34\x99\x28\x23\x88\xf6\x1f\x76\xdb\xaf\xac\xab\x81\x8b\x56\xad\x1b\x19\xbb\x77\xa1\x41\xff\xea\xfe\xe6\xce\xfc\x6b\xdf\xe1\x8e\xd1\xc0\xb3\x7a\xcf\x28\xff\x30\xc9\xed\x54\xce\x54\xdd\xea\x2c\xec\x9c\x31\x62\x13\xec\x45\x1c\x36\x38\x1a\x78\x30\x5c\x1f\xbc\xb9\xa7\x4f\x9a\xfe\x8f\xf1\x60\x21\x13\xb2\xb6\xdf\xb2\x77\x9b\x49\x54\x59\xf2\x2a\xd5\x0e\x1e\xfa\xdb\x0c\x6c\x40\x86\x1b\x5e\x08\xbb\x53\x20\x4b\x2d\x52\x0c\x2b\x0c\x34\xfd\xe6\x79\x94\xd6\x01\xfa\x6f\x00\x3c\xcc\x8c\xa9\x35\xa3\x54\x1b\x9e\x14\xea\x2c\x9a\xa3\x54\x97\x28\x51\x25\xe5\x74\x1a\xbf\x7e\x35\x1b\xcf\xe9\x64\x16\x4f\x27\xe3\x39\xbc\xb0\x63\x30\xf8\x13\x00\x00\xff\xff\xa4\xdc\xfd\x9f\x6f\x02\x00\x00")

func DockerTemplatesMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesMakefileTmpl,
		".docker/templates/makefile.tmpl",
	)
}

func DockerTemplatesMakefileTmpl() (*asset, error) {
	bytes, err := DockerTemplatesMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/makefile.tmpl", size: 623, mode: os.FileMode(420), modTime: time.Unix(1576745814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6e\x1b\xbd\x11\xbd\xdf\xa7\x98\x58\x01\x22\x19\xa6\x24\xff\x01\xb2\x91\x04\x4d\xec\xc6\x35\x1a\x24\x69\xac\xa0\x17\x86\x01\x73\x77\x67\xb5\x8c\xb8\xe4\x86\xe4\x4a\x76\x0c\xf7\x15\xda\x3e\x40\x91\x9b\xdc\xf6\xbe\xcf\xd3\x17\x68\x1e\xa1\x18\x72\xf5\x6b\x3b\x5f\x3e\x4b\xbe\xb0\xc4\xe1\x70\xce\xf0\xf0\x70\x48\xaa\x01\x6e\x2c\x94\x63\xa9\x4e\x86\x68\xa2\xe8\xf9\x13\xc6\xa0\xaf\x8f\xc0\x3a\x6e\x1c\x30\xf6\x32\x6a\x34\xa0\xcf\x63\x89\xa0\x33\x38\xd2\xca\xa1\x72\x36\xda\x6e\xc3\xf9\x9f\xf4\x18\x9c\x86\xca\xe2\x45\xb3\x91\xeb\x31\x73\x9a\x55\x16\x5b\x11\x00\x75\xbf\x11\xc6\xba\xba\x37\xa3\xef\x93\x4e\x08\xfd\x47\x06\xb9\x43\xe0\x0a\xb8\x14\xdc\x5e\x34\x1b\x89\xb7\x30\xae\x98\xb7\xb4\x3c\xca\xb1\xcf\x8c\x1d\xe9\xa2\xd4\x3e\x56\x48\x95\x25\xc1\x30\x17\xf0\x8f\x92\x5b\x27\x12\x8b\xdc\x24\x39\x70\x95\xc2\x9f\x45\xcc\x15\xbf\x68\x36\x70\xbe\x8b\x71\x95\xb2\xa1\xef\x9a\x1b\xdd\xd7\x06\x4a\xa3\xaf\xae\x2f\x9a\x0d\xa7\x0d\xf3\xdf\xe7\xa3\x5f\x61\x52\x39\x84\x3e\xf1\x05\x89\x2e\x0a\xae\x52\x0a\x1d\xec\x2c\xf0\x58\xdb\x17\xc6\xf1\xa2\x94\x68\x89\xbe\xf9\x51\xc1\xca\x74\x36\x3f\xc6\x4f\x98\x3b\xcf\x46\x4a\x9f\x81\x83\x57\x95\xcb\xb5\x21\x23\x0f\xdf\x82\xf9\xc7\xb7\xef\xff\xf2\x4b\x62\x44\x5c\x39\xa1\x06\x17\xcd\x06\x4b\xe6\xda\xc1\xed\x2c\xd7\x63\xb8\xd6\x95\x01\x5b\x95\xa5\x36\xee\xa2\xd9\xb0\xb4\x5e\x64\x63\xb5\xad\x35\x5b\x7a\x54\xa9\x5f\x78\x5a\xf9\xd9\x1a\x53\xb3\x01\xd3\x45\x8d\xa2\x37\xda\x40\x56\x37\xf9\x00\xb7\x08\x02\x14\x62\x4a\x03\xe2\x4a\xc8\x14\x44\xc1\x07\x08\x61\xc1\xda\x51\x74\x79\x79\x69\x73\x94\x32\x0a\x16\x28\x2b\x29\xe1\xaa\x6b\xbe\x0e\xf5\xa8\xe3\xf9\x3b\xbc\xb9\x81\xf6\xb1\x30\x70\x7b\x4b\xde\x51\xa4\x0d\xdc\x19\x37\x59\xfa\x00\x12\xfc\x1a\x94\xdc\x92\xa2\x66\xe3\x7c\x33\x28\xfd\xc5\x46\x0d\x6e\x2a\x05\xcc\x09\x60\xcc\x14\xc0\x46\xf0\xb4\x59\x8e\xd3\x56\x87\x58\x3f\xec\xe8\xd2\x75\x78\x59\xfa\xd6\x83\x19\xde\xdc\x88\x0c\xda\xaf\xb9\xc5\xdb\x5b\x76\x73\x83\x2a\x25\x5b\xb0\xc0\xed\xed\x06\xe1\xc3\xe2\x5f\x20\xf1\x21\xa1\x46\xd1\x99\xdf\x75\x44\x78\x09\x28\xf9\xa2\xd3\xb0\x76\x7a\x88\x8e\xaa\x04\x96\xc2\x82\xd4\x27\x63\x26\x1c\xc1\x54\xe5\x8b\x58\x4e\x9b\xdf\x8a\x4b\x2e\xd3\x30\xf7\x6e\x86\x87\x23\x78\xae\x47\xf0\xf4\xc3\x5f\x8f\x6b\x16\x3b\xd6\xd4\x84\x86\x65\x99\x0f\x7d\x67\xbf\x44\xd1\x2b\xc8\x70\x0c\x56\x50\x0f\x4c\xf6\x0e\xe5\x9e\xa3\x2c\xbd\xf0\x2a\x95\xa2\xb1\x8e\x78\x72\x39\x42\xcc\xad\x48\xec\xe1\x2a\x29\x01\xab\x48\xe8\x46\xf1\x02\x81\xc1\x59\x62\x78\x89\xc0\xa5\xf4\x00\xfd\x31\xa2\xb3\x90\x19\x5d\x78\xaf\x67\x16\x9c\x28\x50\x0a\x85\xed\x55\xb1\x2c\x94\x42\x21\x2f\x69\xb2\x0b\xc0\xf3\xa0\x94\xc4\x12\x30\xd0\xde\xe7\x42\x09\x35\x98\x45\x78\x54\x36\x8b\x19\x1c\x69\x29\x31\x71\x80\x23\x34\xd7\x21\x89\x7b\xa1\x42\x62\xde\x4b\x2b\x7c\x66\xeb\x7c\x57\xe6\x83\x5d\x23\x37\xb0\xd3\xdd\xde\x9b\x4b\xa6\xe6\xc2\xe5\xdc\xc1\x18\x0d\x82\x23\x03\xa6\x10\x63\xa6\x0d\x7a\xf7\xd5\x91\xad\x50\x89\x8f\xb5\xcf\xb6\x77\xd8\x4e\xf7\x57\x12\x58\x1e\xb3\x72\x16\x1a\x32\x21\xb1\xed\xae\xdc\x4c\x0e\x35\x3a\xe9\xdd\xf2\x11\xd2\x5e\x98\x38\xad\x0b\x2f\xb1\x23\x60\xcc\xff\x7f\x08\x95\x5b\xe0\x40\x1e\x7e\xc0\xca\x6c\x63\xc1\x85\x04\xc6\xca\x5c\x2b\x2f\x7d\x3a\xb9\xe6\x79\x2e\xc4\x20\x77\x90\x13\x74\xf0\x51\x55\x11\xa3\xb1\xa0\x0d\x84\xc1\x3c\x4d\x0d\x5a\x8b\x8f\x53\x9d\x85\x8d\x63\xad\xb8\x4c\xa1\x6f\xaa\xa2\xdc\x00\xc6\x46\x68\x44\x26\x30\x05\x06\xc7\xc2\x96\x92\x5f\x4f\x32\x8a\xaf\x61\xda\x49\x93\xa8\x73\xec\xd7\x32\xe0\xb1\xae\x1c\xcc\x87\x7b\x54\x4a\x83\x17\x1b\x7b\xbd\x76\xaf\xd7\xed\xee\xf5\xb6\x76\xda\xbb\xbd\xfd\x83\xdd\x83\xad\xed\x61\xb1\xf1\x0b\x0b\xe5\x37\x24\x07\xc3\x53\x51\xf9\x8a\xba\x3d\x2c\x80\x1b\x5d\xa9\x14\x38\x94\x92\x27\x08\x42\xc1\x07\x6e\x44\x58\x55\xbc\xa2\xcb\x00\x15\x97\x02\x7e\x7f\xb2\x4e\xaf\x53\x0e\x68\x41\xea\x84\xcb\x5c\x5b\x77\x78\xb0\xd3\xa5\xcd\xf7\xbe\x72\x65\x35\xdb\x7b\x7a\xf1\x2c\x5d\x93\xf0\x3f\x5b\xad\x80\xb1\xf0\xf1\x53\xe9\x7b\x97\xf5\x68\x9f\xae\x1a\x31\xdd\x1c\x5c\x28\x9a\x69\x4c\xd8\x84\x34\x9b\x2c\x87\xb3\xbf\xbc\x15\x0e\x61\xe2\xbc\x3a\x6c\xa6\xa5\xd4\x63\x12\xef\xec\xa4\xa1\x63\xdd\x39\x34\x93\xf3\x65\xea\xb3\x2e\x38\x3a\x35\xa6\x70\xe3\x5c\x2f\x41\xd6\x80\xeb\x80\xe3\x23\x6d\x84\x43\x3b\x57\xb7\x97\x4e\x70\x1e\x20\x73\x6e\x61\xe2\x9d\xae\x75\x9e\xf4\xec\x31\x2c\xa3\xbb\xee\x2c\x09\xdf\xf4\xc0\x42\x65\xda\x14\xdc\x09\xad\x68\x4b\xa2\xf1\x92\x0a\x04\xac\x9c\x46\x69\x34\xa9\x73\x82\xfe\xc9\xd2\xea\x5a\xa9\xc7\x5b\x10\x57\x0e\x30\xcb\x30\x71\x62\x84\x50\xa0\xcb\xb5\xbf\xb9\x0f\xb8\xcb\xd1\x2c\x15\x90\x5a\x08\x75\x38\x68\x9e\x78\x27\x0b\x7f\xdb\xa5\x6d\x19\x7c\xb7\x1e\x51\x30\x4e\x55\x22\xab\x94\x68\xfa\x88\x41\xf7\xad\xd5\xb9\x37\x75\xa8\xe9\x84\xbf\x54\x22\x19\xde\x9d\x22\x89\x80\xaa\x07\x1c\x4c\xe7\x00\x4d\x5f\xc2\x85\x4f\x0b\x2d\x4c\x42\xb5\xee\x27\x62\x1d\xb9\xda\xaa\x40\xd8\xee\x1e\xec\x75\x77\x7b\x07\xfb\xbd\xdd\xee\x7e\x0f\x18\x7c\x0c\x76\x0e\xf5\x3d\xde\x3f\xc7\x89\xa7\xe9\xdd\xcf\x96\x98\x84\xb3\x27\x5c\xc8\x4e\x8f\xdb\xb3\x4b\xb4\x7f\x43\x86\x27\x9a\x7f\x46\xc2\x00\x15\x1a\x7a\x1c\xc5\xd7\x21\x8f\xf0\x5c\x4b\x38\x69\x8d\x4e\x03\x4a\x44\x3a\x08\xda\x4b\x89\x1d\x7f\x2d\x8f\xde\xa2\xa3\xf9\xd2\xb1\xa7\xf4\x18\x0e\x5b\xfe\x59\x58\x3f\x48\xa3\xe8\xc7\xb7\x7f\x7e\x87\xcd\xcd\xfa\x89\xb4\xb9\x19\x6d\xc2\x89\x70\x79\x15\x1f\xc2\xf9\x1f\x6a\xeb\x45\x33\x77\xae\xb4\x87\x9d\xce\xc0\x77\xb5\x13\x5d\x74\xea\xbe\xd6\x34\x84\xc5\x98\x2a\x39\xaa\x5c\x57\x5f\xd1\x2d\x85\x5a\xea\xbd\x37\xe4\x92\x4f\xc8\xf4\xce\x1b\x39\x8a\x66\x2d\xad\xec\x16\x08\x6b\x2b\x0c\x85\x3d\x43\xee\x2a\x83\x60\xf0\x4b\x85\x96\x8a\x83\x41\x18\xa3\x4c\x74\x81\x4f\x9e\xc7\x06\x3a\x2f\xdf\x20\x4a\xc8\x0c\xfa\x1b\x57\x92\x63\x32\x84\xf3\x3a\x42\xc9\x07\xf8\xb3\xb9\x76\xe6\x7f\x6a\xe9\x84\x41\xad\x76\x74\x86\x08\xe7\x97\xed\x4e\xaa\x13\xdb\x39\x7a\xff\xae\xff\xf1\xf4\xf5\xa7\xfe\xe9\xbb\x93\x76\x91\x5e\xfe\x72\x3c\xdb\x89\xa5\x8e\x3b\x05\xb7\x0e\xcd\xbd\xb1\x5a\x90\x91\x1c\xd0\x71\x21\x6d\xdb\x93\x73\xe7\x97\x81\x28\x3a\xa1\x6a\xc0\xe1\xbf\xff\xfe\xc7\xff\xfe\xf3\x77\x10\x19\xb8\x5c\x78\xbd\x7f\xa6\xb2\x45\xcf\x2d\x4c\x69\xc8\x93\xff\x07\x00\x00\xff\xff\x7d\x10\x90\x44\x3a\x12\x00\x00")

func DockerTemplatesReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadmeTmpl,
		".docker/templates/readme.tmpl",
	)
}

func DockerTemplatesReadmeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme.tmpl", size: 4666, mode: os.FileMode(420), modTime: time.Unix(1576937965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdb\x6e\x1b\xbd\x11\xbe\xdf\xa7\x98\x58\x3f\xf0\x4b\x86\xa9\x83\x0f\x80\x6c\xfc\x09\x9a\xd8\x8d\x6b\x34\x48\xd2\x58\x41\x2f\x0c\x03\xe6\xee\xce\x6a\x19\x71\xc9\x0d\xc9\x95\xec\x18\xee\x2b\xb4\x7d\x80\x22\x37\xb9\xed\x7d\x9f\xa7\x2f\xd0\x3c\x42\x31\xe4\xea\x68\x3b\x0d\xdc\xf5\x85\x25\x0e\x87\x33\x1f\x3f\xce\x0c\x39\x6a\x81\x9b\x09\xe5\x58\xaa\x93\x09\x1a\x60\xc0\x65\x29\x14\x46\xd1\x6f\xcf\x18\x83\x91\x3e\x06\xeb\xb8\x71\xc0\xd8\x8b\xa8\xd5\x82\x11\x8f\x25\x82\xce\xe0\x58\x2b\x87\xca\xd9\x68\xd0\x85\x8b\x3f\xe8\x19\x38\x0d\x95\xc5\xcb\x76\x2b\xd7\x33\xe6\x34\xab\x2c\x76\x22\x00\x9a\x7e\x2d\x8c\x75\xf5\x6c\x46\xdf\xe7\x93\x10\xe6\x8f\x0d\x72\x87\xc0\x15\x70\x29\xb8\xbd\x6c\xb7\x12\x2f\x61\x5c\x31\x2f\xe9\x78\x2f\x27\x1e\x22\x3b\xd6\x45\xa9\xbd\xad\x80\x99\x25\x41\xb0\x62\xf0\xf7\x92\x5b\x27\x12\x8b\xdc\x24\x39\x70\x95\xc2\x1f\x45\xcc\x15\xbf\x6c\xb7\x70\x75\x8a\x71\x95\xb2\x89\x9f\x5a\x59\x3d\xd2\x06\x4a\xa3\xaf\x6f\x2e\xdb\x2d\xa7\x0d\xf3\xdf\x57\xad\x5f\x63\x52\x39\x84\x11\x11\x07\x89\x2e\x0a\xae\x52\x32\x1d\xe4\x2c\x10\x5a\xcb\xd7\xd6\xf1\xa2\x94\x68\x89\xbe\xd5\x55\x41\xca\x74\xb6\xba\xc6\x6f\x98\x3b\xcf\x46\x4a\x9f\x81\x83\x97\x95\xcb\xb5\x21\x21\x0f\xdf\x82\xf8\xfb\xd7\x6f\xff\xf0\x47\x62\x44\x5c\x39\xa1\xc6\x97\xed\x16\x4b\x56\xc6\x41\xed\x3c\xd7\x33\xb8\xd1\x95\x01\x5b\x95\xa5\x36\xee\xb2\xdd\xb2\x74\x5e\x24\x63\xb5\xac\xb3\x3c\x7a\x54\xa9\x3f\x78\x3a\xf9\xe5\x19\xd3\xb0\x05\x8b\x43\x8d\xa2\xd7\xda\x40\x56\x0f\xf9\x18\x77\xc8\x05\x28\xc4\x94\x16\xc4\x95\x90\x29\x88\x82\x8f\x11\xc2\x81\x75\xa3\xe8\xea\xea\xca\xe6\x28\x65\x54\x87\x5d\x59\x49\x09\xd7\x7d\xf3\x65\xa2\xa7\x3d\xcf\xdf\xd1\xed\x2d\x74\x4f\x84\x81\xbb\x3b\xd2\x8e\x22\x6d\xe0\xde\xba\xf9\xd1\x07\x27\x41\xaf\x45\xe0\x36\x22\x6a\xb9\xce\x0f\x43\xc8\x3f\xdf\xaa\x9d\x9b\x4a\x01\x73\x02\x18\x33\x05\xb0\x29\xfc\xd2\x2e\x67\x69\xa7\x47\xac\x1f\xf5\x74\xe9\x7a\xbc\x2c\xfd\xe8\x51\x84\xb7\xb7\x22\x83\xee\x2b\x6e\xf1\xee\x8e\xdd\xde\xa2\x4a\x49\x16\x24\x70\x77\xb7\x45\xfe\x61\xfd\x2f\x90\xf8\x58\xa0\x46\xd1\xb9\xcf\x3a\x22\xbc\x04\x94\x7c\x5d\x69\x52\x2b\x3d\x46\x47\x55\x02\x4b\x61\x2d\xd4\xe7\x6b\xe6\x1c\xc1\x22\xca\xd7\x7d\x39\x6d\xfe\x97\x5d\x52\x59\x98\x79\x30\x19\x1e\xb7\xe0\xb9\x9e\xc2\x2f\xef\xff\x7c\x52\xb3\xb8\xce\xb0\x97\xad\x5a\xbf\x97\x32\x51\xf4\x12\x32\x9c\x81\x15\x34\x03\xf3\xf4\x21\xf8\x39\xca\xd2\xc7\x5e\xa5\x52\x34\xd6\x11\x55\x2e\x47\x88\xb9\x15\x89\x3d\xfa\x3f\x51\x01\xab\x28\xdc\x8d\xe2\x05\x02\x83\xf3\xc4\xf0\x12\x81\x4b\xe9\x7d\x8c\x66\x88\xce\x42\x66\x74\xe1\xb5\x7e\xb5\xe0\x44\x81\x52\x28\xec\x36\xe0\xce\x02\x55\x65\x5e\xd2\x96\xd7\x7c\xaf\xfa\x25\x1c\x1b\xbe\x81\x8a\x00\x17\x4a\xa8\xf1\xd2\xc2\x53\x01\xad\x83\x38\xd6\x52\x62\xe2\x00\xa7\x68\x6e\x02\x8e\x07\xbd\x05\x6c\x5e\x4b\x2b\xfc\xd5\xd6\x90\x9b\x60\x85\xdd\x20\x37\xb0\xdb\x1f\xec\xaf\xe0\xa9\x19\x71\x39\x77\x30\x43\x83\xe0\x48\x80\x29\xc4\x98\x69\x83\x5e\xbd\x11\xe7\x56\xa8\xc4\x9b\x3b\x60\x83\x5d\xb6\xdb\xff\x19\x0c\x9b\x6b\x9a\x00\xa2\x21\x13\x12\xbb\xee\xda\x2d\x43\xa3\x06\x40\x19\x60\xf9\x14\x29\x3b\xe6\x4a\x0d\xba\x4c\xec\x14\x18\xf3\xff\x1f\x73\xcc\x2d\x70\x20\x0d\xbf\xa0\x09\xda\xb1\xe0\x42\x02\x63\x65\xae\x95\x4f\x06\xba\xd4\x56\x09\x2f\xc4\x38\x77\x90\x93\xf7\xa0\xa3\xaa\x22\x46\x63\x41\x1b\x08\x8b\x79\x9a\x1a\xb4\x16\x9f\x1c\x84\x16\xb6\x4e\xb4\xe2\x32\x85\x91\xa9\x8a\x72\x0b\x18\x9b\xa2\x11\x99\xc0\x14\x18\x9c\x08\x5b\x4a\x7e\x33\x07\x15\xdf\xc0\x62\x92\xf6\x51\xc3\x1c\xd5\x21\xc1\x63\x5d\x39\x58\x35\xf7\x54\x54\xe3\xe7\x5b\xfb\xc3\xee\x70\xd8\xef\xef\x0f\x77\x76\xbb\x7b\xc3\x83\xc3\xbd\xc3\x9d\xc1\xa4\xd8\xfa\x89\x13\xf3\x59\xca\xc1\xf0\x54\x54\xbe\xde\x0e\x26\x05\x70\xa3\x2b\x95\x02\x87\x52\xf2\x04\x41\x28\x78\xcf\x8d\x08\xc7\x8b\xd7\xf4\x5a\xa0\xa2\x53\xc0\x93\xf0\x3a\xdd\x70\x68\xa0\x05\xa9\x13\x2e\x73\x6d\xdd\xd1\xe1\x6e\x9f\x32\xf2\x5d\xe5\xca\x6a\x99\x90\x7a\xfd\xca\x6d\x2e\x15\x3e\x59\xad\x80\xb1\xf0\xf1\xc3\x64\xf0\x2a\x8d\x65\x03\x4d\xc4\xf4\xcc\x70\xa1\xaa\xa6\x31\xb9\x27\x67\xcb\x2d\x73\x38\xff\xd3\x1b\xe1\x10\xe6\xca\x8d\x78\xce\xb4\x94\x7a\x46\xe1\xbc\xbc\x90\xe8\x19\xe0\x1c\x9a\xf9\x35\xb4\xd0\x69\xd0\x23\x5d\x2e\x0b\x8f\xb3\x5c\x6f\x78\xad\x7d\x36\xe4\x91\x4f\xb5\x11\x0e\xed\x4a\x6d\xdf\xb8\xf1\x79\xf0\x9a\x73\x0b\x73\xed\xb4\xe9\xdd\x52\xbf\x64\x58\x46\x8f\xe4\x25\x0e\x3f\xf4\xbe\x85\xca\xb4\x29\xb8\x13\x5a\x51\xaa\xa2\xf1\x11\x16\x68\x68\x02\x49\x69\x34\xc5\xeb\x1c\xc0\x47\x4b\x27\x6d\xa5\x9e\xed\x40\x5c\x39\xc0\x2c\xc3\xc4\x89\x29\x42\x81\x2e\xd7\xfe\xd5\x3f\xe6\x2e\x47\xb3\x51\x5b\xea\xa0\xa8\xcd\x41\xfb\xd4\x2b\x59\xf8\xcb\x1e\xe5\x6a\xd0\xdd\x79\x5a\x2d\x39\x53\x89\xac\x52\x22\xeb\x03\x86\x4c\xe8\x34\x72\x08\xa6\xb6\xb6\xd8\xf6\xe7\x4a\x24\x93\xfb\x1b\xa5\x80\xa0\xc2\x02\x87\x8b\x9d\x40\xdb\x97\x79\xe1\x91\xa1\x85\xb9\xa9\xce\xc3\x74\x34\x04\xd7\x56\x05\xc2\xa0\x7f\xb8\xdf\xdf\x1b\x1e\x1e\x0c\xf7\xfa\x07\x43\x60\xf0\x21\xc8\x39\xd4\xcd\x80\xef\xe9\x89\xad\xc5\xbb\xd1\x96\x98\x84\x2b\x2a\xbc\xe4\xce\x4e\xba\xcb\x67\xb8\x6f\x44\x43\x9f\xe7\x7b\x51\x18\xa3\x42\x43\x1d\x56\x7c\x13\x70\x84\x9e\x2f\xe1\x14\x77\x74\x63\x10\x10\xe9\x20\xc4\x61\x4a\x04\xf9\x87\x7d\xf4\x06\x1d\x6d\x99\x6e\x47\xa5\x67\x70\xd4\xf1\xbd\x65\xdd\xd5\x46\xd1\xf7\xaf\x7f\xff\x06\xdb\xdb\x75\x9f\xb5\xbd\x1d\x6d\xc3\xa9\x70\x79\x15\x1f\xc1\xc5\xef\x6a\xe9\x65\x3b\x77\xae\xb4\x47\xbd\xde\xd8\x4f\x75\x13\x5d\xf4\xea\xb9\xce\xc2\x84\xc5\x98\xea\x3c\xaa\x5c\x57\x5f\xd0\x6d\x98\xda\x98\x7d\xd0\xe4\x86\xce\xd2\x74\x29\x50\x26\x7a\x30\xd8\xb0\x39\x17\x3f\x68\x6c\x3e\x19\xf6\x7b\xaf\x5d\x8f\xa2\xe5\x48\x2b\xbb\x03\xc2\xda\x0a\xc3\xcd\x91\x21\x77\x95\x41\x30\xf8\xb9\x42\x4b\x15\xc7\x20\xcc\xc8\x5c\x81\xcf\x7e\x8b\x0d\xf4\x5e\xbc\x46\x94\x90\x19\xf4\xef\xbc\x24\xc7\x64\x02\x17\xb5\x85\x92\x8f\xf1\x47\x8c\xf5\x56\x7f\xfe\xe9\x85\x45\x9d\x6e\x74\x8e\x08\x17\x57\xdd\x5e\xaa\x13\xdb\x3b\x7e\xf7\x76\xf4\xe1\xec\xd5\xc7\xd1\xd9\xdb\xd3\x6e\x91\x5e\xfd\xb4\x3d\xdb\x8b\xa5\x8e\x7b\x05\xb7\x0e\xcd\x83\xb6\x3a\x90\x51\x50\xa1\xe3\x42\xda\xae\x27\xe7\xde\x8f\x14\x51\x74\x4a\xc5\x85\xc3\xbf\xff\xf9\xb7\xff\xfc\xeb\xaf\x20\x32\x70\xb9\xf0\x89\xf3\x89\x0a\x21\xb5\x7d\x98\xd2\x92\x67\xff\x0d\x00\x00\xff\xff\x60\x73\xd2\x9f\xce\x12\x00\x00")

func DockerTemplatesReadme_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_alpineTmpl,
		".docker/templates/readme_alpine.tmpl",
	)
}

func DockerTemplatesReadme_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_alpine.tmpl", size: 4814, mode: os.FileMode(420), modTime: time.Unix(1576937939, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_rootTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x97\xcf\x6e\xe3\x36\x10\xc6\xef\x7c\x8a\x89\x03\x2c\x6a\x23\x16\x9b\xeb\xc2\x4e\x9a\x6e\xfe\x34\x87\x26\x40\x9c\x6d\x0f\x46\x80\x50\xd4\x58\x62\x43\x93\x2a\x39\xb2\x9b\x5d\xec\x33\xb4\x7d\x80\x62\x2f\x7b\xed\xbd\xcf\xd3\x17\xe8\x3e\x42\x41\x49\xde\x78\x5d\x67\x23\x05\xae\x6f\xb6\x38\xdf\xf0\xf7\x8d\x38\x24\xb5\x0b\x34\x57\x86\xfa\x89\x95\x77\xe8\x20\x16\x1e\x13\xb0\x06\x8e\x74\xae\x0c\xee\xc1\xeb\xb8\x30\x54\x80\x30\x09\x1c\x63\xac\x84\x81\x91\x56\x53\xc6\x06\x39\x08\xad\x52\x33\xec\x48\x34\x84\xae\x73\xc0\x00\x00\x06\x02\x32\x87\x93\x61\x27\x23\xca\xfd\x4b\xce\xc9\x89\x99\xf2\x7d\xa9\x22\x69\xa7\xfc\x97\xaf\xdd\x9b\x3b\x3b\xe3\xcb\x73\x76\x0e\x06\x6a\x9a\x82\x77\xf2\x41\xa5\xa6\x69\xe4\x33\x85\x3a\xf1\x91\xb2\x75\x92\xb5\xea\xc8\xcf\xd2\x0e\xf0\x83\x01\x17\x8f\x10\x48\x6d\x8b\x24\x4a\x9c\x35\x18\x72\x35\x45\x58\x91\x89\x5c\xf1\x58\x24\x29\xae\xc7\xe0\x9e\x04\x15\x3e\xd0\x1c\x86\xd9\x1d\x4e\x3c\xcf\x50\x24\x9e\x8b\xb2\x92\x9f\x18\x07\x3c\x3f\x68\x5e\xbe\x54\x51\x56\xc4\x8f\xd7\x0e\x84\xa6\x61\xa7\x8a\x02\xa1\x35\x38\xd4\x28\x3c\xfa\x06\x55\xad\x54\x3c\xb1\x73\xa3\x6d\x20\x5d\x6b\x8c\x2c\x09\xfd\x74\x95\x5b\x81\x6a\x41\xe8\x69\xc1\xba\x31\xd4\x2a\xed\xff\x42\x4c\x22\x6d\x8e\x49\x22\x7d\xe6\x5a\x6d\xc5\xd4\xba\x7c\xb5\x60\x1b\x6c\xb9\xc3\xcd\xf2\x71\xa1\x37\xfd\x4e\x27\xd6\xdd\x35\x87\x0b\xd1\x8f\x6f\x41\x87\x9e\xee\x35\x0e\xbd\x95\x4a\xe8\x17\x5a\xc4\xa8\x87\xa7\x21\xff\xe6\x70\x3d\x09\xd7\xa2\xad\xcb\xf0\x56\xbc\x23\x12\x6e\x83\xbc\x73\x41\x32\xc3\x36\xc8\x0b\x45\x2b\xea\x1f\x83\x68\x83\xd8\x36\x47\x03\xca\xfb\xa2\xcd\x1e\x5a\xc5\x6f\xa3\xb1\xa4\xb6\xe1\x84\x7e\x1e\x60\xbf\x52\x6f\x83\xb3\x2c\x63\xde\xe4\x70\xff\x9c\x30\x77\x5b\xac\xe2\xb3\xf8\xb6\x58\x44\x69\x0d\x39\x15\x17\x64\xdb\xb4\xd1\xb2\x6a\x1b\x94\x5a\x49\x34\x6d\xf6\xf9\x5a\xf0\x7c\x36\x42\x17\xa9\xa7\xd0\x08\x1d\xc8\x4c\x10\x38\x6b\xa7\xeb\xe0\xaa\xeb\x5c\xf4\xe5\x7c\x4f\xf3\x34\xb8\xe1\x56\x4c\x55\x20\x94\xd3\x6e\xf0\xd2\x5b\x5d\x28\x77\x77\xe1\x3b\x3b\x07\xb2\x50\x78\x64\xec\xd4\x3a\x98\x28\xe7\x09\x0a\x2f\x52\xdc\x83\x7b\x5b\x80\x41\x4c\x42\x44\x5c\x28\x9d\x80\x9a\x8a\x14\xa1\x4e\xc8\xd8\xed\xed\xad\xcf\x50\x6b\x96\x2a\x0a\xfd\x61\x10\xfa\xfd\x04\x73\xca\x86\xfb\xd0\x70\x5d\x30\x99\x40\xc4\xab\xdf\x13\xa5\xd1\xf3\xf1\xf8\x87\x93\xab\xd1\xf9\xe5\xc5\xcd\x0d\x1f\x8f\x2f\x47\x37\x37\xac\x1a\xee\x4b\x3b\xcd\xad\x47\x28\x72\xe8\x27\x61\x76\xc6\xae\x33\x34\x20\x33\x94\x77\x40\x19\xc2\xd5\xc9\xd1\xf1\xf7\x27\xd1\x34\x09\x27\x35\xa0\x90\x19\xcc\xd0\x79\x65\x8d\x8f\x82\xe1\x5d\x38\x9a\x09\xa5\x45\xac\xb1\x32\xe3\xd9\xdb\xb7\x10\x1d\x97\xf9\xcf\xcb\x07\xd7\x61\xf0\xdd\xbb\xb2\x3c\x47\x05\x65\xd6\x79\xc6\x3e\xbe\xff\xfd\x03\xf4\x7a\xb9\x42\x2d\xed\xfe\x7e\xaf\xc7\x7a\x70\x56\x1a\x7b\x09\xe3\x6f\x16\x8f\x6f\xbe\x5a\x63\x7a\x31\xd8\x65\x3d\xb8\x9e\x97\x0b\x27\x68\x8c\x35\x98\x3b\x35\x13\xf2\xfe\x41\x46\xd5\x78\xa9\x5b\x0a\xe8\xc2\xce\xb8\x96\xc2\xa9\xd5\xda\xce\x1f\x24\xab\x2b\xa0\x0a\xe3\x93\x32\x6c\x39\xc9\xe1\xe2\x86\x11\x06\x5e\x2c\x9f\x8a\xdd\x4f\xfe\xea\x17\xb4\x62\xaf\x7e\xba\xd6\x5d\x3d\xb6\x62\xee\x3f\x8a\x65\x63\x0b\xc9\xb3\x4d\xd5\x09\x9a\x18\xf2\x18\x0b\x4f\x0a\x4d\x66\x8b\x37\x48\x2b\xc6\x56\x46\xd7\x1a\x5c\x89\xe9\xb2\x72\x61\x7c\x7c\xff\xe1\x0f\x78\xb5\xd8\x34\x95\x49\x19\x7b\xf8\x67\x8d\xdf\xab\x4f\xdb\xf2\x23\x78\x82\x82\x8a\xf2\x72\xfb\x73\x81\x9e\x3c\x08\x87\x30\x0f\xab\x62\x8a\x3b\x83\xd8\x01\x3f\x38\x45\xd4\x30\x71\x88\xa1\xd7\xaa\xe5\x3c\xae\x33\xe4\x22\xc5\x2f\x95\xfe\xf3\x2b\x6f\x25\xea\x46\x6c\x84\x08\xe3\xdb\xb2\xb3\x3c\x7f\x75\x79\x71\x7d\x75\xfe\xed\xeb\xeb\xf3\x8b\xb3\x68\x9a\xdc\x36\xce\xe7\x39\x39\xc4\xfa\x7b\x74\x6d\xae\x6e\xd9\x69\x09\x92\x50\xba\xea\x31\x18\x65\x76\x1e\x36\x0f\x07\xbe\xc8\x73\xeb\x88\xb1\x33\x35\x43\x10\xf0\xf7\x9f\xbf\xfd\xf3\xd7\xaf\xa0\x26\x40\x99\xf2\x90\x3b\xfb\x13\x4a\x82\x0c\x75\x8e\x49\x90\xec\x30\xf6\x6f\x00\x00\x00\xff\xff\x26\x25\x3a\x78\x5e\x10\x00\x00")

func DockerTemplatesReadme_rootTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_rootTmpl,
		".docker/templates/readme_root.tmpl",
	)
}

func DockerTemplatesReadme_rootTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_rootTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_root.tmpl", size: 4190, mode: os.FileMode(420), modTime: time.Unix(1576936306, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesTravisTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcd\x6e\xdb\x3a\x10\x85\xf7\x7c\x8a\x81\x60\x20\x8b\x0b\x8a\x37\x5d\x74\x21\x20\x8b\xa0\x31\x8a\xa0\x4d\x5c\xd8\x68\xba\x29\x60\xd0\xd2\x58\x62\x43\x91\xca\x0c\xa9\x18\x51\xfd\xee\x45\x24\x25\x56\xf3\xd7\xec\x04\x9d\xef\x1c\x72\x86\x33\x7a\x1b\x90\xd6\x9c\x93\x69\x42\x26\x00\x24\x14\x3e\xbf\x46\x02\x53\xeb\x12\x59\x08\x8e\x85\xcf\x80\xf0\x26\x1a\xc2\x42\x88\x0d\x6e\x3d\xe1\xda\x38\x0e\xda\xda\xc1\x72\xcf\x00\xd5\x20\xb7\xa0\x22\x93\xb2\x3e\xd7\x56\x6d\x8c\x53\x43\x98\x64\x6b\xea\xf7\x93\x92\xd1\xb1\xa7\xde\x90\x47\xb2\x20\xbf\x42\x15\x42\xc3\x99\x52\xa5\x09\x55\xdc\xa4\xb9\xaf\xa7\x8e\xbf\xbe\x09\x2d\x6a\x46\x56\x85\xbf\x75\xd6\xeb\x42\x1d\xa7\x1f\x3e\xa6\xc7\xaa\x30\x1c\xd6\xd6\xb8\xb8\x4b\x83\xa6\xb4\xbc\x03\x29\x7d\x0c\x4d\x0c\x30\xf1\x8f\x5a\x7f\x7a\xd0\x04\xbb\x76\xfb\x9a\x9c\x57\xb5\x2f\xe0\xbf\x1d\x1c\x92\x9f\x55\xfc\x0f\x66\x5a\x6b\xdf\x9c\xba\x7d\x85\x7c\xd2\xb0\x77\x38\xc6\xec\x97\x8c\x98\x57\x1e\x8e\xba\x04\x77\x0d\x92\xa9\xd1\x05\x6d\x93\x2c\x50\xc4\xfd\x11\xfc\x1e\x72\x03\x22\x28\x0c\xf9\x18\xa9\x0a\x8d\xb5\x77\xe9\x2f\xf6\x93\xc3\x19\xa9\x35\x39\x3e\x4c\x0d\x21\x07\x4d\xe1\x71\x4c\xa6\x83\x95\x17\x23\xb5\x35\x16\x59\x25\xb3\xab\xf9\x72\x75\xbe\xb8\x4c\x7a\xf5\xfc\xe2\xf4\xf3\xfc\x24\xd9\xfd\x4f\x77\xd7\xbe\x55\xe1\xd6\xb8\x90\xcd\xba\x91\x51\x3f\x95\x92\xfb\x44\x08\x74\x6d\xd6\x75\xa4\x5d\x89\x30\x6b\xb5\x85\xec\x04\xd2\x2b\x24\x36\xde\xf1\x7e\xdf\x47\x8d\x9e\x93\xae\xeb\x91\xf4\xcc\x10\xbc\x29\x29\x6d\x1b\xe3\xf0\x2d\xe2\xbe\x9f\x5d\x87\xae\xd8\xef\x85\xb0\xda\x95\x51\x97\x98\xc1\x46\x73\x25\xc4\xf3\xf5\x19\x5e\xac\x1d\xee\x35\x5d\xab\x4d\x34\xb6\x00\x29\xf9\x26\x6a\xae\x40\x06\x48\x66\x7d\xe9\x09\xa4\x87\xae\x4e\x43\x06\xc7\x03\xf5\x94\x01\x8a\x0e\x64\x30\x87\x18\x59\xbd\xb0\xc6\x93\x3f\xd6\x97\xc6\x81\x8c\x30\x3b\x5b\x7c\xfa\x32\x5f\xae\xbf\xaf\xe6\xcb\xcb\xd3\x8b\x39\xc8\xe6\xf1\xdf\xb7\xd3\xd5\xea\xc7\x62\x79\x36\x35\x36\x91\xab\xc3\x3d\xc4\xf8\xf2\x9c\x8d\xfa\x9f\x00\x00\x00\xff\xff\x8c\x58\x8b\xbc\x4a\x04\x00\x00")

func DockerTemplatesTravisTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesTravisTmpl,
		".docker/templates/travis.tmpl",
	)
}

func DockerTemplatesTravisTmpl() (*asset, error) {
	bytes, err := DockerTemplatesTravisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/travis.tmpl", size: 1098, mode: os.FileMode(420), modTime: time.Unix(1576921076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".docker/templates/docker-compose.tmpl":         DockerTemplatesDockerComposeTmpl,
	".docker/templates/docker-entrypoint.tmpl":      DockerTemplatesDockerEntrypointTmpl,
	".docker/templates/docker-sync.tmpl":            DockerTemplatesDockerSyncTmpl,
	".docker/templates/dockerfile_alpine.tmpl":      DockerTemplatesDockerfile_alpineTmpl,
	".docker/templates/dockerfile_debian-slim.tmpl": DockerTemplatesDockerfile_debianSlimTmpl,
	".docker/templates/dockerfile_ubuntu.tmpl":      DockerTemplatesDockerfile_ubuntuTmpl,
	".docker/templates/dockerignore.tmpl":           DockerTemplatesDockerignoreTmpl,
	".docker/templates/env.tmpl":                    DockerTemplatesEnvTmpl,
	".docker/templates/makefile.tmpl":               DockerTemplatesMakefileTmpl,
	".docker/templates/readme.tmpl":                 DockerTemplatesReadmeTmpl,
	".docker/templates/readme_alpine.tmpl":          DockerTemplatesReadme_alpineTmpl,
	".docker/templates/readme_root.tmpl":            DockerTemplatesReadme_rootTmpl,
	".docker/templates/travis.tmpl":                 DockerTemplatesTravisTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".docker": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"docker-compose.tmpl":         &bintree{DockerTemplatesDockerComposeTmpl, map[string]*bintree{}},
			"docker-entrypoint.tmpl":      &bintree{DockerTemplatesDockerEntrypointTmpl, map[string]*bintree{}},
			"docker-sync.tmpl":            &bintree{DockerTemplatesDockerSyncTmpl, map[string]*bintree{}},
			"dockerfile_alpine.tmpl":      &bintree{DockerTemplatesDockerfile_alpineTmpl, map[string]*bintree{}},
			"dockerfile_debian-slim.tmpl": &bintree{DockerTemplatesDockerfile_debianSlimTmpl, map[string]*bintree{}},
			"dockerfile_ubuntu.tmpl":      &bintree{DockerTemplatesDockerfile_ubuntuTmpl, map[string]*bintree{}},
			"dockerignore.tmpl":           &bintree{DockerTemplatesDockerignoreTmpl, map[string]*bintree{}},
			"env.tmpl":                    &bintree{DockerTemplatesEnvTmpl, map[string]*bintree{}},
			"makefile.tmpl":               &bintree{DockerTemplatesMakefileTmpl, map[string]*bintree{}},
			"readme.tmpl":                 &bintree{DockerTemplatesReadmeTmpl, map[string]*bintree{}},
			"readme_alpine.tmpl":          &bintree{DockerTemplatesReadme_alpineTmpl, map[string]*bintree{}},
			"readme_root.tmpl":            &bintree{DockerTemplatesReadme_rootTmpl, map[string]*bintree{}},
			"travis.tmpl":                 &bintree{DockerTemplatesTravisTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
