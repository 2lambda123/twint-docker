// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// .docker/templates/contributors.tmpl
// .docker/templates/docker-compose.tmpl
// .docker/templates/docker-entrypoint.tmpl
// .docker/templates/docker-sync.tmpl
// .docker/templates/dockerfile_alpine.tmpl
// .docker/templates/dockerfile_debian-slim.tmpl
// .docker/templates/dockerfile_ubuntu.tmpl
// .docker/templates/dockerignore.tmpl
// .docker/templates/env.tmpl
// .docker/templates/makefile.tmpl
// .docker/templates/readme.tmpl
// .docker/templates/readme_alpine.tmpl
// .docker/templates/readme_root.tmpl
// .docker/templates/travis.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DockerTemplatesContributorsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func DockerTemplatesContributorsTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesContributorsTmpl,
		".docker/templates/contributors.tmpl",
	)
}

func DockerTemplatesContributorsTmpl() (*asset, error) {
	bytes, err := DockerTemplatesContributorsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/contributors.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1577122364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerComposeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x10\x5d\x81\x9e\xfc\x11\x14\xc3\x3a\x01\x39\xa4\x4b\x0e\xdd\x86\x24\x68\x82\xee\x68\xa8\x36\xd3\x0a\x91\xa5\x80\x92\xdd\x74\x86\xff\xfb\x20\xcb\x76\x93\xac\xcd\x76\x51\x42\xf2\xf1\xe9\x3d\xd2\x0a\xc3\x30\xa8\x90\x8c\xd0\x8a\xc1\xd5\x75\xf4\xe5\x2a\x30\x48\x95\xc8\xd0\xb0\x20\x00\xb0\x2f\x42\x59\x16\x00\x00\x88\x82\x3f\x21\x83\x7d\x42\xbf\xb7\xba\x8a\x7d\xa5\xae\x21\x9a\x0a\x82\xa6\xa9\x6b\xb1\x81\xe8\x96\x1b\x6c\x9a\xb0\xae\x51\xe5\x2e\xe7\x33\xd0\x34\x2d\xc5\x63\x29\x64\xee\xd9\x00\x32\xad\x2c\xee\x2d\x83\xa8\x4b\xe4\x3a\xdb\x22\x6d\x84\x44\x06\xd3\xe1\x7f\xd0\x63\xb9\x50\x48\xa9\xe2\x05\x32\x2f\x2b\xcc\xa4\x68\xab\x95\x96\x65\xe1\x04\xbb\x20\x84\xcb\xe5\xaf\x69\x27\x2f\xd6\x3b\xeb\xff\xc6\x39\xb7\x7c\x70\x14\x1a\xe4\x94\x3d\x7f\x6c\xac\x07\x48\x6e\xd1\xd8\x33\x1a\x3c\xae\x05\xec\x34\xd9\x41\xc4\x75\x92\x24\xcc\x1d\x6d\x8c\xaa\x12\xa4\x55\x81\xfd\x30\x43\x98\x2f\xa6\xb3\x74\x36\x7f\x18\xef\x48\xe7\x65\x66\x85\x56\xad\x3c\x4d\xe1\x8e\x44\xa5\xf7\xaf\xec\xcc\xb5\x56\x53\x87\x3a\xb4\xe0\x26\xc8\x9f\x30\x3e\x24\x39\x70\x70\x24\xf0\xe2\x6b\xf2\x39\x61\xee\xb8\x80\x4f\xb0\xd6\x04\x3b\xea\xe9\x7c\x75\xe4\xaa\xa3\xbe\xea\x74\x90\x96\x2d\x49\x0f\xba\x19\x8d\x6e\x98\x3b\x1c\x68\xe9\x2f\x04\x70\x36\x50\x72\x63\x45\xf6\xce\x98\xfd\x96\xa3\x0e\x10\x65\x3a\x3e\xc2\x1e\x47\xec\xb2\x9e\xfd\x9c\xac\xd6\x77\xdf\xd2\x87\xd9\xfd\xea\x6e\x31\x6f\xce\x0c\xa5\x6b\xfd\x68\xe2\x4a\xe7\x18\x39\xfc\xf8\xe8\x8e\xae\x9a\xc9\xd2\x58\xa4\x48\x28\x61\x05\x97\x69\xc1\x5d\x98\xba\x26\x73\xb6\xa1\x65\xf4\xae\xc2\x2e\xd7\x21\x1e\xb5\xb6\xc6\x12\xdf\x45\x05\x16\x9a\x5e\x53\xa9\xb3\xed\xd8\x52\x89\xfd\x00\x67\xab\xf4\xfb\xe4\x61\x92\x2e\x96\xeb\xd5\xf8\xcd\xeb\x90\x6b\x2e\x5a\x64\x29\x45\x21\xfa\xd5\x01\x14\x58\x38\xa6\x3e\x04\x30\x7a\x63\x19\x84\xa3\x21\xf1\xcc\x29\x1f\x12\x27\xcf\x03\x8d\x7b\x0a\xc9\x88\xc5\xa5\xa1\xd8\x3c\x73\xc2\x93\x15\xb4\x4f\xe5\xaf\x0f\xe6\x4d\xde\x72\x71\xbf\x6e\xd8\x49\xec\xb6\xbe\x15\x8f\x5c\xf1\x7f\xac\xdb\x83\xba\x1f\x76\x59\xff\xb8\xbb\x9d\xcc\x27\xff\xb3\x5f\xdf\xf2\x9e\xb2\x8e\xa3\x17\x76\x18\x06\xc1\x81\xff\xc1\x7b\xdb\x99\x93\xa8\x90\x18\x48\x9d\x71\x19\x04\x0a\xed\x8b\xa6\x6d\x0b\xcc\x71\xc3\x4b\xd9\x7d\x3a\xb8\xb7\x48\x8a\xcb\x7e\xe0\x5e\x93\x7a\x09\x5b\x59\x7f\x02\x00\x00\xff\xff\x2d\xcb\x66\x7d\x43\x05\x00\x00")

func DockerTemplatesDockerComposeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerComposeTmpl,
		".docker/templates/docker-compose.tmpl",
	)
}

func DockerTemplatesDockerComposeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerComposeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-compose.tmpl", size: 1347, mode: os.FileMode(420), modTime: time.Unix(1577122364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerEntrypointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\x2a\x29\xcf\xcc\x2b\x51\x50\x71\xe0\x02\x04\x00\x00\xff\xff\xbd\x2f\x25\x36\x15\x00\x00\x00")

func DockerTemplatesDockerEntrypointTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerEntrypointTmpl,
		".docker/templates/docker-entrypoint.tmpl",
	)
}

func DockerTemplatesDockerEntrypointTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerEntrypointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-entrypoint.tmpl", size: 21, mode: os.FileMode(420), modTime: time.Unix(1577122364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerSyncTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\xb1\x6a\xc3\x40\x0c\xc6\xf1\xfd\x9e\x42\x1c\x85\x9b\xdc\xba\x1d\x0f\xba\x94\x3e\x80\xb7\x8e\xe6\xea\x28\x97\x83\x20\x19\x49\xb6\x63\x42\xde\x3d\xc4\x86\x38\xe0\x4d\xfc\xfe\x82\x6f\x44\xd1\xc2\x14\xc1\x7f\x79\xc7\xbd\x15\x26\x8d\x0e\x60\x44\xf9\x67\xc5\x08\x26\x03\x3a\xa7\x33\x75\x8b\xdb\x54\xc8\x1e\x07\x80\x4a\x17\xe1\xed\xda\xfc\xfd\xde\x3e\x16\x5e\x75\xa6\xae\x55\x93\x64\x98\xe7\x08\x81\x92\x95\x11\x5b\xd6\x4b\xd8\xfa\xa0\x28\xe5\x10\xe1\xb3\xae\xeb\x4d\xb3\xf0\xd0\xef\x39\x49\xd6\x75\xb1\x02\x5f\xf5\x82\x47\x14\x20\x9c\x50\xfc\x53\x4b\x26\x16\xfc\x0e\x4d\xb2\x13\xbc\xe7\x62\x61\xdf\x7e\xf0\xcc\xd3\xcb\xc3\x3d\x00\x00\xff\xff\x84\x17\x8f\xff\xfb\x00\x00\x00")

func DockerTemplatesDockerSyncTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerSyncTmpl,
		".docker/templates/docker-sync.tmpl",
	)
}

func DockerTemplatesDockerSyncTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerSyncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/docker-sync.tmpl", size: 251, mode: os.FileMode(420), modTime: time.Unix(1577122364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x61\x6f\xdb\x36\x10\xfd\x3c\xfe\x8a\x83\x62\xb4\x1f\x3a\xda\x1b\x32\x14\x43\x36\x0d\x73\x12\xaf\x33\x96\xc8\x81\xec\x38\x28\xd6\x21\xa0\xc9\xb3\xc5\x45\x22\x09\x92\x52\xe2\x1a\xfe\xef\x83\x28\x39\x56\x3c\x17\x29\x50\x7d\x11\x79\x77\x24\xdf\x3d\xbe\xc7\x3f\xd2\xc9\x35\x6c\x36\xd0\x9f\x7a\xb6\xc2\xfe\x79\x29\x73\xd1\x3f\x67\x0e\x61\xbb\x3d\x3b\x8c\xcf\xd8\x0a\xb6\x5b\x18\x4e\x61\x51\xcf\x09\x19\xa6\x1f\x60\x76\x37\x4e\x66\xf7\xf3\x51\x3a\x1d\x4f\x92\x78\xb3\xe9\xcf\xd1\x3a\xa9\xd5\x76\x4b\xc8\xdd\x24\xfd\xeb\x72\x9c\xc2\x40\x1b\x3f\x60\xc6\x10\x72\x02\x63\xe5\x3c\xcb\x73\xb8\x59\xfb\x4c\x2b\x60\x4a\x00\x3e\x79\xb4\x8a\xe5\x20\xd0\xa0\x12\xa8\xb8\x44\xf7\x3d\x48\xc5\xf3\x52\x48\xb5\x82\x0c\x99\x40\xeb\x42\xf1\x87\x8b\x0b\x92\xde\x26\xc0\xcc\x03\x30\x21\x80\x52\xa5\x29\x67\x3c\x43\x30\x61\xcb\xd3\xdd\x9f\x0a\xac\xc0\xac\x4f\xa9\x91\x06\x72\xb9\x58\x2e\x65\xfb\x0b\x99\xa2\x74\x79\x18\xac\x38\x87\x95\xf4\xc0\x19\xe5\x68\xbd\x5c\x4a\xce\x3c\x3a\xd0\x06\xd5\x22\x67\xee\xa0\xfa\xdd\xbb\x17\x6d\x48\x83\xaa\x0a\x88\x8c\x34\xa7\x20\xdb\xb8\x69\xe2\xe4\x04\x2e\x2c\x32\x8f\xc0\xa0\x92\xd6\x97\x2c\x07\x54\x95\xb4\x5a\x15\xa8\x7c\xe8\x88\x71\x2f\xab\xba\x44\xfa\x66\x9f\xb6\x0d\x5a\x40\x85\xaa\x6a\xd8\xab\x47\x64\x94\xcc\xe1\x66\x38\xfb\x33\x8e\x9e\x63\x83\x85\x54\x67\xbd\x3a\x18\xc1\x27\xf2\xdd\x7c\x9c\xce\x6e\x87\x57\xf7\xa3\x64\xde\x29\x8a\xba\x88\xbb\x24\x83\x54\x5e\x83\xcf\xf0\x28\xb8\x47\xe9\xb3\x6e\x83\x81\xa4\x5c\x2b\x04\x4a\x05\x1a\x9f\xc5\x3f\x02\x5d\x40\xf7\xce\x21\xf3\xde\xb8\xb3\xc1\x60\x25\x7d\x56\x2e\xfa\x5c\x17\x03\xff\x28\x95\x37\x56\xff\x8b\xdc\x37\x93\x67\x41\xd4\x90\xdf\xbc\x01\x2e\x0e\x23\x2f\xb8\xa4\xb4\x34\x2b\xcb\x04\xd6\xe1\x63\x05\xbc\xd1\xd2\x91\x8c\x2a\x0b\xb3\x3e\x96\xe8\x13\x72\xa0\xfd\xb4\x54\x5e\x16\x78\x44\xfd\xbb\x4c\xa3\x7f\x72\x3d\x1c\x27\xb3\xe1\x38\x19\xa5\x61\xf5\x35\x93\xca\x33\xa9\xd0\xd6\xc9\xe0\x89\x9d\x1b\x7a\x9b\x76\x74\x46\xa3\x2e\x4b\xd1\x36\x94\x9d\xdf\x8e\xaf\x2e\xc3\x28\x99\xdc\x75\xa4\x62\x9b\xf3\xa0\x74\x68\x03\xf1\xc5\x83\x90\x16\xa8\x09\x2c\xb5\xdd\x30\x21\xea\x3c\xd0\x4b\x68\x38\xa5\xd9\x9e\x44\xea\xa0\x16\xc6\xc0\x65\xf0\x89\x40\x5d\xee\xca\x5d\x19\x87\xb7\x1d\xbe\x7f\xd9\x6f\x2e\x98\x67\x6f\x5f\xb3\xe8\x0e\xdb\x0b\x15\x69\x95\xaf\x5f\x33\x65\x6b\xc0\x9d\xa9\xea\xb9\xf3\x82\x37\x6e\x9a\x3e\x4a\xcf\x33\xf0\x3a\xf4\x0c\x5c\x2b\x8f\x4f\x9e\xdc\x4e\x47\x69\x03\xfb\xe5\x53\x12\x42\x83\x1a\x6f\x60\x4d\x9b\xf5\x17\x35\xbc\xb4\xba\x08\x49\x63\xb1\x92\xba\x74\x20\x0b\xb6\x42\x72\x31\xb9\xf9\x08\x94\xd6\xe9\x38\xbc\x66\x7b\x9b\x75\x0c\x47\x4e\x60\xb8\x73\xe7\x17\x4e\xf8\x16\x53\x5e\x0d\xcf\x47\x57\xa0\x58\x81\x71\x14\x7a\xaa\xcb\x21\x7c\x55\xa3\x95\x38\xea\xb5\x12\xda\xa7\x02\xdc\x38\xea\x05\xf9\xec\xc3\xcc\xf2\x4c\x7a\xe4\xbe\xb4\x18\x47\x4f\x3f\xbf\xbf\x7f\xff\xd3\xc1\xa2\x7b\xc1\x3c\xc6\x51\x2f\x99\xdc\x75\x4f\x52\x42\xdb\x16\x40\x6b\xd3\x7d\xb6\x78\x56\x77\x1c\x3d\xfd\x60\x3f\x3f\xe8\x0a\x7e\x6d\x07\xbf\x1b\xab\xbd\x56\x05\x93\x79\x6d\xf4\xdf\xf6\xab\x4a\x9b\xc7\xd1\x57\x3d\x05\x54\x68\xfe\x80\x76\xbf\xd4\x95\x45\xc1\xec\x3a\x8e\x2e\x43\x42\x7e\x46\xd1\x2a\xf7\x7f\xd8\x04\x3a\x6e\xa5\xf1\x81\xa7\xd7\xcb\x2b\xee\xa8\x5f\x1b\x8c\xa3\x95\x3c\x08\x7f\x03\xde\x7a\xb9\xc5\xe5\xb1\x8b\x12\xd2\x79\x2b\x17\x65\x0d\x90\x3a\xae\xeb\xa3\x4d\xb9\xc8\x25\x8f\x08\x19\x25\xb3\xf4\xe3\xcd\x64\x9c\xcc\xe0\xef\xf6\xf2\xff\xf9\x2f\x00\x00\xff\xff\xe6\x8c\x64\x5d\x8e\x07\x00\x00")

func DockerTemplatesDockerfile_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_alpineTmpl,
		".docker/templates/dockerfile_alpine.tmpl",
	)
}

func DockerTemplatesDockerfile_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_alpine.tmpl", size: 1934, mode: os.FileMode(420), modTime: time.Unix(1577122364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_debianSlimTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x51\xcb\xda\x30\x18\x85\xef\xf3\x2b\x5e\x1c\x78\x31\x49\x33\xf0\x62\x20\x73\x28\x5b\x37\xca\x66\x2b\x59\x55\x64\x8e\x11\xdb\x2c\xcd\x6c\x93\x90\xbc\x75\x8a\xf8\xdf\x87\xd5\x8f\x4f\xbd\xca\x39\x79\x08\x3c\x27\x5f\x78\x36\x03\x77\xc4\xca\x9a\xd1\x30\x7a\x4f\x43\xad\x1b\x1a\xd0\x4b\x2c\x2a\x42\x66\xd3\x24\xcd\xa7\x49\x1a\x73\x38\xbc\xf3\x87\x9d\xdd\xc3\x87\x5b\x98\x38\x6f\xd1\x9a\x46\xe8\x3a\x2a\x6c\xf3\x91\x90\x29\xff\x0a\xf9\x2a\x49\xf3\xdf\xcb\x98\xff\x48\xb2\x74\x7c\x3a\x45\x4b\xe9\x83\xb6\xe6\x7c\x26\xe4\x53\x36\x5f\x43\x69\x8b\x9d\xf4\x54\x1a\xf4\x47\x67\xb5\xc1\x28\x54\xc0\x1e\x2a\xe1\x8b\x14\x8a\xaa\xb1\x25\x0c\x0e\xcf\xac\x83\x1b\x22\x1c\x52\x25\x11\x5a\x57\x0a\x94\xd0\xef\xdf\xdd\x69\x13\x50\xd4\x35\xd0\x23\x6c\x88\xd2\xf8\xf2\xc6\x69\x37\x7c\x85\xb4\x75\xca\x8b\x52\x02\x95\xa0\x34\x0e\x2a\x44\x17\x46\x8c\x29\x8d\x55\xbb\xbd\x4c\x62\xf8\x4f\x1b\x74\xde\xfe\x95\x05\x5e\x4b\xa4\x34\x4e\xee\x57\xbd\x91\x4a\x8d\x3b\xf4\x6c\x56\xd4\x52\x18\x10\x2d\xda\x6b\xea\x14\x7d\x03\xd4\xff\x01\xb6\x17\x9e\xd5\x7a\xcb\x84\x43\x56\xeb\x80\x81\xbd\x05\x86\x8d\xbb\x1c\x17\xd6\x45\x42\xe2\x34\xe7\xeb\x79\x96\xa4\x39\xfc\xec\x3d\x7e\x44\xef\x17\x59\x66\xdf\x17\xb3\x18\xae\x66\x64\x95\xf1\x6f\x9f\x13\x0e\xcc\xba\x9b\x2c\x2b\x05\x0a\xf2\x3f\x00\x00\xff\xff\xd3\x2b\x6a\xe0\xe1\x01\x00\x00")

func DockerTemplatesDockerfile_debianSlimTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_debianSlimTmpl,
		".docker/templates/dockerfile_debian-slim.tmpl",
	)
}

func DockerTemplatesDockerfile_debianSlimTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_debianSlimTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_debian-slim.tmpl", size: 481, mode: os.FileMode(420), modTime: time.Unix(1577122364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerfile_ubuntuTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x5d\x8e\xd3\x30\x14\x85\xdf\xbd\x8a\xab\x41\x1a\x01\xa3\xc4\x8c\xe6\x89\x11\x83\xa6\x82\x00\x11\x34\xa9\xdc\xb4\x55\x45\x11\x72\x12\xe3\x18\x12\xdb\xb2\xaf\x81\xb4\xea\x82\x58\x07\x1b\x43\x4d\x8b\xfa\xf3\xe4\x7b\xcf\x67\x59\xdf\xf1\x3b\x96\x8f\x21\x94\x41\x63\xb8\xbf\x7d\x19\xdf\xbe\x20\x64\x3c\x4a\xb3\x62\x94\x66\x09\x83\xe9\xdf\x3f\x25\xf7\xa8\x84\x86\x0f\x26\xac\x05\xc2\xd3\xde\x98\xb5\x32\x71\x65\xba\x67\xf0\xca\x8b\x03\x7e\x3c\xc6\xaf\x09\x19\xb1\xf7\x50\x2c\xd2\xac\xf8\x3a\x4f\xd8\x34\xcd\xb3\x87\xcd\x26\x9e\x0b\xe7\x95\xd1\xdb\x2d\x21\x6f\xf2\xc9\x12\x6a\x53\xfd\x10\x2e\x12\x1a\x5d\x6f\x8d\xd2\x18\xfb\x06\xe8\xd9\x4a\xd8\x2c\x83\xaa\xe9\x4c\x0d\x37\xbf\x2f\xd9\x00\x57\x84\x5b\x8c\xa4\x40\x08\xb6\xe6\x28\xe0\xfa\xfa\x24\x53\xda\x23\x6f\x5b\x88\x7a\x58\x11\xa9\x10\x56\xc4\xf6\xd8\x18\x7d\x17\x59\x65\xff\xbf\x60\x95\xbd\x3b\x5e\x8d\x82\x95\x8e\xd7\x02\x22\x01\x52\xe1\x4d\x83\x68\xfd\x3d\xa5\x52\x61\x13\xca\x5d\x41\x8a\xbf\x94\x46\xeb\xcc\x77\x51\xe1\x7e\x89\xa5\xc2\xc7\xd3\x8e\x4f\x84\x94\x0f\x03\xba\xf4\xac\x5a\xc1\x35\xf0\x80\x66\x3f\x0d\xc2\xae\x83\xc8\x7d\x03\xfa\x93\x3b\xda\xaa\x92\x72\x8b\xb4\x55\x1e\x3d\x7d\x0e\x14\x3b\xbb\x3b\x76\x6c\x18\x09\x49\xb2\x82\x2d\x27\x79\x9a\x15\xf0\xf9\xea\xfc\x5b\xae\xbe\x90\x79\xfe\x69\x36\x4e\x60\x6f\x46\x16\x39\xfb\xf8\x36\x65\x40\x8d\x3d\xc8\xd2\x9a\x23\x27\xff\x02\x00\x00\xff\xff\xe9\x63\x67\x16\xf9\x01\x00\x00")

func DockerTemplatesDockerfile_ubuntuTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerfile_ubuntuTmpl,
		".docker/templates/dockerfile_ubuntu.tmpl",
	)
}

func DockerTemplatesDockerfile_ubuntuTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerfile_ubuntuTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerfile_ubuntu.tmpl", size: 505, mode: os.FileMode(420), modTime: time.Unix(1577122364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesDockerignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xce\xc9\xcc\xe5\x4a\xcc\x29\xc8\xcc\x4b\xe5\xf2\x4d\xcc\x4e\x4d\xcb\xcc\x49\xe5\x4a\xc9\x4f\xce\x4e\x2d\xd2\x4d\xce\xcf\x2d\xc8\x2f\x4e\xd5\xab\xcc\xcd\x41\x17\xd2\x02\x0b\xea\xa5\x67\x96\x80\x09\x7d\x08\xa9\x05\xa5\xb4\xb8\x00\x01\x00\x00\xff\xff\x78\xa9\x74\xfb\x57\x00\x00\x00")

func DockerTemplatesDockerignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesDockerignoreTmpl,
		".docker/templates/dockerignore.tmpl",
	)
}

func DockerTemplatesDockerignoreTmpl() (*asset, error) {
	bytes, err := DockerTemplatesDockerignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/dockerignore.tmpl", size: 87, mode: os.FileMode(420), modTime: time.Unix(1577122364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesEnvTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x6b\x83\x30\x18\x86\xef\xfe\x8a\xd0\xee\xaa\xd3\x42\x27\x1d\xe4\xf0\x69\x83\x64\xb5\x2a\x26\xba\xde\xc4\x39\xc7\x02\xd3\x43\x23\x74\x10\xf2\xdf\x87\x2e\x5a\xe9\xed\x7b\x9f\x97\xf7\xe1\xdb\x22\x7e\x13\xfd\x60\xf1\x77\x9a\xf0\xaa\x0c\x59\x55\xe4\x31\x56\x0a\x39\x65\x23\x8b\x3c\x46\x5a\x9b\x8e\x43\x34\xf1\xa3\xb8\x22\xad\x95\x12\x5f\xc8\x09\x6a\xd9\x6a\x6d\x2b\xd5\xf6\x9f\x23\xfb\x27\xf7\x4d\x49\x72\x46\xd3\x64\xb5\x33\x45\x02\x67\xc2\x32\x08\xc9\x54\xa5\xb7\xbe\x5d\x95\x01\x30\x82\x87\xd5\x5b\xf4\x0c\x11\xc1\x4f\xea\x61\xab\x9f\x67\x34\x2e\xf4\xeb\x9c\x38\x44\xb3\x2a\xa2\x47\x7c\xf0\x7d\x93\x0a\x93\xac\x2d\x22\x3f\xb5\x1c\x44\x23\xdb\xfa\xda\x7c\x5b\x24\x06\xc6\x69\xb8\xfc\xeb\x3b\xae\xe3\x2d\x34\x4b\x73\x8e\x0f\x3b\xd7\x5d\xc8\x1b\x94\x50\xa5\x19\x67\x78\x63\x5f\x3a\xb9\xf7\x76\x1d\xb2\x2f\xdd\xef\x78\x6c\x46\xfd\x49\x7c\xd4\x7d\x6d\x9d\x68\x00\x09\x3c\x68\x0d\x9c\xac\xfb\x17\xd7\xfb\x0b\x00\x00\xff\xff\xd4\x69\x13\x70\x83\x01\x00\x00")

func DockerTemplatesEnvTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesEnvTmpl,
		".docker/templates/env.tmpl",
	)
}

func DockerTemplatesEnvTmpl() (*asset, error) {
	bytes, err := DockerTemplatesEnvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/env.tmpl", size: 387, mode: os.FileMode(420), modTime: time.Unix(1577122364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x5b\x6f\xda\x30\x14\x7e\x8e\x7f\xc5\x27\x91\x28\x8d\x26\x27\x94\x49\x5d\x6b\x0d\xa9\x57\x0d\xa4\x35\x54\x2d\x5d\xd5\x3e\x6c\x32\x89\x21\x11\xb9\xc9\x36\xb0\x0d\xf8\xef\x93\x1d\x18\x68\xea\x5e\x4e\x7c\x2e\xdf\xe5\xc4\x1e\xde\x5f\x7d\xb9\x03\xeb\xe3\x67\x57\xfe\x9e\xd7\xcb\x48\xaf\xf2\x4a\xd3\xb4\x4e\xe6\x42\x92\x6f\x77\x8f\x4f\xc3\x51\xcc\xfa\x70\x4f\x54\x26\x8a\x02\x33\x29\x1a\x8c\x5f\x86\xf1\xf8\xc7\xae\x89\x5b\x3b\x3b\xcd\x0b\x81\x0d\xf8\x6a\x0e\x7f\xdd\xc8\xbc\xd2\x70\x7b\x5b\x1f\x1b\x24\x0b\x0d\x9a\xc2\xef\xfb\xa0\x53\xf4\x02\xb2\xa7\xc5\x31\x6f\xae\x91\x0a\x95\xc8\x7c\x22\x30\xb8\xbb\xba\x0d\xc8\xf5\xe3\x55\x7c\x33\xf8\x77\x48\x8a\x25\x6d\xb8\x54\x02\x94\xf2\xc9\xc4\xa4\x52\x4c\x2d\x04\x1b\x68\x89\x08\x34\x20\xf1\xe8\xa5\xbf\x47\x8d\xdf\xfa\xcf\xe3\x1b\xa4\x5c\x0b\x7c\xf0\x5e\xa9\x57\x52\x2f\x1d\x7b\x03\xe6\xdd\x33\xef\xe9\x2d\x20\xd7\xcf\xc3\xaf\xb7\x46\xa7\x4b\x48\xa7\x03\x2d\x94\x76\x1c\xe6\x98\x6f\x48\x4c\x64\xc4\xd1\x72\x21\x6c\x77\x29\xa4\xca\xeb\xca\x61\x4e\x9a\xab\xa6\xe0\xbf\xf6\x95\x90\xec\x0e\x8c\x38\x97\x22\xc9\x6a\xb8\x27\xbb\x45\x03\x8b\xcc\x4b\x3e\x13\x86\x78\xb2\xc8\x8b\xb4\x4d\xc1\xab\x14\x9a\xcf\xa0\x33\x51\x86\x24\x7c\x18\x8c\xe2\x57\xd6\xf6\x88\x8d\x86\xad\xbd\x0d\xb4\x38\x4a\xed\x97\x72\x39\x43\xbb\x66\x3c\x7a\x09\x40\x35\xdc\xb5\xbd\xcd\x2d\x73\xd7\x3b\xe1\x2d\xc2\x03\xdc\xc8\xbc\x37\xf2\xb7\x56\x70\xb3\xac\xf5\xda\x2c\x54\x46\x5b\xc3\xcc\x31\x09\x76\x24\xb6\x76\x30\x7a\x98\x23\x87\xe3\x91\x65\x0b\x7d\x47\xf4\x7f\x13\x47\x16\x32\x51\x34\xe6\x6f\x3d\xd8\xb7\x94\xd4\x65\xc9\xab\x54\xd9\xf2\x41\xdf\x64\xc4\x04\x30\xdc\xf3\xb9\x30\xaf\x90\x38\x97\x4a\xa4\xa0\x15\x7c\x15\x7d\xef\x74\xa2\xa8\xf1\xe1\x7e\x26\xa4\x83\x4c\xeb\x46\xb1\x28\x52\x9a\x27\xf3\x7a\x29\xe4\xb4\xa8\x57\x61\x52\x97\x11\x8f\xce\x7a\x9f\x3e\x9e\x77\x2f\xa2\xd3\xf3\xde\xd9\x69\xf7\x82\x78\x66\x0d\x46\xfe\x04\x00\x00\xff\xff\x7f\x1a\xa3\x23\x21\x03\x00\x00")

func DockerTemplatesMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesMakefileTmpl,
		".docker/templates/makefile.tmpl",
	)
}

func DockerTemplatesMakefileTmpl() (*asset, error) {
	bytes, err := DockerTemplatesMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/makefile.tmpl", size: 801, mode: os.FileMode(420), modTime: time.Unix(1577122364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5d\x6e\x23\xc7\x11\x7e\xf6\x9c\xa2\x56\x34\x60\x52\x50\x73\x28\x69\x05\x48\x0c\x57\x88\x2d\x65\x37\x8b\x18\xb6\xb3\xa2\x91\x07\x41\x80\x7a\x66\x6a\x38\x6d\xf6\x74\x8f\xbb\x7b\x48\xd1\x82\x72\x85\x24\x07\x08\xfc\xe2\xd7\xbc\xe7\x3c\xb9\x40\x7c\x84\xa0\xba\x87\xe2\x8f\xb8\x59\x69\x37\xa1\xf6\x45\x9c\xea\xea\xaa\xfa\xea\x6f\x6a\x6a\x5b\xe0\xa6\x42\x39\x96\xe9\x74\x8c\x26\x8a\x06\x2f\x18\x83\xa1\x3e\x03\xeb\xb8\x71\xc0\xd8\x69\xd4\x6a\xc1\x90\x27\x12\x41\xe7\x70\xa6\x95\x43\xe5\x6c\xb4\xdf\x85\xcb\xdf\xeb\x29\x38\x0d\xb5\xc5\xab\x76\xab\xd0\x53\xe6\x34\xab\x2d\x76\x22\x00\x3a\x7e\x2d\x8c\x75\xcd\x69\x4e\xbf\xe7\x87\x10\xce\xcf\x0c\x72\x87\xc0\x15\x70\x29\xb8\xbd\x6a\xb7\x52\x4f\x61\x5c\x31\x4f\xe9\x78\x2d\xe7\xde\x32\x76\xa6\xcb\x4a\x7b\x59\xc1\x54\x96\x06\xc2\x92\xc0\xdf\x49\x6e\x9d\x48\x2d\x72\x93\x16\xc0\x55\x06\x7f\x10\x09\x57\xfc\xaa\xdd\xc2\xe5\x23\xc6\x55\xc6\xc6\xfe\x68\xe9\xf6\x50\x1b\xa8\x8c\xbe\x99\x5d\xb5\x5b\x4e\x1b\xe6\x7f\x2f\x4b\xbf\xc1\xb4\x76\x08\x43\xf2\x17\xa4\xba\x2c\xb9\xca\x48\x74\xa0\xb3\xe0\xc7\x86\xbe\x72\x8f\x97\x95\x44\x4b\xee\x5b\xbe\x15\xa8\x4c\xe7\xcb\x77\x3c\x60\xee\xbc\x37\x32\xfa\x1b\x7c\xf0\x65\xed\x0a\x6d\x88\xc8\xc3\xaf\x40\xfe\xf5\xe7\x5f\xfe\xee\x43\x62\x44\x52\x3b\xa1\x46\x57\xed\x16\x4b\x97\x9e\x03\xdb\x45\xa1\xa7\x30\xd3\xb5\x01\x5b\x57\x95\x36\xee\xaa\xdd\xb2\x14\x2f\xa2\xb1\x86\xd6\x59\x84\x1e\x55\xe6\x03\x4f\x91\x5f\xc4\x98\x1e\x5b\x70\x1f\xd4\x28\x7a\xad\x0d\xe4\xcd\x23\x1f\xe1\x1e\xa9\x00\x85\x98\xd1\x85\xa4\x16\x32\x03\x51\xf2\x11\x42\x08\x58\x37\x8a\xae\xaf\xaf\x6d\x81\x52\x46\x81\x02\x55\x2d\x25\xdc\xf4\xcc\x4f\x63\x3d\x89\xbd\xff\xfa\xb7\xb7\xd0\x3d\x17\x06\xee\xee\x88\x3b\x8a\xb4\x81\x07\xf7\xe6\xa1\x0f\x4a\x02\x5f\x8b\x8c\x5b\xcb\xa8\xc5\x3d\xff\x18\x32\xfd\xd5\x4e\xa3\xdc\xd4\x0a\x98\x13\xc0\x98\x29\x81\x4d\xe0\xf3\x76\x35\xcd\x3a\x31\x79\xbd\x1f\xeb\xca\xc5\xbc\xaa\xfc\xd3\x7b\x2d\xbc\xbd\x15\x39\x74\xbf\xe2\x16\xef\xee\xd8\xed\x2d\xaa\x8c\x68\x81\x02\x77\x77\x3b\xa4\x1f\x56\xff\x05\x27\xbe\x2f\x51\xa3\xe8\xc2\x57\x1d\x39\xbc\x02\x94\x7c\x95\x69\xdc\x30\xbd\xcf\x1d\x75\x05\x2c\x83\x95\x54\x9f\xdf\x99\xfb\x08\xee\xb3\x7c\x55\x97\xd3\xe6\x43\x72\x89\x65\x21\xc6\x17\xc1\x45\xd0\x21\x94\x43\x93\xf3\x14\x1f\xd8\xbf\x86\x32\x94\x48\x20\x7c\x50\xdd\x12\xef\xaa\xa8\x60\xc5\xb0\x40\x05\xba\x42\x05\x42\x85\xe4\x4e\x8c\x9e\x5a\x34\x70\x59\x38\x57\xf5\xe3\x58\xea\x94\xcb\x42\x5b\xd7\x3f\xec\xf5\x7a\x57\xed\x8d\xe4\x4e\x13\x91\x4d\xc5\xfd\x7e\x13\x7d\xee\x4c\xe0\xf3\xef\xfe\x74\xde\x64\xc5\x6a\xc6\x78\x1a\xb0\x62\xe1\xb0\x0d\x5d\x20\x8a\xbe\x84\x1c\xa7\x60\x05\x9d\xc0\xbc\x23\x90\xf7\x0a\x94\x95\x2f\xa7\x5a\x65\x68\xac\xf3\xce\x2b\x10\x12\x6e\x45\x6a\xfb\x51\x34\xc8\xd0\x71\x21\xed\x69\xf4\xd9\xc0\xd6\x65\xc9\xcd\xec\x74\x90\x9c\x5e\xa4\x86\x57\x08\x5c\x4a\xcf\x3e\x9c\x22\x3a\x0b\xb9\xd1\x25\x95\xac\xf9\xc2\x82\x13\x25\x4a\xa1\xb0\x3b\x88\x93\xd3\x41\x3c\xbf\x1b\x7d\x36\x48\x75\x86\x60\xdd\x4c\xe2\xab\x9d\x8a\x67\x99\x50\xa3\xfe\x51\x75\xf3\x9b\x9d\xd3\x8f\x03\x5f\x7b\x95\x8a\x97\x38\x88\x49\xf6\x69\x34\x88\xef\xad\xfe\xb0\xfd\xcb\xb6\x13\x96\x35\xfb\x81\xda\x1c\x17\x4a\xa8\x11\x54\x42\x21\xaf\x2a\xb9\x55\x50\xc0\xec\x42\xf1\xe3\x11\x9e\x69\x29\x31\x75\x80\x13\x34\xb3\x00\x72\x23\x94\x00\xdc\x73\x69\x85\x5f\xd8\xc6\x1f\xff\x7f\x84\x9f\x84\xaa\x09\x9a\x2b\xb8\x83\x29\x1a\x04\x47\x04\xcc\x20\xc1\x5c\x1b\x84\x83\xde\xfe\xcb\xed\x06\x89\xcd\x90\x1b\xd2\x7b\xf2\x3f\x44\x63\x85\x4a\x3d\x98\x23\xb6\x7f\xc0\x0e\x7a\x5b\x86\xb4\xae\xfe\xc9\xf5\xd5\x00\xa3\xae\x62\xf9\x04\xa9\xe3\xe4\x42\x62\xd7\xdd\xb8\xed\x42\x59\xe8\xfd\x64\x0c\xdc\x02\x87\xd4\x4e\x82\xc4\xe7\x40\x41\xca\x19\x4b\xed\xe4\x09\x58\x68\x32\x5b\x4e\xb3\x52\x8c\x0a\x07\x05\x01\xaa\x0a\xad\x10\x54\x5d\x26\x68\x2c\x68\x03\x58\x72\x21\x81\x67\x99\x41\x6b\x71\x0b\xad\x60\x25\xe9\x82\x76\xc6\xbc\x59\x8f\x47\x78\x2e\x6c\x25\xf9\x6c\x0e\x32\x99\xc1\x04\x8d\xc8\x05\x66\x5e\x78\x03\x7b\xd8\x14\x16\x4f\x74\xed\xe0\x5c\x2b\x2e\x33\x18\x9a\xba\xac\xb6\xd1\xf0\x76\x96\x15\xee\x00\x63\x73\x13\x3f\x36\x29\x7d\xef\xe6\x60\x78\x26\x6a\xff\xc6\xdf\x1f\x97\xc0\x8d\xae\x55\x06\x1c\x2a\xc9\x53\xa4\xa9\xe5\x3b\x6e\x44\xc8\x60\xbc\xa1\x11\x9c\xde\x73\x25\x15\xe3\x36\x13\x79\xf4\x6a\xe7\xe5\x71\xf7\xf8\xb8\xd7\x7b\x79\xbc\x77\xd0\x3d\x3c\x3e\x3a\x39\x3c\xd9\xdb\x1f\x97\x3b\x9f\x92\xd8\xdf\xd6\xae\xaa\x17\x1d\x54\xaf\x8e\xbc\x5b\xcd\x5c\xb4\xb0\x18\xf9\x4e\x0e\x7a\x9f\xde\x2e\x7d\xab\xf9\xc1\x6a\xf5\x7c\xbd\xc6\x6b\x67\x8c\xfe\x3c\x01\x0e\x19\xbf\x08\x09\x87\x8b\x3f\x7e\x2d\x1c\x02\xe9\x4a\xb8\xdd\x32\x12\x36\x57\x1b\x5e\xab\xb6\x9b\x25\x4f\x1f\x14\x69\x60\x77\x0e\xcd\x7c\x3c\xcc\xb5\x94\x7a\x8a\x66\xdb\xdd\xf1\x5e\xef\x93\x21\x4c\x0b\xbd\x06\xa3\x01\xf1\x3c\x10\x84\x1a\x3d\x7d\x50\x5a\xfb\xde\xe0\x01\x46\xc1\x2d\xe4\x7c\xa2\x8d\x70\x98\x6d\x1b\x4c\xa3\xf7\x09\xf1\x98\x83\xc9\x6b\x29\x03\x00\xa1\x72\x6d\x4a\xee\x84\x56\xd4\xb6\xd1\xf8\x92\x0f\xc1\x79\xa6\xd8\x00\x63\x44\x66\x64\xe4\xe3\xa1\x7d\x6f\xa9\x54\xac\xd4\xd3\x3d\x48\x6a\x07\x98\xe7\x98\x3a\x31\x41\x28\xd1\x15\xda\x2f\x6c\x46\xdc\x15\x68\xd6\xde\x60\x4d\x55\x55\x46\x53\xd7\x81\xf6\x1b\xcf\x64\xe1\xcf\x87\x07\xbd\x5e\xc3\xbb\xd7\x58\xfc\x56\xa5\xb2\x26\xd8\xf0\x0e\x43\x45\x77\xb6\x1c\xf4\xc6\xcc\x8f\x72\xce\x8f\xb5\x48\xc7\x0f\xdd\x41\x59\x4d\x6f\x2e\x38\xb9\xc7\x0b\x6d\x3f\xb2\x08\x0f\x17\x2d\x98\x39\xda\xcd\x4e\xdb\xb2\x0f\xe6\xd6\x3c\x1e\xff\x3b\xb4\x75\xe9\xf3\x23\xec\x5a\xfc\xe2\x97\xc2\x78\xff\xe9\x6d\x2b\x4c\xc3\xc8\x16\xbe\x57\xdf\x9e\x6f\x1d\x94\x37\x71\xbf\x77\xf2\xb2\x77\x78\x7c\x72\x74\x7c\xd8\x3b\x3a\xde\x80\xd0\x6f\x5a\xfc\xfa\x34\x6c\x27\xfd\x06\x15\x46\xa8\xd0\x70\x87\x34\x7c\x7a\xe9\x61\x53\x99\x72\x2a\x66\x1a\xc9\x48\xbc\x74\x10\x8a\x3b\xa3\xa8\x13\x57\x14\x7d\x8d\x8e\xe2\x48\xe3\xab\xd2\x53\xe8\xfb\x5d\x11\x34\xbb\xd8\x28\xfa\xf5\xe7\xbf\xfd\x02\xbb\xbb\xcd\x76\x70\x77\x37\xda\x85\x37\xc2\x15\x75\xd2\x87\xcb\xdf\x36\xd4\xb0\x75\xb2\xfd\x38\x1e\xf9\xa3\x6e\xaa\xcb\xb8\x39\xeb\xdc\x8b\xb0\x98\xd0\x74\x84\xaa\xd0\xf5\x4f\xe8\xd6\x44\xad\x9d\x6e\x14\xb9\xc6\x13\x2c\x7d\xb0\x1e\x8e\xa2\xc5\x93\x56\x76\x0f\x84\xb5\x35\x86\xc9\x26\x47\xee\x6a\x83\x60\xf0\xc7\x1a\x2d\x75\x71\x83\x30\x45\x99\xea\x12\x5f\x0c\x12\x03\xf1\xe9\x6b\x44\x09\xb9\x41\xff\xc1\x98\x16\x98\x8e\xe1\xb2\x91\x50\xf1\x11\xfe\x37\xac\xf1\xf2\xff\x32\xc4\xe1\x52\xa7\x1b\x5d\x20\xc2\xe5\x75\x37\xce\x74\x6a\xe3\xb3\x6f\xbf\x19\xbe\x7b\xfb\xd5\xf7\xc3\xb7\xdf\xbc\xe9\x96\xd9\xf5\xa3\xe5\xd9\x38\x91\x3a\x89\x4b\x6e\x1d\x9a\x8d\xb2\x3a\x90\x53\x3a\x84\x3c\xe9\x7a\xe7\x3c\x58\x8a\x47\xd1\x1b\xea\x88\x1c\xfe\xf5\x8f\xbf\xfe\xfb\x9f\x7f\x01\x91\x83\x2b\x84\xaf\xe3\x1f\xe8\xbd\x50\xa0\xac\x30\xa3\x2b\x2f\xfe\x13\x00\x00\xff\xff\xb9\x3f\xac\xcf\x35\x19\x00\x00")

func DockerTemplatesReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadmeTmpl,
		".docker/templates/readme.tmpl",
	)
}

func DockerTemplatesReadmeTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme.tmpl", size: 6453, mode: os.FileMode(420), modTime: time.Unix(1577138987, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_alpineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xef\x6e\x23\xb7\x11\xff\x9c\x7d\x8a\x39\x2b\x40\x24\xc3\xd4\xca\xf6\x19\xb0\x55\x9d\xd1\xc4\xee\x5d\x0f\x0d\x92\xf4\xac\xa0\x1f\x0c\x03\xe6\xee\xce\x6a\x19\x71\xc9\x0d\xc9\x95\xac\x18\xee\x2b\xb4\x7d\x80\x22\x5f\xf2\xb5\xdf\xfb\x3c\x7d\x81\xe6\x11\x8a\x21\x57\xd6\x1f\xeb\x7a\xf6\x5d\x2b\xfb\x8b\x76\x87\xe4\xcc\xfc\xe6\x1f\x67\xc7\x2d\x70\x53\xa1\x1c\xcb\x74\x3a\x46\x03\x0c\xb8\xac\x84\xc2\x28\x1a\xbc\x60\x0c\x86\xfa\x0c\xac\xe3\xc6\x01\x63\xa7\x51\xab\x05\x43\x9e\x48\x04\x9d\xc3\x99\x56\x0e\x95\xb3\xd1\x7e\x17\x2e\x7f\xaf\xa7\xe0\x34\xd4\x16\xaf\xda\xad\x42\x4f\x99\xd3\xac\xb6\xd8\x89\x00\x68\xf9\xb5\x30\xd6\x35\xab\x39\x3d\xcf\x17\x21\xac\x9f\x19\xe4\x0e\x81\x2b\xe0\x52\x70\x7b\xd5\x6e\xa5\x9e\xc2\xb8\x62\x9e\xd2\xf1\x52\xce\xbd\x8a\xec\x4c\x97\x95\xf6\xbc\x82\xce\x2c\x0d\x84\x25\x86\xbf\x93\xdc\x3a\x91\x5a\xe4\x26\x2d\x80\xab\x0c\xfe\x20\x12\xae\xf8\x55\xbb\x85\xcb\x4b\x8c\xab\x8c\x8d\xfd\xd2\xd2\xe9\xa1\x36\x50\x19\x7d\x33\xbb\x6a\xb7\x9c\x36\xcc\x3f\x2f\x73\xbf\xc1\xb4\x76\x08\x43\x32\x1c\xa4\xba\x2c\xb9\xca\x88\x75\xa0\xb3\x60\xd0\x86\xbe\x72\x8e\x97\x95\x44\x4b\xe6\x5b\x3e\x15\xa8\x4c\xe7\xcb\x67\x3c\x60\xee\xbc\x35\x32\xfa\x0d\x36\xf8\xb2\x76\x85\x36\x44\xe4\xe1\x29\x90\x7f\xfd\xf9\x97\xbf\x7b\x97\x18\x91\xd4\x4e\xa8\xd1\x55\xbb\xc5\xd2\xa5\xf7\xb0\xed\xa2\xd0\x53\x98\xe9\xda\x80\xad\xab\x4a\x1b\x77\xd5\x6e\x59\xf2\x17\xd1\x58\x43\xeb\x2c\x5c\x8f\x2a\xf3\x8e\x27\xcf\x2f\x7c\x4c\xaf\x2d\xb8\x77\x6a\x14\xbd\xd6\x06\xf2\xe6\x95\x8f\x70\x8f\x44\x80\x42\xcc\xe8\x40\x52\x0b\x99\x81\x28\xf9\x08\x21\x38\xac\x1b\x45\xd7\xd7\xd7\xb6\x40\x29\xa3\x26\xec\xaa\x5a\x4a\xb8\xe9\x99\x9f\xc6\x7a\x12\x7b\xfb\xf5\x6f\x6f\xa1\x7b\x2e\x0c\xdc\xdd\xb1\x26\x24\xaf\xaf\xaf\xa3\x48\x1b\x78\x70\x7c\x1e\x01\x41\x56\xd8\xd7\x22\x1d\xd7\x02\x6b\x71\xce\xbf\x86\xc8\x7f\xb5\xd3\xe8\x60\x6a\x05\xcc\x09\x60\xcc\x94\xc0\x26\xf0\x79\xbb\x9a\x66\x9d\x98\x8c\xdf\x8f\x75\xe5\x62\x5e\x55\xfe\xed\xbd\x8a\xde\xde\x8a\x1c\xba\x5f\x71\x8b\x77\x77\xec\xf6\x16\x55\x46\xb4\x40\x81\xbb\xbb\x1d\x92\x0f\xab\x7f\xc1\x96\xef\x8b\xd7\x28\xba\xf0\xc9\x47\x76\xaf\x00\x25\x5f\xdd\x34\x6e\x36\xbd\xcf\x1c\x75\x05\x2c\x83\x95\x88\x9f\x9f\x99\xdb\x08\xee\x83\x7d\x55\x96\xd3\xe6\x43\x7c\x69\xcb\x82\x8d\xcf\x85\x8b\x20\x43\x28\x87\x26\xe7\x29\x3e\xd0\x7f\x0d\x65\xc8\x94\x40\xf8\xa0\xb8\xa5\xbd\xab\xac\x82\x16\xc3\x02\x15\xe8\x0a\x15\x08\x15\x62\x3c\x31\x7a\x6a\xd1\xc0\x65\xe1\x5c\xd5\x8f\x63\xa9\x53\x2e\x0b\x6d\x5d\xff\xb0\xd7\xeb\x5d\xb5\x37\x92\x3b\x8d\x47\x36\xe5\xf8\xfb\x55\xf4\xb1\x33\x81\xcf\xbf\xfb\xd3\x79\x13\x15\xab\x11\xe3\x69\xc0\x8a\x85\xc1\x36\x14\x83\x28\xfa\x12\x72\x9c\x82\x15\xb4\x02\xf3\xc2\x40\xd6\x2b\x50\x56\x3e\xab\x6a\x95\xa1\xb1\xce\x1b\xaf\x40\x48\xb8\x15\xa9\xed\x47\x51\x34\xc8\xd0\x71\x21\xed\x69\xf4\xd9\xc0\xd6\x65\xc9\xcd\xec\x74\x90\x9c\x5e\xa4\x86\x57\x08\x5c\x4a\xbf\x7f\x38\x45\x74\x16\x72\xa3\x4b\x4a\x5d\xf3\x85\x05\x27\x4a\x94\x42\x61\x77\x10\x27\xa7\x83\x78\x7e\x36\xfa\x6c\x90\xea\x0c\xc1\xba\x99\xc4\x57\x3b\x15\xcf\x32\xa1\x46\xfd\xa3\xea\xe6\x37\x3b\xa7\x1f\x87\xbe\xf6\x22\x15\x2f\x71\x10\x13\xef\xd3\x68\x10\xdf\x6b\xfd\x61\xfd\x97\x75\x27\x2c\x6b\xfa\x03\x95\x3b\x2e\x94\x50\x23\xa0\x72\xc1\xab\x4a\x6e\x15\x14\x30\xbb\x10\xfc\x78\x84\x67\x5a\x4a\x4c\x1d\xe0\x04\xcd\x2c\x80\xdc\x08\x25\x00\xf7\xbb\xb4\xc2\x2f\x6c\x63\x8f\xff\x3f\xc2\x4f\x42\xd5\x38\xcd\x15\xdc\xc1\x14\x0d\x82\x23\x02\x66\x90\x60\xae\x0d\xc2\x41\x6f\xff\xe5\x76\x9d\xc4\x66\xc8\x0d\xc9\x3d\xf9\x1f\xa2\xb1\x42\xa5\x1e\xcc\x11\xdb\x3f\x60\x07\xbd\x2d\x43\x5a\x17\xff\xe4\xfc\x6a\x80\x51\x59\xb1\x7c\x82\x54\x72\x72\x21\xb1\xeb\x6e\xdc\x76\xa1\x2c\xe4\x7e\x32\x06\x6e\x81\x43\x6a\x27\x81\xe3\x73\xa0\x20\xe1\x8c\xa5\x76\xf2\x04\x2c\xd4\xa1\x2d\x87\x59\x29\x46\x85\x83\x82\x00\x55\x85\x56\x08\xaa\x2e\x13\x34\x16\xb4\x01\x2c\xb9\x90\xc0\xb3\xcc\xa0\xb5\xb8\x85\x52\xb0\x12\x74\x41\x3a\x63\x5e\xad\xc7\x23\x3c\x17\xb6\x92\x7c\x36\x07\x99\xcc\x60\x82\x46\xe4\x02\x33\xcf\xbc\x81\x3d\x6c\x12\x8b\x27\xba\x76\x70\xae\x15\x97\x19\x0c\x4d\x5d\x56\xdb\x28\x78\x3b\xcb\x02\x77\x80\xb1\xb9\x8a\x1f\x1b\x94\xbe\x76\x73\x30\x3c\x13\xb5\xbf\xf2\xf7\xc7\x25\x70\xa3\x6b\x95\x01\x87\x4a\xf2\x14\xa9\x6d\xf9\x8e\x1b\x11\x22\x18\x6f\xa8\x15\xa7\x7b\xae\xa4\x64\xdc\x66\x20\x8f\x5e\xed\xbc\x3c\xee\x1e\x1f\xf7\x7a\x2f\x8f\xf7\x0e\xba\x87\xc7\x47\x27\x87\x27\x7b\xfb\xe3\x72\xe7\x53\x02\xfb\xdb\xda\x55\xf5\xa2\x82\xea\xd5\x9e\x77\xab\x91\x8b\x16\x16\x3d\xdf\xc9\x41\xef\xd3\xcb\xa5\x2f\x35\x3f\x58\xad\x9e\xaf\xd6\x78\xe9\x8c\xd1\xcf\x13\xe0\x90\xf2\x0b\x97\x70\xb8\xf8\xe3\xd7\xc2\x21\x90\xac\x84\xdb\x2d\x23\x61\x73\xb1\xe1\x5a\xb5\xdd\x2c\x79\x7a\xa3\x48\x1d\xbb\x73\x68\xe6\xed\x61\xae\xa5\xd4\x53\x34\xdb\xae\x8e\xf7\x72\x9f\x0c\x61\x5a\xe8\x35\x18\x0d\x88\xe7\x81\x20\xd4\xe8\xe9\x8d\xd2\xda\xf7\x06\x0f\x30\x0a\x6e\x21\xe7\x13\x6d\x84\xc3\x6c\xdb\x60\x1a\xb9\x4f\xf0\xc7\x1c\x4c\x5e\x4b\x19\x00\x08\x95\x6b\x53\x72\x27\xb4\xa2\xb2\x8d\xc6\xa7\x7c\x70\xce\x33\xf9\x06\x18\x23\x32\x23\x25\x1f\x0f\xed\x7b\x4b\xa9\x62\xa5\x9e\xee\x41\x52\x3b\xc0\x3c\xc7\xd4\x89\x09\x42\x89\xae\xd0\x7e\x70\x33\xe2\xae\x40\xb3\x76\x83\x35\x59\x55\x19\x4d\x55\x07\xda\x6f\xfc\x26\x0b\x7f\x3e\x3c\xe8\xf5\x9a\xbd\x7b\x8d\xc6\x6f\x55\x2a\x6b\x82\x0d\xef\x30\x64\x74\x67\xcb\x4e\x6f\xd4\xfc\x28\xe3\xfc\x58\x8b\x74\xfc\xd0\x1c\x14\xd5\x74\x73\xc1\xc9\x3d\x5e\x68\xfb\x96\x45\x78\xb8\x68\xc1\xcc\xd1\x6e\x36\xda\x96\x6d\x30\xd7\xe6\xf1\xf8\xdf\xa1\xad\x4b\x1f\x1f\x61\xd8\xe2\x07\xc0\xe4\xc6\xfb\x4f\x6f\x5b\x61\x1a\x5a\xb6\xf0\xbd\xfa\xf6\x7c\xeb\xa0\xbc\x8a\xfb\xbd\x93\x97\xbd\xc3\xe3\x93\xa3\xe3\xc3\xde\xd1\xf1\x06\x84\x7e\xd4\xe2\xc7\xa8\x61\x4a\xe9\x27\xa9\x30\x42\x85\x86\x3b\xa4\xe6\xd3\x73\x0f\x13\xcb\x94\x53\x32\x53\x4b\x46\xec\xa5\x83\x90\xdc\x19\x79\x9d\x76\x45\xd1\xd7\xe8\xc8\x8f\xd4\xbe\x2a\x3d\x85\xbe\x1f\x16\x41\x33\x93\x8d\xa2\x5f\x7f\xfe\xdb\x2f\xb0\xbb\xdb\x8c\x07\x77\x77\xa3\x5d\x78\x23\x5c\x51\x27\x7d\xb8\xfc\x6d\x43\x0d\x63\x27\xdb\x8f\xe3\x91\x5f\xea\xa6\xba\x8c\x9b\xb5\xce\x3d\x0b\x8b\x09\x75\x47\xa8\x0a\x5d\xff\x84\x6e\x8d\xd5\xda\xea\x46\x96\x6b\x7b\x16\xac\x2b\x81\x32\xd5\xfb\xfb\x6b\x3c\xe7\xe4\x8d\xcc\xe6\x8b\x01\xef\x83\x61\x73\x14\x2d\xde\xb4\xb2\x7b\x20\xac\xad\x31\xf4\x47\x39\x72\x57\x1b\x04\x83\x3f\xd6\x68\xe9\x2e\x30\x08\x53\x62\x57\xe2\x8b\x41\x62\x20\x3e\x7d\x8d\x28\x21\x37\xe8\x3f\x3b\xd3\x02\xd3\x31\x5c\x36\x1c\x2a\x3e\xc2\xff\x66\xb1\x78\xf9\x9f\x17\x71\x38\xd4\xe9\x46\x17\x88\x70\x79\xdd\x8d\x33\x9d\xda\xf8\xec\xdb\x6f\x86\xef\xde\x7e\xf5\xfd\xf0\xed\x37\x6f\xba\x65\x76\xfd\x68\x7e\x36\x4e\xa4\x4e\xe2\x92\x5b\x87\x66\x23\xaf\x0e\xe4\x14\x54\x21\xda\xba\xde\x38\x0f\x46\xec\x51\xf4\x86\xea\x2a\x87\x7f\xfd\xe3\xaf\xff\xfe\xe7\x5f\x40\xe4\xe0\x0a\xe1\xab\xc1\x0f\x74\xbb\x14\x28\x2b\xcc\xe8\xc8\x8b\xff\x04\x00\x00\xff\xff\x80\x8a\xbb\xb6\x8c\x19\x00\x00")

func DockerTemplatesReadme_alpineTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_alpineTmpl,
		".docker/templates/readme_alpine.tmpl",
	)
}

func DockerTemplatesReadme_alpineTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_alpineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_alpine.tmpl", size: 6540, mode: os.FileMode(420), modTime: time.Unix(1577122364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesReadme_rootTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xc1\x72\xdb\x36\x13\xbe\xe3\x29\x36\xf2\x3f\xf9\x6b\x4d\x48\x4c\xaf\x1e\x4a\xa9\xe3\xd8\xae\x0f\xb5\x3b\x96\x93\x1e\x34\x9e\x31\x04\xae\x48\x34\x20\xc0\x00\xa0\xd4\x8c\x86\xcf\xd0\xf6\x01\x3a\xb9\xe4\xda\x7b\x9f\xa7\x2f\xd0\x3c\x42\x07\x04\x29\xcb\x8e\x13\x4b\xa9\x74\x32\x8d\xfd\x76\xf7\xc3\x87\xc5\x6a\xb1\x07\x6e\x2e\x94\x8b\x52\xcd\xdf\xa0\x81\x09\xb3\x98\x82\x56\x70\x28\x4b\xa1\xf0\x19\xbc\x9a\x54\xca\x55\xc0\x54\x0a\x2f\x71\x22\x98\x82\x91\x14\x05\x21\x49\x09\x4c\x8a\x4c\x0d\x7a\x1c\x95\x43\xd3\x1b\x12\x00\x80\x84\x41\x6e\x70\x3a\xe8\xe5\xce\x95\xf6\x80\x52\x67\xd8\x4c\xd8\x88\x8b\x98\xeb\x62\xb1\x80\xf8\x35\xb7\x3f\x32\x97\x43\x5d\xf7\x86\x89\x28\x32\xb0\x86\xdf\xc2\x45\x91\xc5\x36\x17\x28\x53\x1b\x0b\xdd\x7a\xdf\x75\x8b\xed\x2c\xeb\x01\x1d\x26\x94\x7d\x26\x27\x97\xba\x4a\xe3\xd4\x68\x85\xb1\xd0\x8f\x27\xbd\x8b\xa7\xac\x14\x74\xc2\xd2\x0c\xef\x25\xa6\xd6\x31\x57\x59\x9f\xff\xb9\xcf\x67\x70\x6a\x69\x8e\x2c\xb5\x74\xb1\x88\x8f\x2a\x63\x50\xb9\x17\x86\x29\x9e\xd7\xf5\x92\x61\x42\xcb\xe1\xfa\x72\x65\xc2\xe5\xd5\xe4\x01\xad\x80\x49\x37\xe8\x05\x33\x30\x29\xc1\xa0\x44\x66\xd1\xae\xa1\x62\xf0\xa2\xa9\x9e\x2b\xa9\x59\x7a\x7f\x5b\x4e\x3b\x26\x1f\x57\x75\x3d\x6a\x92\x39\xb4\xae\x63\xf7\xdf\xc9\x85\x78\xdb\xe5\xe8\x58\xb6\x3e\x31\xc7\xb2\x4d\xeb\x6f\x3d\x16\x1b\x4b\xd4\x3a\xec\x86\x4d\x69\x70\x4b\x8c\x28\x93\x5b\x3b\xa9\xa9\x36\x6f\xd6\xa7\xe3\xd1\x0f\x34\x8b\xe7\xd6\xbd\x93\x38\xb0\x9a\x0b\x26\x9f\x4a\x36\x41\x39\x38\xf1\x81\xb7\x40\xd0\x3a\x66\x36\xb8\x82\x0d\x7c\x3d\x86\x23\xc7\xcc\x36\x18\xce\x99\xe3\x39\x6e\x42\xb2\xf3\x58\x8f\xe7\x4f\x1e\xbd\x0d\xa2\xba\x44\x05\xc2\xda\x6a\x93\x9e\x16\xf0\xbb\xb9\x12\x5c\x6a\xff\x63\xf8\x75\x94\xa2\xe0\xbd\x1b\x66\x8d\x54\xa5\xd9\x98\x53\x69\x76\xaa\xd4\x57\x31\xda\xa9\x50\x5c\x2b\x67\xc4\xa4\x72\x7a\x93\x0b\xb0\xea\xb5\x1b\x5e\x52\x70\x54\x9b\x74\xda\xd6\x61\x53\x36\x5f\x9a\xbe\x02\xa1\x80\x80\x66\xde\xd9\xc6\x40\x16\xc6\x9d\xbd\x3d\xb8\xc4\xb7\x95\x30\x58\xa0\x72\x96\x9c\x4d\xe1\x9d\xae\x20\xd5\xea\xff\x0e\x72\x36\x43\x78\xd9\xcc\x9b\x34\xfc\x89\x8e\x74\x51\x6a\x8b\xc0\x73\xe4\x6f\xa0\xdf\x1f\xa1\xab\xca\x16\xd3\xef\x83\x45\xee\x84\x56\x84\x24\x29\x3a\x26\xa4\x1d\x92\xc4\x56\x45\xc1\xcc\xbb\x61\x32\x19\xae\xa2\x13\x3a\x19\x26\xb4\x33\x92\xa4\x65\x13\x8c\xa4\x60\xfc\x62\x74\xf0\xa9\x4e\xa9\xe6\x36\x0e\x23\xb0\x57\x8a\x86\xcf\x68\xaa\x4d\x54\x30\x4e\x85\xb2\x8e\x49\x49\x7b\x43\xd8\xd0\x03\x1a\x51\x88\x14\xaa\xfa\x65\x8d\xbc\x9d\x5b\x83\xef\x62\x72\xa4\x55\x33\x85\x7f\x29\xff\x23\x9e\x2d\x8f\xa5\x12\xd0\x2a\xbe\x3e\x35\x1e\x1c\xd6\xd1\xe2\x3e\x14\x6e\x2b\x23\xa1\xcb\x13\xf4\x64\xbe\xd7\x73\x70\x1a\x2a\x4f\xe4\x44\x1b\x98\x0a\x63\x1d\x54\x96\x65\xf8\xac\xa9\x18\x85\x98\x7a\xc4\xa4\x12\x32\x05\x51\xb0\x0c\xa1\xcd\x44\xc8\xcd\xcd\x8d\xcd\x51\x4a\x92\x09\xe7\x7b\x90\x42\x88\xa2\x14\x4b\x97\x0f\xbe\x85\x4f\x2f\x24\xbd\x5b\xb6\x84\xa7\x10\xb7\x4a\x4d\x85\x44\x4b\xc7\xe3\xd7\xc7\x97\xa3\xb3\x8b\xf3\xeb\x6b\x3a\x1e\x5f\x8c\xae\xaf\x49\x27\x64\x5b\x9f\x55\x09\x51\x7a\x7f\xd1\x54\x2a\x3c\xa2\x20\xca\x3d\x27\x42\xb4\x81\x86\x5d\x8b\x84\xb2\x92\x12\x16\x8b\x38\x68\x7f\xce\x0a\xb4\x25\xe3\x58\xd7\x74\xb9\xf8\x82\x59\xac\xeb\x83\xf1\xf8\xea\xf0\x74\x99\xb7\x09\x1d\x39\x01\x51\x64\x8a\x8d\x02\x2c\xa9\x5c\xe5\xa8\xda\x6b\xe5\x72\x84\xcb\xe3\xc3\x97\x3f\x1c\xc7\x45\xea\x47\x2b\x40\xc6\x73\x98\xa1\xb1\x42\x2b\x1b\xfb\x13\xd9\x83\xc3\x19\x13\x92\x4d\x24\x06\xb5\x2d\xf1\xaa\x85\x14\x67\xcd\xc2\x55\x63\xac\xeb\xe6\x00\x0f\x2b\x97\x6b\xe3\x41\x86\xa9\x0c\xe1\x7f\x33\x26\xe1\x60\x00\x71\x6b\xa8\x6b\xf2\xf1\xfd\xef\x1f\xa0\xdf\x5f\x2c\x1a\x63\xec\xc9\x43\x5d\xf7\xfb\x3e\xb0\x98\x86\xc5\xab\xb9\x70\x0e\x8d\x5f\x87\xf6\xfb\x00\xc6\xdf\x75\x3e\xb7\xe6\xeb\x6f\x96\xad\x2d\xac\x75\x07\x7b\x0f\xb7\x0f\x4f\xc6\xdd\x7f\x27\x5a\x4a\x3d\xbf\xf5\xbc\xdf\xd2\x02\x8c\x4e\x1b\xd8\x03\xb1\x9e\x77\x23\xa3\xb7\x3f\x5d\x1d\x81\xf6\x17\x0b\x40\x95\x7a\x31\x56\x36\x73\x1a\x7a\xbc\xdf\x4b\xf8\x5c\xdd\xca\xd2\x78\xcb\xe7\x6e\x85\xde\x45\x3d\x9c\xe1\xb8\x60\x42\x36\x09\x9a\xaf\x03\xe8\xfc\x3a\xc3\xaa\x17\xaa\xb4\x3d\xac\x8f\xef\x3f\xfc\x01\x47\xdd\x8f\x9b\x50\x19\x21\xb7\xff\x69\x65\x9f\xb5\xb3\x4e\xf3\xda\x9f\x22\x73\x55\xf3\x28\x78\x5b\xa1\x75\x16\x98\x41\x98\xa3\xe4\xba\xc0\x27\xc9\xc4\x00\x1d\x9e\x20\x4a\x98\x1a\x44\x7f\x43\x43\x8d\x8d\xdb\x08\x25\xcb\xf0\x73\x3b\x5c\x7d\x2b\x04\xf8\x7e\x4c\x46\x88\x30\xbe\x69\xee\xa3\xa5\x47\x17\xe7\x57\x97\x67\x2f\x5e\x5d\x9d\x9d\x9f\xc6\x45\x7a\xb3\x4e\x24\x67\x10\x1f\x78\x87\x3f\x18\x70\xbf\xa9\xfe\xb6\x13\x35\x75\x0f\xa3\x5c\xcf\x7d\xc7\x31\x60\xab\xb2\xd4\xc6\x11\x72\x2a\x66\x08\x0c\xfe\xfe\xf3\xb7\x7f\xfe\xfa\xd5\x6b\xef\x72\x61\xa1\x34\xfa\x67\xe4\x0e\x72\x94\x25\xa6\xde\xe5\x09\x21\xff\x06\x00\x00\xff\xff\xa7\xb5\x20\x85\x46\x11\x00\x00")

func DockerTemplatesReadme_rootTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesReadme_rootTmpl,
		".docker/templates/readme_root.tmpl",
	)
}

func DockerTemplatesReadme_rootTmpl() (*asset, error) {
	bytes, err := DockerTemplatesReadme_rootTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/readme_root.tmpl", size: 4422, mode: os.FileMode(420), modTime: time.Unix(1577138722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DockerTemplatesTravisTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x51\x6b\xdb\x30\x10\x7e\xf7\xaf\x38\x4c\xa0\x0f\x43\x56\x3b\xd8\x1e\x0c\x1d\x94\x35\x8c\xb2\xb5\x1d\x09\xeb\x5e\x06\xa9\x62\x5d\x6c\xad\xb2\xe4\xea\x24\x27\xd4\xcd\x7f\x1f\x75\xdc\xc4\x49\xdd\xae\x6f\x86\xfb\xbe\xef\x7c\xdf\x7d\x27\xb1\xf0\xe8\x66\x94\x39\x55\xf9\x34\x02\x60\x20\x6d\x76\x87\x0e\x54\x29\x72\xa4\x28\xa2\x20\x6d\x0a\x0e\xef\x83\x72\x28\xa3\x68\x8e\x0b\xeb\x70\xa6\x0c\x79\xa1\xf5\x86\xf2\x84\x01\x57\x02\x5b\x00\x0f\xe4\xb8\xb6\x99\xd0\x7c\xae\x0c\xdf\x88\x31\xd2\xaa\x7c\x3f\x92\x11\x1a\xb2\xae\x25\x64\xc1\x69\x60\x3f\xa0\xf0\xbe\xa2\x94\xf3\x5c\xf9\x22\xcc\x93\xcc\x96\x7d\xc6\xde\xb7\x43\x8d\x82\x90\xb8\xb4\x4b\xa3\xad\x90\xfc\x24\xf9\xf8\x39\x39\xe1\x52\x91\x9f\x69\x65\xc2\x2a\xf1\xc2\x25\xf9\x03\x30\x66\x83\xaf\x82\x87\x1e\xbf\xab\xb5\xdd\xbd\x70\xb0\xaa\x17\xaf\x95\xb3\xa2\xb4\x12\x3e\xac\x60\xa7\xfc\x62\xe2\xff\x60\xfa\xb3\xb6\xe6\x94\xf5\x2b\xc8\x03\xc3\xde\xc1\xe8\xb4\x87\x88\x98\x15\x16\x8e\x9a\x18\x57\x15\x3a\x55\xa2\xf1\x42\xc7\xa9\x77\x01\xd7\x47\xf0\xb8\xd1\xf5\x88\xc0\xd1\x67\x9d\x24\x97\x02\x4b\x6b\x92\xbf\x64\x7b\xcd\x09\x5d\xad\x32\x7c\x4e\x8d\x43\xf2\xc2\xf9\x5e\x90\x58\x66\xcb\xca\x12\x02\x63\x35\x3a\x52\x7d\xb2\x3b\x1c\x8a\xef\x73\xde\x97\x00\xde\xa1\x87\x17\xff\x29\x39\x3e\x50\x65\xb7\xc1\x88\x12\x81\xd1\xed\xf6\xb3\xbc\x85\x2f\x30\xd4\x7c\xbb\xbd\x97\xb5\xad\xf9\xfb\x73\x0e\xb8\xfd\xa6\x13\x9d\x73\x15\x6d\x6f\xab\x7f\x8d\x99\xec\x00\x0b\xa5\x91\x78\x3c\xba\x19\x4f\xa6\x17\xd7\x57\x71\x5b\xbd\xb8\x3c\xfb\x36\x3e\x8d\x57\xc7\xee\xe1\xce\xd6\xdc\x2f\x95\xf1\xe9\xa8\xe9\x30\xfc\x0f\xe7\x6c\x1d\x47\x11\x9a\x3a\x6d\x1a\x27\x4c\x8e\x30\xaa\x85\x86\xf4\x14\x92\x9b\xcd\x3f\xd0\x7a\xdd\x4a\x75\x9c\xd3\xa6\x69\x21\xc9\xb9\x72\xf0\x66\x89\x0b\x5d\x29\x83\x6f\x21\x9e\x42\xd8\x34\x68\xe4\x7a\x1d\x45\x5a\x98\x3c\x88\x1c\x53\x98\x0b\x2a\xa2\xe8\xe5\x9b\xb3\x89\xf9\x80\x37\xf3\xa0\xb4\x04\xc6\xe8\x3e\x08\x2a\x80\x79\x88\x47\xed\xe8\x31\x24\xbb\x55\xf4\x45\x36\x8c\x67\xd4\x21\x06\x5c\x30\xc0\xbc\xda\xc9\xb0\xa2\xdf\xcf\xa0\x5f\x5a\x77\x07\x99\x43\xe1\x11\xcc\x92\xb5\xce\x0e\xed\x32\x54\xc0\xe4\xc0\xbb\xb9\x3d\xb2\x78\x74\x7e\xfd\xf5\xfb\x78\x32\xfb\x79\x36\x9d\xfe\xbe\x9e\x9c\xc7\xf0\xf8\x8c\xd5\x36\x57\x06\x58\xd8\x81\x7e\x4d\xc7\x93\xab\xb3\xcb\xa7\x3f\x62\x95\x20\x5a\x5a\x27\x19\x79\xa9\xf6\xb3\x12\xa8\xd8\x0d\x17\x75\x37\x48\x69\x57\xff\x17\x00\x00\xff\xff\xac\x7b\x43\x4b\xd4\x05\x00\x00")

func DockerTemplatesTravisTmplBytes() ([]byte, error) {
	return bindataRead(
		_DockerTemplatesTravisTmpl,
		".docker/templates/travis.tmpl",
	)
}

func DockerTemplatesTravisTmpl() (*asset, error) {
	bytes, err := DockerTemplatesTravisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".docker/templates/travis.tmpl", size: 1492, mode: os.FileMode(420), modTime: time.Unix(1577122364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".docker/templates/contributors.tmpl":           DockerTemplatesContributorsTmpl,
	".docker/templates/docker-compose.tmpl":         DockerTemplatesDockerComposeTmpl,
	".docker/templates/docker-entrypoint.tmpl":      DockerTemplatesDockerEntrypointTmpl,
	".docker/templates/docker-sync.tmpl":            DockerTemplatesDockerSyncTmpl,
	".docker/templates/dockerfile_alpine.tmpl":      DockerTemplatesDockerfile_alpineTmpl,
	".docker/templates/dockerfile_debian-slim.tmpl": DockerTemplatesDockerfile_debianSlimTmpl,
	".docker/templates/dockerfile_ubuntu.tmpl":      DockerTemplatesDockerfile_ubuntuTmpl,
	".docker/templates/dockerignore.tmpl":           DockerTemplatesDockerignoreTmpl,
	".docker/templates/env.tmpl":                    DockerTemplatesEnvTmpl,
	".docker/templates/makefile.tmpl":               DockerTemplatesMakefileTmpl,
	".docker/templates/readme.tmpl":                 DockerTemplatesReadmeTmpl,
	".docker/templates/readme_alpine.tmpl":          DockerTemplatesReadme_alpineTmpl,
	".docker/templates/readme_root.tmpl":            DockerTemplatesReadme_rootTmpl,
	".docker/templates/travis.tmpl":                 DockerTemplatesTravisTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".docker": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"contributors.tmpl":           &bintree{DockerTemplatesContributorsTmpl, map[string]*bintree{}},
			"docker-compose.tmpl":         &bintree{DockerTemplatesDockerComposeTmpl, map[string]*bintree{}},
			"docker-entrypoint.tmpl":      &bintree{DockerTemplatesDockerEntrypointTmpl, map[string]*bintree{}},
			"docker-sync.tmpl":            &bintree{DockerTemplatesDockerSyncTmpl, map[string]*bintree{}},
			"dockerfile_alpine.tmpl":      &bintree{DockerTemplatesDockerfile_alpineTmpl, map[string]*bintree{}},
			"dockerfile_debian-slim.tmpl": &bintree{DockerTemplatesDockerfile_debianSlimTmpl, map[string]*bintree{}},
			"dockerfile_ubuntu.tmpl":      &bintree{DockerTemplatesDockerfile_ubuntuTmpl, map[string]*bintree{}},
			"dockerignore.tmpl":           &bintree{DockerTemplatesDockerignoreTmpl, map[string]*bintree{}},
			"env.tmpl":                    &bintree{DockerTemplatesEnvTmpl, map[string]*bintree{}},
			"makefile.tmpl":               &bintree{DockerTemplatesMakefileTmpl, map[string]*bintree{}},
			"readme.tmpl":                 &bintree{DockerTemplatesReadmeTmpl, map[string]*bintree{}},
			"readme_alpine.tmpl":          &bintree{DockerTemplatesReadme_alpineTmpl, map[string]*bintree{}},
			"readme_root.tmpl":            &bintree{DockerTemplatesReadme_rootTmpl, map[string]*bintree{}},
			"travis.tmpl":                 &bintree{DockerTemplatesTravisTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
